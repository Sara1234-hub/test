
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function () {
	'use strict';

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var react = {exports: {}};

	var react_production_min = {};

	/**
	 * @license React
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReact_production_min;

	function requireReact_production_min () {
		if (hasRequiredReact_production_min) return react_production_min;
		hasRequiredReact_production_min = 1;
	var l=Symbol.for("react.element"),n=Symbol.for("react.portal"),p=Symbol.for("react.fragment"),q=Symbol.for("react.strict_mode"),r=Symbol.for("react.profiler"),t=Symbol.for("react.provider"),u=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),w=Symbol.for("react.suspense"),x=Symbol.for("react.memo"),y=Symbol.for("react.lazy"),z=Symbol.iterator;function A(a){if(null===a||"object"!==typeof a)return null;a=z&&a[z]||a["@@iterator"];return "function"===typeof a?a:null}
		var B={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}E.prototype.isReactComponent={};
		E.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,a,b,"setState");};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}var H=G.prototype=new F;
		H.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};
		function M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f;}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return {$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}
		function N(a,b){return {$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return "object"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g;function Q(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
		function R(a,b,e,d,c){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case l:case n:h=!0;}}if(h)return h=a,c=c(h),a=""===d?"."+Q(h,0):d,I(c)?(e="",null!=a&&(e=a.replace(P,"$&/")+"/"),R(c,b,e,"",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?"":(""+c.key).replace(P,"$&/")+"/")+a)),b.push(c)),1;h=0;d=""===d?".":d+":";if(I(a))for(var g=0;g<a.length;g++){k=
		a[g];var f=d+Q(k,g);h+=R(k,b,e,f,c);}else if(f=A(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if("object"===k)throw b=String(a),Error("Objects are not valid as a React child (found: "+("[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b)+"). If you meant to render a collection of children, use an array instead.");return h}
		function S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,"","",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b;},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b;});-1===a._status&&(a._status=0,a._result=b);}if(1===a._status)return a._result.default;throw a._result;}
		var U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};react_production_min.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments);},e);},count:function(a){var b=0;S(a,function(){b++;});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error("React.Children.only expected to receive a single React element child.");return a}};react_production_min.Component=E;react_production_min.Fragment=p;
		react_production_min.Profiler=r;react_production_min.PureComponent=G;react_production_min.StrictMode=q;react_production_min.Suspense=w;react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;
		react_production_min.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+a+".");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);
		for(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g;}return {$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};react_production_min.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};react_production_min.createElement=M;react_production_min.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};
		react_production_min.forwardRef=function(a){return {$$typeof:v,render:a}};react_production_min.isValidElement=O;react_production_min.lazy=function(a){return {$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};react_production_min.memo=function(a,b){return {$$typeof:x,type:a,compare:void 0===b?null:b}};react_production_min.startTransition=function(a){var b=V.transition;V.transition={};try{a();}finally{V.transition=b;}};react_production_min.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.");};
		react_production_min.useCallback=function(a,b){return U.current.useCallback(a,b)};react_production_min.useContext=function(a){return U.current.useContext(a)};react_production_min.useDebugValue=function(){};react_production_min.useDeferredValue=function(a){return U.current.useDeferredValue(a)};react_production_min.useEffect=function(a,b){return U.current.useEffect(a,b)};react_production_min.useId=function(){return U.current.useId()};react_production_min.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};
		react_production_min.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};react_production_min.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};react_production_min.useMemo=function(a,b){return U.current.useMemo(a,b)};react_production_min.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};react_production_min.useRef=function(a){return U.current.useRef(a)};react_production_min.useState=function(a){return U.current.useState(a)};react_production_min.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};
		react_production_min.useTransition=function(){return U.current.useTransition()};react_production_min.version="18.2.0";
		return react_production_min;
	}

	(function (module) {

		{
		  module.exports = requireReact_production_min();
		}
	} (react));

	var React = /*@__PURE__*/getDefaultExportFromCjs(react.exports);

	var React$1 = /*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		default: React
	}, [react.exports]);

	var reactDom = {exports: {}};

	var reactDom_production_min = {};

	var scheduler = {exports: {}};

	var scheduler_production_min = {};

	/**
	 * @license React
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredScheduler_production_min;

	function requireScheduler_production_min () {
		if (hasRequiredScheduler_production_min) return scheduler_production_min;
		hasRequiredScheduler_production_min = 1;
		(function (exports) {
	function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}
			function g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D="function"===typeof setTimeout?setTimeout:null,E="function"===typeof clearTimeout?clearTimeout:null,F="undefined"!==typeof setImmediate?setImmediate:null;
			"undefined"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t);}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else {var b=h(t);null!==b&&K(H,b.startTime-a);}}
			function J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if("function"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?v.callback=e:v===h(r)&&k(r);G(b);}else k(r);v=h(r);}if(null!==v)var w=!0;else {var m=h(t);null!==m&&K(H,m.startTime-b);w=!1;}return w}finally{v=null,y=c,z=!1;}}var N=!1,O=null,L=-1,P=5,Q=-1;
			function M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a);}finally{b?S():(N=!1,O=null);}}else N=!1;}var S;if("function"===typeof F)S=function(){F(R);};else if("undefined"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null);};}else S=function(){D(R,0);};function I(a){O=a;N||(N=!0,S());}function K(a,b){L=D(function(){a(exports.unstable_now());},b);}
			exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J));};
			exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<a?Math.floor(1E3/a):5;};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y;}var c=y;y=b;try{return a()}finally{y=c;}};exports.unstable_pauseExecution=function(){};
			exports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=y;y=a;try{return b()}finally{y=c;}};
			exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};
			exports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c;}}};
	} (scheduler_production_min));
		return scheduler_production_min;
	}

	var hasRequiredScheduler;

	function requireScheduler () {
		if (hasRequiredScheduler) return scheduler.exports;
		hasRequiredScheduler = 1;
		(function (module) {

			{
			  module.exports = requireScheduler_production_min();
			}
	} (scheduler));
		return scheduler.exports;
	}

	/**
	 * @license React
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactDom_production_min;

	function requireReactDom_production_min () {
		if (hasRequiredReactDom_production_min) return reactDom_production_min;
		hasRequiredReactDom_production_min = 1;
	var aa=react.exports,ca=requireScheduler();function p(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+"Capture",b);}
		function ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a]);}
		var ia=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,la=
		{},ma={};function oa(a){if(ja.call(ma,a))return !0;if(ja.call(la,a))return !1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return !1}function pa(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
		function qa(a,b,c,d){if(null===b||"undefined"===typeof b||pa(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var z={};
		"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1);});
		["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1);});
		["checked","multiple","muted","selected"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1);});var ra=/[\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}
		"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(ra,
		sa);z[b]=new v(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1);});
		z.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0);});
		function ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)));}
		var ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for("react.element"),wa=Symbol.for("react.portal"),ya=Symbol.for("react.fragment"),za=Symbol.for("react.strict_mode"),Aa=Symbol.for("react.profiler"),Ba=Symbol.for("react.provider"),Ca=Symbol.for("react.context"),Da=Symbol.for("react.forward_ref"),Ea=Symbol.for("react.suspense"),Fa=Symbol.for("react.suspense_list"),Ga=Symbol.for("react.memo"),Ha=Symbol.for("react.lazy");	var Ia=Symbol.for("react.offscreen");var Ja=Symbol.iterator;function Ka(a){if(null===a||"object"!==typeof a)return null;a=Ja&&a[Ja]||a["@@iterator"];return "function"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);La=b&&b[1]||"";}return "\n"+La+a}var Na=!1;
		function Oa(a,b){if(!a||Na)return "";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(l){var d=l;}Reflect.construct(a,[],b);}else {try{b.call();}catch(l){d=l;}a.call(b.prototype);}else {try{throw Error();}catch(l){d=l;}a();}}catch(l){if(l&&d&&"string"===typeof l.stack){for(var e=l.stack.split("\n"),
		f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k="\n"+e[g].replace(" at new "," at ");a.displayName&&k.includes("<anonymous>")&&(k=k.replace("<anonymous>",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Ma(a):""}
		function Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma("Lazy");case 13:return Ma("Suspense");case 19:return Ma("SuspenseList");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return ""}}
		function Qa(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ya:return "Fragment";case wa:return "Portal";case Aa:return "Profiler";case za:return "StrictMode";case Ea:return "Suspense";case Fa:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case Ca:return (a.displayName||"Context")+".Consumer";case Ba:return (a._context.displayName||"Context")+".Provider";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||
		b.name||"",a=""!==a?"ForwardRef("+a+")":"ForwardRef");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||"Memo";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}
		function Ra(a){var b=a.type;switch(a.tag){case 24:return "Cache";case 9:return (b.displayName||"Context")+".Consumer";case 10:return (b._context.displayName||"Context")+".Provider";case 18:return "DehydratedFragment";case 11:return a=b.render,a=a.displayName||a.name||"",b.displayName||(""!==a?"ForwardRef("+a+")":"ForwardRef");case 7:return "Fragment";case 5:return b;case 4:return "Portal";case 3:return "Root";case 6:return "Text";case 16:return Qa(b);case 8:return b===za?"StrictMode":"Mode";case 22:return "Offscreen";
		case 12:return "Profiler";case 21:return "Scope";case 13:return "Suspense";case 19:return "SuspenseList";case 25:return "TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"===typeof b)return b.displayName||b.name||null;if("string"===typeof b)return b}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "string":case "undefined":return a;case "object":return a;default:return ""}}
		function Ta(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
		function Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
		null;delete a[b];}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a));}function Wa(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
		function Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function ab(a,b){b=b.checked;null!=b&&ta(a,"checked",b,!1);}
		function bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?cb(a,b.type,c):b.hasOwnProperty("defaultValue")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
		function db(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
		function cb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}var eb=Array.isArray;
		function fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
		function gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:Sa(c)};}
		function ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}function kb(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}
		function lb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?kb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
		var mb,nb=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if("http://www.w3.org/2000/svg"!==a.namespaceURI||"innerHTML"in a)a.innerHTML=b;else {mb=mb||document.createElement("div");mb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
		function ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
		var pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,
		zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=["Webkit","ms","Moz","O"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a];});});function rb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(""+b).trim():b+"px"}
		function sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=rb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
		function ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if("object"!==typeof b.dangerouslySetInnerHTML||!("__html"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(p(62));}}
		function vb(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;
		function Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b));}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a;}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a]);}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb();}}
		function Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==
		typeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,"passive",{get:function(){Lb=!0;}});window.addEventListener("test",Mb,Mb);window.removeEventListener("test",Mb,Mb);}catch(a){Lb=!1;}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a;}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments);}
		function Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null;}else throw Error(p(198));Qb||(Qb=!0,Rb=l);}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}
		function Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling;}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
		c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling;}return null}
		var ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&"function"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128));}catch(b){}}
		var oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;
		function tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;
		default:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)));}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}
		function vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return -1;case 134217728:case 268435456:case 536870912:case 1073741824:return -1;default:return -1}}
		function wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b);}else k<=b&&(a.expiredLanes|=h);f&=~h;}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
		function Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c;}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f;}}
		function Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e;}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
		function Sc(a,b){switch(a){case "focusin":case "focusout":Lc=null;break;case "dragenter":case "dragleave":Mc=null;break;case "mouseover":case "mouseout":Nc=null;break;case "pointerover":case "pointerout":Oc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Pc.delete(b.pointerId);}}
		function Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
		function Uc(a,b,c,d,e){switch(b){case "focusin":return Lc=Tc(Lc,a,b,c,d,e),!0;case "dragenter":return Mc=Tc(Mc,a,b,c,d,e),!0;case "mouseover":return Nc=Tc(Nc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return !1}
		function Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c);});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}
		function Xc(a){if(null!==a.blockedOn)return !1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null;}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift();}return !0}function Zc(a,b,c){Xc(a)&&c.delete(b);}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc);}
		function ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)));}
		function bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift();}var cd=ua.ReactCurrentBatchConfig,dd=!0;
		function ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}
		function fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f;}null!==e&&d.stopPropagation();}else hd(a,b,d,null,c);}}var id=null;
		function Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null;}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null;}else b!==a&&(a=null);id=a;return null}
		function jd(a){switch(a){case "cancel":case "click":case "close":case "contextmenu":case "copy":case "cut":case "auxclick":case "dblclick":case "dragend":case "dragstart":case "drop":case "focusin":case "focusout":case "input":case "invalid":case "keydown":case "keypress":case "keyup":case "mousedown":case "mouseup":case "paste":case "pause":case "play":case "pointercancel":case "pointerdown":case "pointerup":case "ratechange":case "reset":case "resize":case "seeked":case "submit":case "touchcancel":case "touchend":case "touchstart":case "volumechange":case "change":case "selectionchange":case "textInput":case "compositionstart":case "compositionend":case "compositionupdate":case "beforeblur":case "afterblur":case "beforeinput":case "blur":case "fullscreenchange":case "focus":case "hashchange":case "popstate":case "select":case "selectstart":return 1;case "drag":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "mousemove":case "mouseout":case "mouseover":case "pointermove":case "pointerout":case "pointerover":case "scroll":case "toggle":case "touchmove":case "wheel":case "mouseenter":case "mouseleave":case "pointerenter":case "pointerleave":return 4;
		case "message":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}
		function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
		function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
		(a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
		var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
		a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
		Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
		119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
		var Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
		a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
		deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&"CompositionEvent"in window,be=null;ia&&"documentMode"in document&&(be=document.documentMode);var ce=ia&&"TextEvent"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;
		function ge(a,b){switch(a){case "keyup":return -1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return !0;default:return !1}}function he(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}
		function ke(a,b){if(ie)return "compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}
		var le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}));}var pe=null,qe=null;function re(a){se(a,0);}function te(a){var b=ue(a);if(Wa(b))return a}
		function ve(a,b){if("change"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput;}xe=ye;}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode);}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null);}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b);}}
		function Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae();}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge;
		function Ie(a,b){if(He(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return !1}return !0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
		function Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Je(c);}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
		function Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=Xa(a.document);}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
		function Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,
		d);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)));}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top;}}
		var Pe=ia&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;
		function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)));}
		function Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Xe={},Ye={};
		ia&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze("animationend"),af=Ze("animationiteration"),bf=Ze("animationstart"),cf=Ze("transitionend"),df=new Map,ef="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
		function ff(a,b){df.set(a,b);fa(b,[a]);}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,"on"+kf);}ff($e,"onAnimationEnd");ff(af,"onAnimationIteration");ff(bf,"onAnimationStart");ff("dblclick","onDoubleClick");ff("focusin","onFocus");ff("focusout","onBlur");ff(cf,"onTransitionEnd");ha("onMouseEnter",["mouseout","mouseover"]);ha("onMouseLeave",["mouseout","mouseover"]);ha("onPointerEnter",["pointerout","pointerover"]);
		ha("onPointerLeave",["pointerout","pointerover"]);fa("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));fa("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));fa("onBeforeInput",["compositionend","keypress","textInput","paste"]);fa("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));fa("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));
		fa("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lf="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),mf=new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
		function nf(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null;}
		function se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}
		function D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+"__bubble";c.has(d)||(pf(b,a,2,!1),c.add(d));}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b);}var rf="_reactListening"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){"selectionchange"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a));});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf("selectionchange",!1,b));}}
		function pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd;}c=e.bind(null,b,c,a);e=void 0;!Lb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1);}
		function hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return;}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode;}}d=d.return;}Jb(function(){var d=f,e=xb(c),g=[];
		a:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":n="focus";k=Fd;break;case "focusout":n="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
		Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td;}var t=0!==(b&4),J=!t&&"scroll"===a,x=t?null!==h?h+"Capture":null:h;t=[];for(var w=d,u;null!==
		w;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return;}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}));}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==
		n&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null;}else k=null,n=d;if(k!==n){t=Bd;F="onMouseLeave";x="onMouseEnter";w="mouse";if("pointerout"===a||"pointerover"===a)t=Td,F="onPointerLeave",x="onPointerEnter",w="pointer";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+"leave",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+"enter",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=
		vf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x);}t=null;}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0);}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else {na=De;var xa=Ce;}else (k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);"focusout"===a&&(xa=h._wrapperState)&&
		xa.controlled&&"number"===h.type&&cb(h,"number",h.value);}xa=d?ue(d):window;switch(a){case "focusin":if(me(xa)||"true"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e);}var $a;if(ae)b:{switch(a){case "compositionstart":var ba="onCompositionStart";break b;case "compositionend":ba="onCompositionEnd";
		break b;case "compositionupdate":ba="onCompositionUpdate";break b}ba=void 0;}else ie?ge(a,c)&&(ba="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(ba="onCompositionStart");ba&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==ba?"onCompositionEnd"===ba&&ie&&($a=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),
		0<d.length&&(e=new Ld("onBeforeInput","beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=$a);}se(g,b);});}function tf(a,b,c){return {instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return;}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
		function wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return;}0!==g.length&&a.push({event:b,listeners:g});}var xf=/\r\n?/g,yf=/\u0000|\uFFFD/g;function zf(a){return ("string"===typeof a?a:""+a).replace(xf,"\n").replace(yf,"")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}
		var Cf=null,Df=null;function Ef(a,b){return "textarea"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}
		var Ff="function"===typeof setTimeout?setTimeout:void 0,Gf="function"===typeof clearTimeout?clearTimeout:void 0,Hf="function"===typeof Promise?Promise:void 0,Jf="function"===typeof queueMicrotask?queueMicrotask:"undefined"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;});}
		function Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,"/$"===c){if(0===d){a.removeChild(e);bd(b);return}d--;}else "$"!==c&&"$?"!==c&&"$!"!==c||d++;c=e;}while(c);bd(b);}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if("$"===b||"$!"===b||"$?"===b)break;if("/$"===b)return null}}return a}
		function Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var Nf=Math.random().toString(36).slice(2),Of="__reactFiber$"+Nf,Pf="__reactProps$"+Nf,uf="__reactContainer$"+Nf,of="__reactEvents$"+Nf,Qf="__reactListeners$"+Nf,Rf="__reactHandles$"+Nf;
		function Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a);}return b}a=c;c=a.parentNode;}return null}function Cb(a){a=a[Of]||a[uf];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return {current:a}}
		function E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--);}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b;}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}
		function Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H);}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c);}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||"Unknown",e));return A({},c,d)}
		function cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return !0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c);}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a);}function ig(a){fg=!0;hg(a);}
		function jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1;}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1;}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg="";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b;}
		function ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a;}else rg=1<<f|c<<e|d,sg=a;}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0));}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null;}var xg=null,yg=null,I=!1,zg=null;
		function Ag(a,b){var c=Bg(5,null,null,0);c.elementType="DELETED";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c);}
		function Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=
		null,!0):!1;default:return !1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a);}}else {if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a;}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a;}
		function Gg(a){if(a!==xg)return !1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b="head"!==b&&"body"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling);}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--;}else "$"!==c&&"$!"!==c&&"$?"!==c||b++;}a=a.nextSibling;}yg=
		null;}}else yg=xg?Lf(a.stateNode.nextSibling):null;return !0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling);}function Ig(){yg=xg=null;I=!1;}function Jg(a){null===zg?zg=[a]:zg.push(a);}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null;}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b;}
		function Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return;}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null);}
		function Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a};}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a);}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}
		function Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null};}
		function bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function ch(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}
		function dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
		function fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
		b;c.lastBaseUpdate=b;}
		function gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k));}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,
		next:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if("function"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r="function"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0;}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h));}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;
		h=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null;}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q;}}
		function ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(p(191,e));e.call(d);}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
		var nh={isMounted:function(a){return (a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e));},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e));},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=
		lh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d));}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}
		function ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;"object"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
		function qh(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null);}
		function rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,
		"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4194308);}
		function sh(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode;}if(!d)throw Error(p(147,a));var e=d,f=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a;};b._stringRef=f;return b}if("string"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}
		function th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,"[object Object]"===a?"object with keys {"+Object.keys(b).join(", ")+"}":a));}function uh(a){var b=a._init;return b(a._payload)}
		function vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c);}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&
		null===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||"object"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||
		b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if("string"===typeof b&&""!==b||"number"===typeof b)return b=xh(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),
		c.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b);}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c&&""!==c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,
		b,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c);}return null}function y(a,b,c,d,e){if("string"===typeof d&&""!==d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d);}return null}
		function n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x;}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===
		x.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if("function"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x;}if(n.done)return c(e,
		m),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){"object"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if("object"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=
		f.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||"object"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling;}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h);}return g(a);case wa:a:{for(l=f.key;null!==
		d;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=zh(f,a.mode,h);d.return=a;a=d;}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f);}return "string"===typeof f&&""!==f||"number"===typeof f?(f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):
		(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a);}E(Eh);G(Eh,b);}function Jh(){E(Eh);E(Fh);E(Gh);}
		function Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c));}function Lh(a){Fh.current===a&&(E(Eh),E(Fh));}var M=Uf(0);
		function Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var Nh=[];
		function Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0;}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return !1;return !0}
		function Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e);}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}
		function ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null;}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else {if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a;}return P}
		function ei(a,b){return "function"===typeof b?b(a):b}
		function fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else {var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,
		eagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m;}l=l.next;}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d;}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return [b.memoizedState,c.dispatch]}
		function gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}function hi(){}
		function ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e);}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a));}
		function mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a);}function ki(a,b,c){return c(function(){oi(b)&&pi(a);})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return !He(a,c)}catch(d){return !0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1);}
		function qi(a){var b=ci();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return [b.memoizedState,a]}
		function li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d);}
		function ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d);}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}
		function yi(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
		function Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b();}finally{C=c,Qh.transition=d;}}function Fi(){return di().memoizedState}
		function Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d);}}
		function ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else {var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d));}}
		function Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
		var ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,
		4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return [d.memoizedState,a]},useRef:function(a){var b=
		ci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return [b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c();}else {c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c);}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,
		f,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=":"+b+"R"+c;c=Uh++;0<c&&(b+="H"+c.toString(32));b+=":";}else c=Vh++,b=":"+b+"r"+c.toString(32)+":";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},
		useDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return [a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===
		O?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return [a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c="",d=b;do c+=Pa(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return {value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}
		function Mi(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Ni="function"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b);};return c}
		function Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b);};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);"function"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}
		function Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e);}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a));}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return;}while(null!==a);return null}
		function Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d);}
		function Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}
		function aj(a,b,c,d,e){if(null===a){var f=c.type;if("function"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}
		function cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}
		function ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else {if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d;}else null!==
		f?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152;}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}
		function ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b);}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||
		(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?("function"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.flags|=4194308)):
		("function"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1);}else {g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m="function"===typeof y||"function"===typeof g.getSnapshotBeforeUpdate)||
		"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?("function"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),"function"===typeof g.UNSAFE_componentWillUpdate&&
		g.UNSAFE_componentWillUpdate(d,n,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===
		a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1);}return kj(a,b,c,d,f,e)}
		function kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo);}
		function mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return {baseLanes:a,cachePool:null,transitions:null}}
		function pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:"$!"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:"hidden",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=
		g):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:"hidden",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=
		b;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:"visible",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}
		function rj(a,b){b=qj({mode:"visible",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}
		function sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:"visible",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if("$!"===e.data){d=e.nextSibling&&e.nextSibling.dataset;
		if(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0;}e=0!==(e&(d.suspendedLanes|g))?0:e;
		0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1));}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if("$?"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c);}
		function xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e);}
		function yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else {if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}G(M,d);if(0===(b.mode&1))b.memoizedState=
		null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}xj(b,!0,c,null,f);break;case "together":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null;}return b.child}
		function jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}
		function zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&
		b.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;
		Aj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Bj=function(){};
		Cj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "select":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=Bf);}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&
		(c||(c={}),c[g]="");}else "dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g]);}else c||(f||(f=[]),f.push(l,
		c)),c=k;else "dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ea.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&D("scroll",a),f||h===k||(f=[])):(f=f||[]).push(l,k));}c&&(f=f||[]).push("style",c);var l=f;if(b.updateQueue=l)b.flags|=4;}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4);};
		function Ej(a,b){if(!I)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
		function S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}
		function Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);
		c=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else {if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case "dialog":D("cancel",d);D("close",d);break;case "iframe":case "object":case "embed":D("load",d);break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],d);break;case "source":D("error",d);break;case "img":case "image":case "link":D("error",
		d);D("load",d);break;case "details":D("toggle",d);break;case "input":Za(d,f);D("invalid",d);break;case "select":d._wrapperState={wasMultiple:!!f.multiple};D("invalid",d);break;case "textarea":hb(d,f),D("invalid",d);}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,
		h,a),e=["children",""+h]):ea.hasOwnProperty(g)&&null!=h&&"onScroll"===g&&D("scroll",d);}switch(c){case "input":Va(d);db(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=Bf);}d=e;b.updateQueue=d;null!==d&&(b.flags|=4);}else {g=9===e.nodeType?e:e.ownerDocument;"http://www.w3.org/1999/xhtml"===a&&(a=kb(c));"http://www.w3.org/1999/xhtml"===a?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):
		"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case "dialog":D("cancel",a);D("close",a);e=d;break;case "iframe":case "object":case "embed":D("load",a);e=d;break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case "source":D("error",a);e=d;break;case "img":case "image":case "link":D("error",
		a);D("load",a);e=d;break;case "details":D("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);D("invalid",a);break;case "option":e=d;break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D("invalid",a);break;case "textarea":hb(a,d);e=gb(a,d);D("invalid",a);break;default:e=d;}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?sb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):"children"===f?"string"===typeof k?("textarea"!==
		c||""!==k)&&ob(a,k):"number"===typeof k&&ob(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ea.hasOwnProperty(f)?null!=k&&"onScroll"===f&&D("scroll",a):null!=k&&ta(a,f,k,g));}switch(c){case "input":Va(a);db(a,d,!1);break;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,
		!0);break;default:"function"===typeof e.onClick&&(a.onclick=Bf);}switch(c){case "button":case "input":case "select":case "textarea":d=!!d.autoFocus;break a;case "img":d=!0;break a;default:d=!1;}}d&&(b.flags|=4);}null!==b.ref&&(b.flags|=512,b.flags|=2097152);}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=
		xg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1));}f&&(b.flags|=4);}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d;}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===
		a){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b;}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1;}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),
		Bj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else {if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,
		g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=
		a.sibling;}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);}else {if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&"hidden"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g);}if(null!==f.tail)return b=f.tail,f.rendering=
		b,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}
		function Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig();}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),
		null;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj="function"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if("function"===typeof c)try{c(null);}catch(d){W(a,b,d);}else c.current=null;}function Nj(a,b,c){try{c();}catch(d){W(a,b,d);}}var Oj=!1;
		function Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if("selectionStart"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType;}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=
		q.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y;}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode;}q=y;}c=-1===h||-1===k?null:{start:h,end:k};}else c=null;}c=c||{start:0,end:0};}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;
		case 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w;}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent="":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F);}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return;}n=Oj;Oj=!1;return n}
		function Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f);}e=e.next;}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d();}c=c.next;}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c;}"function"===typeof b?b(a):b.current=a;}}
		function Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null;}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}
		function Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return;}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child;}if(!(a.flags&2))return a.stateNode}}
		function Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling;}
		function Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling;}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling;}
		function ak(a,b,c){if(lc&&"function"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c);}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;
		Zj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next;}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,"function"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount();}catch(h){W(c,b,h);}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==
		c.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c);}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
		function dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return;}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null;}catch(l){W(e,b,l);}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling;}
		function ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a);}catch(t){W(a,a.return,t);}try{Qj(5,a,a.return);}catch(t){W(a,a.return,t);}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,"");}catch(t){W(a,a.return,t);}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;
		a.updateQueue=null;if(null!==k)try{"input"===h&&"radio"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];"style"===m?sb(e,q):"dangerouslySetInnerHTML"===m?nb(e,q):"children"===m?ob(e,q):ta(e,m,q,l);}switch(h){case "input":bb(e,f);break;case "textarea":ib(e,f);break;case "select":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,
		f.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:"",!1));}e[Pf]=f;}catch(t){W(a,a.return,t);}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f;}catch(t){W(a,a.return,t);}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo);}catch(t){W(a,a.return,t);}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||
		null!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if("function"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=
		b.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount();}catch(t){W(d,c,t);}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q);}m=m.sibling;}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty("display")?k.display:null,h.style.display=
		rb("display",g));}catch(t){W(a,a.return,t);}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?"":q.memoizedProps;}catch(t){W(a,a.return,t);}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return;}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling;}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,
		a),fk(a);}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return;}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,""),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k);}a.flags&=-3;}b&4096&&(a.flags&=-4097);}function ik(a,b,c){V=a;jk(a);}
		function jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f),f=f.sibling;V=e;Kj=h;U=l;}lk(a);}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a);}}
		function lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else {var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate);}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=
		b.child.stateNode;break;case 1:c=b.child.stateNode;}ih(b,g,c);}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case "button":case "input":case "select":case "textarea":k.autoFocus&&c.focus();break;case "img":k.src&&(c.src=k.src);}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q);}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;
		default:throw Error(p(163));}U||b.flags&512&&Sj(b);}catch(r){W(b,b.return,r);}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}
		function kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b);}catch(k){W(b,c,k);}break;case 1:var d=b.stateNode;if("function"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount();}catch(k){W(b,e,k);}}var f=b.return;try{Sj(b);}catch(k){W(b,f,k);}break;case 5:var g=b.return;try{Sj(b);}catch(k){W(b,g,k);}}}catch(k){W(b,b.return,k);}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return;}}
		var mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}
		function lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg());}
		function Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg();}),c=null;else {switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc;}c=Gk(c,Hk.bind(null,a));}a.callbackPriority=b;a.callbackNode=c;}}
		function Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else {b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h);}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T);}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);
		else {e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===
		d)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f;}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}
		function Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a);}
		function Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return !1}catch(g){return !1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else {if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return !0;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return !0}
		function Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d;}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d));}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}
		function Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg());}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg();}}function Ij(){gj=fj.current;E(fj);}
		function Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij();}c=c.return;}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=
		0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g;}c.pending=d;}Wg=null;}return a}
		function Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}Sh=!1;}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,
		m.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null);}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t;}else n.add(k);break a}else {if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426));}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;
		b&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&("function"===typeof w.getDerivedStateFromError||null!==u&&"function"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return;}while(null!==f)}Tk(c);}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}
		function uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z);}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e);}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y);}function Mk(){for(;null!==Y&&!cc();)Vk(Y);}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null;}
		function Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else {c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else {T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a;}while(null!==b);0===T&&(T=5);}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d);}finally{pk.transition=e,C=d;}return null}
		function Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;
		var g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c);dc();K=h;C=g;pk.transition=f;}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}
		function Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else {a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f);}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===
		l){V=null;break}if(null!==r){r.return=y;V=r;break}V=y;}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J;}while(null!==t)}}V=f;}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return);}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return;}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==
		u)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h);}}catch(na){W(h,h.return,na);}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return;}}K=e;jg();if(lc&&"function"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a);}catch(na){}d=!0;}return d}finally{C=c,pk.transition=b;}}return !1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b));}
		function W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if("function"===typeof b.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return;}}
		function Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b);}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c));}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c);}
		function ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c);}var Wk;
		Wk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else {if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1;}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;"object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=
		null,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,
		d,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=
		f,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else {Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c);}b=b.child;}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),
		hj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;
		g=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k;}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,
		c,b);h.lanes|=c;break}k=k.next;}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling;}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return;}f=g;}Yi(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),
		b.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}
		function al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null;}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return !(!a||!a.isReactComponent)}
		function $k(a){if("function"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}
		function wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
		c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
		function yh(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bj(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;
		break a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,""));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}
		function zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
		function bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=
		null;}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:wa,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
		function el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return;}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}
		function fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}
		function hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b);}function kl(){return null}var ll="function"===typeof reportError?reportError:function(a){console.error(a);};function ml(a){this._internalRoot=a;}
		nl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null);};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null);});b[uf]=null;}};function nl(a){this._internalRoot=a;}
		nl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a);}};function ol(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function ql(){}
		function rl(a,b,c,d,e){if(e){if("function"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a);};}var g=fl(b,d,a,0,null,!1,!1,"",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if("function"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a);};}var k=cl(a,0,!1,null,null,!1,!1,"",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d);});return k}
		function sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if("function"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a);};}gl(b,g,a,e);}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()));}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c);}}),jl(a,1);}};
		Fc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c);}jl(a,134217728);}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d);}jl(a,b);}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c;}};
		yb=function(a,b,c){switch(b){case "input":bb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e);}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1);}};Gb=Rk;Hb=Sk;
		var tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"};
		var vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||
		kl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl;}catch(a){}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;
		reactDom_production_min.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};reactDom_production_min.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d="",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};
		reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(",");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};reactDom_production_min.flushSync=function(a){return Sk(a)};reactDom_production_min.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};
		reactDom_production_min.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f="",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,
		e);return new nl(b)};reactDom_production_min.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};reactDom_production_min.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Rk;
		reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};reactDom_production_min.version="18.2.0-next-9e3b772b8-20220608";
		return reactDom_production_min;
	}

	(function (module) {

		function checkDCE() {
		  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		  if (
		    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
		    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
		  ) {
		    return;
		  }
		  try {
		    // Verify that the code above has been dead code eliminated (DCE'd).
		    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
		  } catch (err) {
		    // DevTools shouldn't crash React, no matter what.
		    // We should still report in case we break this code.
		    console.error(err);
		  }
		}

		{
		  // DCE check should happen before ReactDOM bundle executes so that
		  // DevTools can report bad minification during injection.
		  checkDCE();
		  module.exports = requireReactDom_production_min();
		}
	} (reactDom));

	var ReactDOM = /*@__PURE__*/getDefaultExportFromCjs(reactDom.exports);

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}
	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  Object.defineProperty(subClass, "prototype", {
	    writable: false
	  });
	  if (superClass) _setPrototypeOf$1(subClass, superClass);
	}
	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}
	function _setPrototypeOf$1(o, p) {
	  _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf$1(o, p);
	}
	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;
	  try {
	    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	function _assertThisInitialized$1(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}
	function _possibleConstructorReturn(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  } else if (call !== void 0) {
	    throw new TypeError("Derived constructors may only return object or undefined");
	  }
	  return _assertThisInitialized$1(self);
	}
	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct();
	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	      result;
	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;
	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }
	    return _possibleConstructorReturn(this, result);
	  };
	}

	/*#__PURE__*/(function (_React$Component) {
	  _inherits(HelloWorld, _React$Component);
	  var _super = _createSuper(HelloWorld);
	  function HelloWorld() {
	    _classCallCheck(this, HelloWorld);
	    return _super.apply(this, arguments);
	  }
	  _createClass(HelloWorld, [{
	    key: "render",
	    value: function render() {
	      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h1", null, "Hello World!"));
	    }
	  }]);
	  return HelloWorld;
	})(React.Component);

	const GridApiContext = /*#__PURE__*/react.exports.createContext(undefined);

	function useGridApiContext() {
	  const apiRef = react.exports.useContext(GridApiContext);

	  if (apiRef === undefined) {
	    throw new Error(['MUI: Could not find the data grid context.', 'It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.', 'This can also happen if you are bundling multiple versions of the data grid.'].join('\n'));
	  }

	  return apiRef;
	}

	const GridRootPropsContext = /*#__PURE__*/react.exports.createContext(undefined);

	const useGridRootProps = () => {
	  const contextValue = react.exports.useContext(GridRootPropsContext);

	  if (!contextValue) {
	    throw new Error('MUI: useGridRootProps should only be used inside the DataGrid, DataGridPro or DataGridPremium component.');
	  }

	  return contextValue;
	};

	var propTypes = {exports: {}};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret_1;
	var hasRequiredReactPropTypesSecret;

	function requireReactPropTypesSecret () {
		if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
		hasRequiredReactPropTypesSecret = 1;

		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

		ReactPropTypesSecret_1 = ReactPropTypesSecret;
		return ReactPropTypesSecret_1;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithThrowingShims;
	var hasRequiredFactoryWithThrowingShims;

	function requireFactoryWithThrowingShims () {
		if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
		hasRequiredFactoryWithThrowingShims = 1;

		var ReactPropTypesSecret = requireReactPropTypesSecret();

		function emptyFunction() {}
		function emptyFunctionWithReset() {}
		emptyFunctionWithReset.resetWarningCache = emptyFunction;

		factoryWithThrowingShims = function() {
		  function shim(props, propName, componentName, location, propFullName, secret) {
		    if (secret === ReactPropTypesSecret) {
		      // It is still safe when called from React.
		      return;
		    }
		    var err = new Error(
		      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		      'Use PropTypes.checkPropTypes() to call them. ' +
		      'Read more at http://fb.me/use-check-prop-types'
		    );
		    err.name = 'Invariant Violation';
		    throw err;
		  }	  shim.isRequired = shim;
		  function getShim() {
		    return shim;
		  }	  // Important!
		  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
		  var ReactPropTypes = {
		    array: shim,
		    bigint: shim,
		    bool: shim,
		    func: shim,
		    number: shim,
		    object: shim,
		    string: shim,
		    symbol: shim,

		    any: shim,
		    arrayOf: getShim,
		    element: shim,
		    elementType: shim,
		    instanceOf: getShim,
		    node: shim,
		    objectOf: getShim,
		    oneOf: getShim,
		    oneOfType: getShim,
		    shape: getShim,
		    exact: getShim,

		    checkPropTypes: emptyFunctionWithReset,
		    resetWarningCache: emptyFunction
		  };

		  ReactPropTypes.PropTypes = ReactPropTypes;

		  return ReactPropTypes;
		};
		return factoryWithThrowingShims;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes.exports = requireFactoryWithThrowingShims()();
	}

	function chainPropTypes(propType1, propType2) {
	  {
	    return () => null;
	  }
	}

	function _extends() {
	  _extends = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends.apply(this, arguments);
	}

	function isPlainObject(item) {
	  return item !== null && typeof item === 'object' && item.constructor === Object;
	}
	function deepmerge(target, source, options = {
	  clone: true
	}) {
	  const output = options.clone ? _extends({}, target) : target;
	  if (isPlainObject(target) && isPlainObject(source)) {
	    Object.keys(source).forEach(key => {
	      // Avoid prototype pollution
	      if (key === '__proto__') {
	        return;
	      }
	      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
	        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
	        output[key] = deepmerge(target[key], source[key], options);
	      } else {
	        output[key] = source[key];
	      }
	    });
	  }
	  return output;
	}

	/**
	 * WARNING: Don't import this directly.
	 * Use `MuiError` from `@mui/utils/macros/MuiError.macro` instead.
	 * @param {number} code
	 */
	function formatMuiErrorMessage(code) {
	  // Apply babel-plugin-transform-template-literals in loose mode
	  // loose mode is safe iff we're concatenating primitives
	  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
	  /* eslint-disable prefer-template */
	  let url = 'https://mui.com/production-error/?code=' + code;
	  for (let i = 1; i < arguments.length; i += 1) {
	    // rest params over-transpile for this case
	    // eslint-disable-next-line prefer-rest-params
	    url += '&args[]=' + encodeURIComponent(arguments[i]);
	  }
	  return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
	  /* eslint-enable prefer-template */
	}

	var reactIs$2 = {exports: {}};

	var reactIs_production_min$1 = {};

	/**
	 * @license React
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min$1;

	function requireReactIs_production_min$1 () {
		if (hasRequiredReactIs_production_min$1) return reactIs_production_min$1;
		hasRequiredReactIs_production_min$1 = 1;
	var b=Symbol.for("react.element"),c=Symbol.for("react.portal"),d=Symbol.for("react.fragment"),e=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),g=Symbol.for("react.provider"),h=Symbol.for("react.context"),k=Symbol.for("react.server_context"),l=Symbol.for("react.forward_ref"),m=Symbol.for("react.suspense"),n=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),q=Symbol.for("react.lazy"),t=Symbol.for("react.offscreen"),u;u=Symbol.for("react.module.reference");
		function v(a){if("object"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}reactIs_production_min$1.ContextConsumer=h;reactIs_production_min$1.ContextProvider=g;reactIs_production_min$1.Element=b;reactIs_production_min$1.ForwardRef=l;reactIs_production_min$1.Fragment=d;reactIs_production_min$1.Lazy=q;reactIs_production_min$1.Memo=p;reactIs_production_min$1.Portal=c;reactIs_production_min$1.Profiler=f;reactIs_production_min$1.StrictMode=e;reactIs_production_min$1.Suspense=m;
		reactIs_production_min$1.SuspenseList=n;reactIs_production_min$1.isAsyncMode=function(){return !1};reactIs_production_min$1.isConcurrentMode=function(){return !1};reactIs_production_min$1.isContextConsumer=function(a){return v(a)===h};reactIs_production_min$1.isContextProvider=function(a){return v(a)===g};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b};reactIs_production_min$1.isForwardRef=function(a){return v(a)===l};reactIs_production_min$1.isFragment=function(a){return v(a)===d};reactIs_production_min$1.isLazy=function(a){return v(a)===q};reactIs_production_min$1.isMemo=function(a){return v(a)===p};
		reactIs_production_min$1.isPortal=function(a){return v(a)===c};reactIs_production_min$1.isProfiler=function(a){return v(a)===f};reactIs_production_min$1.isStrictMode=function(a){return v(a)===e};reactIs_production_min$1.isSuspense=function(a){return v(a)===m};reactIs_production_min$1.isSuspenseList=function(a){return v(a)===n};
		reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||"object"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};reactIs_production_min$1.typeOf=v;
		return reactIs_production_min$1;
	}

	(function (module) {

		{
		  module.exports = requireReactIs_production_min$1();
		}
	} (reactIs$2));

	// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
	//
	// A strict capitalization should uppercase the first letter of each word in the sentence.
	// We only handle the first word.
	function capitalize(string) {
	  if (typeof string !== 'string') {
	    throw new Error(formatMuiErrorMessage(7));
	  }
	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	/**
	 * Safe chained function.
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 */
	function createChainedFunction(...funcs) {
	  return funcs.reduce((acc, func) => {
	    if (func == null) {
	      return acc;
	    }
	    return function chainedFunction(...args) {
	      acc.apply(this, args);
	      func.apply(this, args);
	    };
	  }, () => {});
	}

	// Corresponds to 10 frames at 60 Hz.
	// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
	function debounce$1(func, wait = 166) {
	  let timeout;
	  function debounced(...args) {
	    const later = () => {
	      func.apply(this, args);
	    };
	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	  }
	  debounced.clear = () => {
	    clearTimeout(timeout);
	  };
	  return debounced;
	}

	function isMuiElement(element, muiNames) {
	  return /*#__PURE__*/react.exports.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
	}

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	function ownerWindow(node) {
	  const doc = ownerDocument(node);
	  return doc.defaultView || window;
	}

	/**
	 * TODO v5: consider making it private
	 *
	 * passes {value} to {ref}
	 *
	 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
	 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
	 * https://github.com/mui/material-ui/issues/13539
	 *
	 * Useful if you want to expose the ref of an inner component to the public API
	 * while still using it inside the component.
	 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
	 */
	function setRef(ref, value) {
	  if (typeof ref === 'function') {
	    ref(value);
	  } else if (ref) {
	    ref.current = value;
	  }
	}

	const useEnhancedEffect = typeof window !== 'undefined' ? react.exports.useLayoutEffect : react.exports.useEffect;
	var useEnhancedEffect$1 = useEnhancedEffect;

	let globalId$1 = 0;
	function useGlobalId(idOverride) {
	  const [defaultId, setDefaultId] = react.exports.useState(idOverride);
	  const id = idOverride || defaultId;
	  react.exports.useEffect(() => {
	    if (defaultId == null) {
	      // Fallback to this default id when possible.
	      // Use the incrementing value for client-side rendering only.
	      // We can't use it server-side.
	      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
	      globalId$1 += 1;
	      setDefaultId(`mui-${globalId$1}`);
	    }
	  }, [defaultId]);
	  return id;
	}

	// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814
	const maybeReactUseId = React$1['useId' + ''];
	/**
	 *
	 * @example <div id={useId()} />
	 * @param idOverride
	 * @returns {string}
	 */
	function useId(idOverride) {
	  if (maybeReactUseId !== undefined) {
	    const reactId = maybeReactUseId();
	    return idOverride != null ? idOverride : reactId;
	  }
	  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
	  return useGlobalId(idOverride);
	}

	/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
	function useControlled({
	  controlled,
	  default: defaultProp,
	  name,
	  state = 'value'
	}) {
	  // isControlled is ignored in the hook dependency lists as it should never change.
	  const {
	    current: isControlled
	  } = react.exports.useRef(controlled !== undefined);
	  const [valueState, setValue] = react.exports.useState(defaultProp);
	  const value = isControlled ? controlled : valueState;
	  const setValueIfUncontrolled = react.exports.useCallback(newValue => {
	    if (!isControlled) {
	      setValue(newValue);
	    }
	  }, []);
	  return [value, setValueIfUncontrolled];
	}

	/**
	 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
	 */
	function useEventCallback(fn) {
	  const ref = react.exports.useRef(fn);
	  useEnhancedEffect$1(() => {
	    ref.current = fn;
	  });
	  return react.exports.useCallback((...args) =>
	  // @ts-expect-error hide `this`
	  // tslint:disable-next-line:ban-comma-operator
	  (0, ref.current)(...args), []);
	}

	function useForkRef(...refs) {
	  /**
	   * This will create a new function if the refs passed to this hook change and are all defined.
	   * This means react will call the old forkRef with `null` and the new forkRef
	   * with the ref. Cleanup naturally emerges from this behavior.
	   */
	  return react.exports.useMemo(() => {
	    if (refs.every(ref => ref == null)) {
	      return null;
	    }
	    return instance => {
	      refs.forEach(ref => {
	        setRef(ref, instance);
	      });
	    };
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, refs);
	}

	// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
	let hadKeyboardEvent = true;
	let hadFocusVisibleRecently = false;
	let hadFocusVisibleRecentlyTimeout;
	const inputTypesWhitelist = {
	  text: true,
	  search: true,
	  url: true,
	  tel: true,
	  email: true,
	  password: true,
	  number: true,
	  date: true,
	  month: true,
	  week: true,
	  time: true,
	  datetime: true,
	  'datetime-local': true
	};

	/**
	 * Computes whether the given element should automatically trigger the
	 * `focus-visible` class being added, i.e. whether it should always match
	 * `:focus-visible` when focused.
	 * @param {Element} node
	 * @returns {boolean}
	 */
	function focusTriggersKeyboardModality(node) {
	  const {
	    type,
	    tagName
	  } = node;
	  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
	    return true;
	  }
	  if (tagName === 'TEXTAREA' && !node.readOnly) {
	    return true;
	  }
	  if (node.isContentEditable) {
	    return true;
	  }
	  return false;
	}

	/**
	 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
	 * If the most recent user interaction was via the keyboard;
	 * and the key press did not include a meta, alt/option, or control key;
	 * then the modality is keyboard. Otherwise, the modality is not keyboard.
	 * @param {KeyboardEvent} event
	 */
	function handleKeyDown(event) {
	  if (event.metaKey || event.altKey || event.ctrlKey) {
	    return;
	  }
	  hadKeyboardEvent = true;
	}

	/**
	 * If at any point a user clicks with a pointing device, ensure that we change
	 * the modality away from keyboard.
	 * This avoids the situation where a user presses a key on an already focused
	 * element, and then clicks on a different element, focusing it with a
	 * pointing device, while we still think we're in keyboard modality.
	 */
	function handlePointerDown() {
	  hadKeyboardEvent = false;
	}
	function handleVisibilityChange() {
	  if (this.visibilityState === 'hidden') {
	    // If the tab becomes active again, the browser will handle calling focus
	    // on the element (Safari actually calls it twice).
	    // If this tab change caused a blur on an element with focus-visible,
	    // re-apply the class when the user switches back to the tab.
	    if (hadFocusVisibleRecently) {
	      hadKeyboardEvent = true;
	    }
	  }
	}
	function prepare(doc) {
	  doc.addEventListener('keydown', handleKeyDown, true);
	  doc.addEventListener('mousedown', handlePointerDown, true);
	  doc.addEventListener('pointerdown', handlePointerDown, true);
	  doc.addEventListener('touchstart', handlePointerDown, true);
	  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
	}
	function isFocusVisible(event) {
	  const {
	    target
	  } = event;
	  try {
	    return target.matches(':focus-visible');
	  } catch (error) {
	    // Browsers not implementing :focus-visible will throw a SyntaxError.
	    // We use our own heuristic for those browsers.
	    // Rethrow might be better if it's not the expected error but do we really
	    // want to crash if focus-visible malfunctioned?
	  }

	  // No need for validFocusTarget check. The user does that by attaching it to
	  // focusable events only.
	  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
	}
	function useIsFocusVisible() {
	  const ref = react.exports.useCallback(node => {
	    if (node != null) {
	      prepare(node.ownerDocument);
	    }
	  }, []);
	  const isFocusVisibleRef = react.exports.useRef(false);

	  /**
	   * Should be called if a blur event is fired
	   */
	  function handleBlurVisible() {
	    // checking against potential state variable does not suffice if we focus and blur synchronously.
	    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
	    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
	    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
	    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
	    if (isFocusVisibleRef.current) {
	      // To detect a tab/window switch, we look for a blur event followed
	      // rapidly by a visibility change.
	      // If we don't see a visibility change within 100ms, it's probably a
	      // regular focus change.
	      hadFocusVisibleRecently = true;
	      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
	      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
	        hadFocusVisibleRecently = false;
	      }, 100);
	      isFocusVisibleRef.current = false;
	      return true;
	    }
	    return false;
	  }

	  /**
	   * Should be called if a blur event is fired
	   */
	  function handleFocusVisible(event) {
	    if (isFocusVisible(event)) {
	      isFocusVisibleRef.current = true;
	      return true;
	    }
	    return false;
	  }
	  return {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref
	  };
	}

	// A change of the browser zoom change the scrollbar size.
	// Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
	function getScrollbarSize(doc) {
	  // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
	  const documentWidth = doc.documentElement.clientWidth;
	  return Math.abs(window.innerWidth - documentWidth);
	}

	const usePreviousProps = value => {
	  const ref = react.exports.useRef({});
	  react.exports.useEffect(() => {
	    ref.current = value;
	  });
	  return ref.current;
	};
	var usePreviousProps$1 = usePreviousProps;

	/**
	 * Add keys, values of `defaultProps` that does not exist in `props`
	 * @param {object} defaultProps
	 * @param {object} props
	 * @returns {object} resolved props
	 */
	function resolveProps(defaultProps, props) {
	  const output = _extends({}, props);
	  Object.keys(defaultProps).forEach(propName => {
	    if (output[propName] === undefined) {
	      output[propName] = defaultProps[propName];
	    }
	  });
	  return output;
	}

	function composeClasses(slots, getUtilityClass, classes) {
	  const output = {};
	  Object.keys(slots).forEach(
	  // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
	  // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
	  slot => {
	    output[slot] = slots[slot].reduce((acc, key) => {
	      if (key) {
	        acc.push(getUtilityClass(key));
	        if (classes && classes[key]) {
	          acc.push(classes[key]);
	        }
	      }
	      return acc;
	    }, []).join(' ');
	  });
	  return output;
	}

	const defaultGenerator = componentName => componentName;
	const createClassNameGenerator = () => {
	  let generate = defaultGenerator;
	  return {
	    configure(generator) {
	      generate = generator;
	    },
	    generate(componentName) {
	      return generate(componentName);
	    },
	    reset() {
	      generate = defaultGenerator;
	    }
	  };
	};
	const ClassNameGenerator = createClassNameGenerator();
	var ClassNameGenerator$1 = ClassNameGenerator;

	const globalStateClassesMapping = {
	  active: 'active',
	  checked: 'checked',
	  completed: 'completed',
	  disabled: 'disabled',
	  error: 'error',
	  expanded: 'expanded',
	  focused: 'focused',
	  focusVisible: 'focusVisible',
	  required: 'required',
	  selected: 'selected'
	};
	function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
	  const globalStateClass = globalStateClassesMapping[slot];
	  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
	}

	function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
	  const result = {};
	  slots.forEach(slot => {
	    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
	  });
	  return result;
	}

	const common = {
	  black: '#000',
	  white: '#fff'
	};
	var common$1 = common;

	const red = {
	  50: '#ffebee',
	  100: '#ffcdd2',
	  200: '#ef9a9a',
	  300: '#e57373',
	  400: '#ef5350',
	  500: '#f44336',
	  600: '#e53935',
	  700: '#d32f2f',
	  800: '#c62828',
	  900: '#b71c1c',
	  A100: '#ff8a80',
	  A200: '#ff5252',
	  A400: '#ff1744',
	  A700: '#d50000'
	};
	var red$1 = red;

	const purple = {
	  50: '#f3e5f5',
	  100: '#e1bee7',
	  200: '#ce93d8',
	  300: '#ba68c8',
	  400: '#ab47bc',
	  500: '#9c27b0',
	  600: '#8e24aa',
	  700: '#7b1fa2',
	  800: '#6a1b9a',
	  900: '#4a148c',
	  A100: '#ea80fc',
	  A200: '#e040fb',
	  A400: '#d500f9',
	  A700: '#aa00ff'
	};
	var purple$1 = purple;

	const blue = {
	  50: '#e3f2fd',
	  100: '#bbdefb',
	  200: '#90caf9',
	  300: '#64b5f6',
	  400: '#42a5f5',
	  500: '#2196f3',
	  600: '#1e88e5',
	  700: '#1976d2',
	  800: '#1565c0',
	  900: '#0d47a1',
	  A100: '#82b1ff',
	  A200: '#448aff',
	  A400: '#2979ff',
	  A700: '#2962ff'
	};
	var blue$1 = blue;

	const lightBlue = {
	  50: '#e1f5fe',
	  100: '#b3e5fc',
	  200: '#81d4fa',
	  300: '#4fc3f7',
	  400: '#29b6f6',
	  500: '#03a9f4',
	  600: '#039be5',
	  700: '#0288d1',
	  800: '#0277bd',
	  900: '#01579b',
	  A100: '#80d8ff',
	  A200: '#40c4ff',
	  A400: '#00b0ff',
	  A700: '#0091ea'
	};
	var lightBlue$1 = lightBlue;

	const green = {
	  50: '#e8f5e9',
	  100: '#c8e6c9',
	  200: '#a5d6a7',
	  300: '#81c784',
	  400: '#66bb6a',
	  500: '#4caf50',
	  600: '#43a047',
	  700: '#388e3c',
	  800: '#2e7d32',
	  900: '#1b5e20',
	  A100: '#b9f6ca',
	  A200: '#69f0ae',
	  A400: '#00e676',
	  A700: '#00c853'
	};
	var green$1 = green;

	const orange = {
	  50: '#fff3e0',
	  100: '#ffe0b2',
	  200: '#ffcc80',
	  300: '#ffb74d',
	  400: '#ffa726',
	  500: '#ff9800',
	  600: '#fb8c00',
	  700: '#f57c00',
	  800: '#ef6c00',
	  900: '#e65100',
	  A100: '#ffd180',
	  A200: '#ffab40',
	  A400: '#ff9100',
	  A700: '#ff6d00'
	};
	var orange$1 = orange;

	const grey = {
	  50: '#fafafa',
	  100: '#f5f5f5',
	  200: '#eeeeee',
	  300: '#e0e0e0',
	  400: '#bdbdbd',
	  500: '#9e9e9e',
	  600: '#757575',
	  700: '#616161',
	  800: '#424242',
	  900: '#212121',
	  A100: '#f5f5f5',
	  A200: '#eeeeee',
	  A400: '#bdbdbd',
	  A700: '#616161'
	};
	var grey$1 = grey;

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;
	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }
	  return target;
	}

	function memoize$1(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	/*

	Based off glamor's StyleSheet, thanks Sunil ❤️

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance

	// usage

	import { StyleSheet } from '@emotion/sheet'

	let styleSheet = new StyleSheet({ key: '', container: document.head })

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox

	  /* istanbul ignore next */


	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}

	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);

	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }

	  tag.appendChild(document.createTextNode(''));
	  tag.setAttribute('data-s', '');
	  return tag;
	}

	var StyleSheet = /*#__PURE__*/function () {
	  // Using Node instead of HTMLElement since container may be a ShadowRoot
	  function StyleSheet(options) {
	    var _this = this;

	    this._insertTag = function (tag) {
	      var before;

	      if (_this.tags.length === 0) {
	        if (_this.insertionPoint) {
	          before = _this.insertionPoint.nextSibling;
	        } else if (_this.prepend) {
	          before = _this.container.firstChild;
	        } else {
	          before = _this.before;
	        }
	      } else {
	        before = _this.tags[_this.tags.length - 1].nextSibling;
	      }

	      _this.container.insertBefore(tag, before);

	      _this.tags.push(tag);
	    };

	    this.isSpeedy = options.speedy === undefined ? "production" === 'production' : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

	    this.key = options.key;
	    this.container = options.container;
	    this.prepend = options.prepend;
	    this.insertionPoint = options.insertionPoint;
	    this.before = null;
	  }

	  var _proto = StyleSheet.prototype;

	  _proto.hydrate = function hydrate(nodes) {
	    nodes.forEach(this._insertTag);
	  };

	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      this._insertTag(createStyleElement(this));
	    }

	    var tag = this.tags[this.tags.length - 1];

	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);

	      try {
	        // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }

	    this.ctr++;
	  };

	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode && tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;
	  };

	  return StyleSheet;
	}();

	var MS = '-ms-';
	var MOZ = '-moz-';
	var WEBKIT = '-webkit-';

	var COMMENT = 'comm';
	var RULESET = 'rule';
	var DECLARATION = 'decl';
	var IMPORT = '@import';
	var KEYFRAMES = '@keyframes';

	/**
	 * @param {number}
	 * @return {number}
	 */
	var abs = Math.abs;

	/**
	 * @param {number}
	 * @return {string}
	 */
	var from = String.fromCharCode;

	/**
	 * @param {object}
	 * @return {object}
	 */
	var assign = Object.assign;

	/**
	 * @param {string} value
	 * @param {number} length
	 * @return {number}
	 */
	function hash$2 (value, length) {
		return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
	}

	/**
	 * @param {string} value
	 * @return {string}
	 */
	function trim (value) {
		return value.trim()
	}

	/**
	 * @param {string} value
	 * @param {RegExp} pattern
	 * @return {string?}
	 */
	function match (value, pattern) {
		return (value = pattern.exec(value)) ? value[0] : value
	}

	/**
	 * @param {string} value
	 * @param {(string|RegExp)} pattern
	 * @param {string} replacement
	 * @return {string}
	 */
	function replace (value, pattern, replacement) {
		return value.replace(pattern, replacement)
	}

	/**
	 * @param {string} value
	 * @param {string} search
	 * @return {number}
	 */
	function indexof (value, search) {
		return value.indexOf(search)
	}

	/**
	 * @param {string} value
	 * @param {number} index
	 * @return {number}
	 */
	function charat (value, index) {
		return value.charCodeAt(index) | 0
	}

	/**
	 * @param {string} value
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function substr (value, begin, end) {
		return value.slice(begin, end)
	}

	/**
	 * @param {string} value
	 * @return {number}
	 */
	function strlen (value) {
		return value.length
	}

	/**
	 * @param {any[]} value
	 * @return {number}
	 */
	function sizeof (value) {
		return value.length
	}

	/**
	 * @param {any} value
	 * @param {any[]} array
	 * @return {any}
	 */
	function append (value, array) {
		return array.push(value), value
	}

	/**
	 * @param {string[]} array
	 * @param {function} callback
	 * @return {string}
	 */
	function combine (array, callback) {
		return array.map(callback).join('')
	}

	var line = 1;
	var column = 1;
	var length = 0;
	var position$1 = 0;
	var character = 0;
	var characters = '';

	/**
	 * @param {string} value
	 * @param {object | null} root
	 * @param {object | null} parent
	 * @param {string} type
	 * @param {string[] | string} props
	 * @param {object[] | string} children
	 * @param {number} length
	 */
	function node (value, root, parent, type, props, children, length) {
		return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
	}

	/**
	 * @param {object} root
	 * @param {object} props
	 * @return {object}
	 */
	function copy (root, props) {
		return assign(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)
	}

	/**
	 * @return {number}
	 */
	function char () {
		return character
	}

	/**
	 * @return {number}
	 */
	function prev () {
		character = position$1 > 0 ? charat(characters, --position$1) : 0;

		if (column--, character === 10)
			column = 1, line--;

		return character
	}

	/**
	 * @return {number}
	 */
	function next () {
		character = position$1 < length ? charat(characters, position$1++) : 0;

		if (column++, character === 10)
			column = 1, line++;

		return character
	}

	/**
	 * @return {number}
	 */
	function peek () {
		return charat(characters, position$1)
	}

	/**
	 * @return {number}
	 */
	function caret () {
		return position$1
	}

	/**
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function slice (begin, end) {
		return substr(characters, begin, end)
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function token (type) {
		switch (type) {
			// \0 \t \n \r \s whitespace token
			case 0: case 9: case 10: case 13: case 32:
				return 5
			// ! + , / > @ ~ isolate token
			case 33: case 43: case 44: case 47: case 62: case 64: case 126:
			// ; { } breakpoint token
			case 59: case 123: case 125:
				return 4
			// : accompanied token
			case 58:
				return 3
			// " ' ( [ opening delimit token
			case 34: case 39: case 40: case 91:
				return 2
			// ) ] closing delimit token
			case 41: case 93:
				return 1
		}

		return 0
	}

	/**
	 * @param {string} value
	 * @return {any[]}
	 */
	function alloc (value) {
		return line = column = 1, length = strlen(characters = value), position$1 = 0, []
	}

	/**
	 * @param {any} value
	 * @return {any}
	 */
	function dealloc (value) {
		return characters = '', value
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function delimit (type) {
		return trim(slice(position$1 - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function whitespace (type) {
		while (character = peek())
			if (character < 33)
				next();
			else
				break

		return token(type) > 2 || token(character) > 3 ? '' : ' '
	}

	/**
	 * @param {number} index
	 * @param {number} count
	 * @return {string}
	 */
	function escaping (index, count) {
		while (--count && next())
			// not 0-9 A-F a-f
			if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
				break

		return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function delimiter (type) {
		while (next())
			switch (character) {
				// ] ) " '
				case type:
					return position$1
				// " '
				case 34: case 39:
					if (type !== 34 && type !== 39)
						delimiter(character);
					break
				// (
				case 40:
					if (type === 41)
						delimiter(type);
					break
				// \
				case 92:
					next();
					break
			}

		return position$1
	}

	/**
	 * @param {number} type
	 * @param {number} index
	 * @return {number}
	 */
	function commenter (type, index) {
		while (next())
			// //
			if (type + character === 47 + 10)
				break
			// /*
			else if (type + character === 42 + 42 && peek() === 47)
				break

		return '/*' + slice(index, position$1 - 1) + '*' + from(type === 47 ? type : next())
	}

	/**
	 * @param {number} index
	 * @return {string}
	 */
	function identifier (index) {
		while (!token(peek()))
			next();

		return slice(index, position$1)
	}

	/**
	 * @param {string} value
	 * @return {object[]}
	 */
	function compile (value) {
		return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {string[]} rule
	 * @param {string[]} rules
	 * @param {string[]} rulesets
	 * @param {number[]} pseudo
	 * @param {number[]} points
	 * @param {string[]} declarations
	 * @return {object}
	 */
	function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
		var index = 0;
		var offset = 0;
		var length = pseudo;
		var atrule = 0;
		var property = 0;
		var previous = 0;
		var variable = 1;
		var scanning = 1;
		var ampersand = 1;
		var character = 0;
		var type = '';
		var props = rules;
		var children = rulesets;
		var reference = rule;
		var characters = type;

		while (scanning)
			switch (previous = character, character = next()) {
				// (
				case 40:
					if (previous != 108 && charat(characters, length - 1) == 58) {
						if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1)
							ampersand = -1;
						break
					}
				// " ' [
				case 34: case 39: case 91:
					characters += delimit(character);
					break
				// \t \n \r \s
				case 9: case 10: case 13: case 32:
					characters += whitespace(previous);
					break
				// \
				case 92:
					characters += escaping(caret() - 1, 7);
					continue
				// /
				case 47:
					switch (peek()) {
						case 42: case 47:
							append(comment(commenter(next(), caret()), root, parent), declarations);
							break
						default:
							characters += '/';
					}
					break
				// {
				case 123 * variable:
					points[index++] = strlen(characters) * ampersand;
				// } ; \0
				case 125 * variable: case 59: case 0:
					switch (character) {
						// \0 }
						case 0: case 125: scanning = 0;
						// ;
						case 59 + offset:
							if (property > 0 && (strlen(characters) - length))
								append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
							break
						// @ ;
						case 59: characters += ';';
						// { rule/at-rule
						default:
							append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);

							if (character === 123)
								if (offset === 0)
									parse(characters, root, reference, reference, props, rulesets, length, points, children);
								else
									switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
										// d m s
										case 100: case 109: case 115:
											parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
											break
										default:
											parse(characters, reference, reference, reference, [''], children, 0, points, children);
									}
					}

					index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
					break
				// :
				case 58:
					length = 1 + strlen(characters), property = previous;
				default:
					if (variable < 1)
						if (character == 123)
							--variable;
						else if (character == 125 && variable++ == 0 && prev() == 125)
							continue

					switch (characters += from(character), character * variable) {
						// &
						case 38:
							ampersand = offset > 0 ? 1 : (characters += '\f', -1);
							break
						// ,
						case 44:
							points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
							break
						// @
						case 64:
							// -
							if (peek() === 45)
								characters += delimit(next());

							atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
							break
						// -
						case 45:
							if (previous === 45 && strlen(characters) == 2)
								variable = 0;
					}
			}

		return rulesets
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} index
	 * @param {number} offset
	 * @param {string[]} rules
	 * @param {number[]} points
	 * @param {string} type
	 * @param {string[]} props
	 * @param {string[]} children
	 * @param {number} length
	 * @return {object}
	 */
	function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
		var post = offset - 1;
		var rule = offset === 0 ? rules : [''];
		var size = sizeof(rule);

		for (var i = 0, j = 0, k = 0; i < index; ++i)
			for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
				if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x])))
					props[k++] = z;

		return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)
	}

	/**
	 * @param {number} value
	 * @param {object} root
	 * @param {object?} parent
	 * @return {object}
	 */
	function comment (value, root, parent) {
		return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} length
	 * @return {object}
	 */
	function declaration (value, root, parent, length) {
		return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)
	}

	/**
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function serialize (children, callback) {
		var output = '';
		var length = sizeof(children);

		for (var i = 0; i < length; i++)
			output += callback(children[i], i, children, callback) || '';

		return output
	}

	/**
	 * @param {object} element
	 * @param {number} index
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function stringify (element, index, children, callback) {
		switch (element.type) {
			case IMPORT: case DECLARATION: return element.return = element.return || element.value
			case COMMENT: return ''
			case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
			case RULESET: element.value = element.props.join(',');
		}

		return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
	}

	/**
	 * @param {function[]} collection
	 * @return {function}
	 */
	function middleware (collection) {
		var length = sizeof(collection);

		return function (element, index, children, callback) {
			var output = '';

			for (var i = 0; i < length; i++)
				output += collection[i](element, index, children, callback) || '';

			return output
		}
	}

	/**
	 * @param {function} callback
	 * @return {function}
	 */
	function rulesheet (callback) {
		return function (element) {
			if (!element.root)
				if (element = element.return)
					callback(element);
		}
	}

	var weakMemoize = function weakMemoize(func) {
	  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
	  var cache = new WeakMap();
	  return function (arg) {
	    if (cache.has(arg)) {
	      // $FlowFixMe
	      return cache.get(arg);
	    }

	    var ret = func(arg);
	    cache.set(arg, ret);
	    return ret;
	  };
	};

	var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
	  var previous = 0;
	  var character = 0;

	  while (true) {
	    previous = character;
	    character = peek(); // &\f

	    if (previous === 38 && character === 12) {
	      points[index] = 1;
	    }

	    if (token(character)) {
	      break;
	    }

	    next();
	  }

	  return slice(begin, position$1);
	};

	var toRules = function toRules(parsed, points) {
	  // pretend we've started with a comma
	  var index = -1;
	  var character = 44;

	  do {
	    switch (token(character)) {
	      case 0:
	        // &\f
	        if (character === 38 && peek() === 12) {
	          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
	          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
	          // and when it should just concatenate the outer and inner selectors
	          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
	          points[index] = 1;
	        }

	        parsed[index] += identifierWithPointTracking(position$1 - 1, points, index);
	        break;

	      case 2:
	        parsed[index] += delimit(character);
	        break;

	      case 4:
	        // comma
	        if (character === 44) {
	          // colon
	          parsed[++index] = peek() === 58 ? '&\f' : '';
	          points[index] = parsed[index].length;
	          break;
	        }

	      // fallthrough

	      default:
	        parsed[index] += from(character);
	    }
	  } while (character = next());

	  return parsed;
	};

	var getRules = function getRules(value, points) {
	  return dealloc(toRules(alloc(value), points));
	}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


	var fixedElements = /* #__PURE__ */new WeakMap();
	var compat = function compat(element) {
	  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
	  // negative .length indicates that this rule has been already prefixed
	  element.length < 1) {
	    return;
	  }

	  var value = element.value,
	      parent = element.parent;
	  var isImplicitRule = element.column === parent.column && element.line === parent.line;

	  while (parent.type !== 'rule') {
	    parent = parent.parent;
	    if (!parent) return;
	  } // short-circuit for the simplest case


	  if (element.props.length === 1 && value.charCodeAt(0) !== 58
	  /* colon */
	  && !fixedElements.get(parent)) {
	    return;
	  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
	  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


	  if (isImplicitRule) {
	    return;
	  }

	  fixedElements.set(element, true);
	  var points = [];
	  var rules = getRules(value, points);
	  var parentRules = parent.props;

	  for (var i = 0, k = 0; i < rules.length; i++) {
	    for (var j = 0; j < parentRules.length; j++, k++) {
	      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
	    }
	  }
	};
	var removeLabel = function removeLabel(element) {
	  if (element.type === 'decl') {
	    var value = element.value;

	    if ( // charcode for l
	    value.charCodeAt(0) === 108 && // charcode for b
	    value.charCodeAt(2) === 98) {
	      // this ignores label
	      element["return"] = '';
	      element.value = '';
	    }
	  }
	};

	/* eslint-disable no-fallthrough */

	function prefix(value, length) {
	  switch (hash$2(value, length)) {
	    // color-adjust
	    case 5103:
	      return WEBKIT + 'print-' + value + value;
	    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

	    case 5737:
	    case 4201:
	    case 3177:
	    case 3433:
	    case 1641:
	    case 4457:
	    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

	    case 5572:
	    case 6356:
	    case 5844:
	    case 3191:
	    case 6645:
	    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

	    case 6391:
	    case 5879:
	    case 5623:
	    case 6135:
	    case 4599:
	    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

	    case 4215:
	    case 6389:
	    case 5109:
	    case 5365:
	    case 5621:
	    case 3829:
	      return WEBKIT + value + value;
	    // appearance, user-select, transform, hyphens, text-size-adjust

	    case 5349:
	    case 4246:
	    case 4810:
	    case 6968:
	    case 2756:
	      return WEBKIT + value + MOZ + value + MS + value + value;
	    // flex, flex-direction

	    case 6828:
	    case 4268:
	      return WEBKIT + value + MS + value + value;
	    // order

	    case 6165:
	      return WEBKIT + value + MS + 'flex-' + value + value;
	    // align-items

	    case 5187:
	      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
	    // align-self

	    case 5443:
	      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
	    // align-content

	    case 4675:
	      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
	    // flex-shrink

	    case 5548:
	      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
	    // flex-basis

	    case 5292:
	      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
	    // flex-grow

	    case 6060:
	      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
	    // transition

	    case 4554:
	      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
	    // cursor

	    case 6187:
	      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
	    // background, background-image

	    case 5495:
	    case 3959:
	      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
	    // justify-content

	    case 4968:
	      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
	    // (margin|padding)-inline-(start|end)

	    case 4095:
	    case 3583:
	    case 4068:
	    case 2532:
	      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
	    // (min|max)?(width|height|inline-size|block-size)

	    case 8116:
	    case 7059:
	    case 5753:
	    case 5535:
	    case 5445:
	    case 5701:
	    case 4933:
	    case 4677:
	    case 5533:
	    case 5789:
	    case 5021:
	    case 4765:
	      // stretch, max-content, min-content, fill-available
	      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
	        // (m)ax-content, (m)in-content
	        case 109:
	          // -
	          if (charat(value, length + 4) !== 45) break;
	        // (f)ill-available, (f)it-content

	        case 102:
	          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
	        // (s)tretch

	        case 115:
	          return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value;
	      }
	      break;
	    // position: sticky

	    case 4949:
	      // (s)ticky?
	      if (charat(value, length + 1) !== 115) break;
	    // display: (flex|inline-flex)

	    case 6444:
	      switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
	        // stic(k)y
	        case 107:
	          return replace(value, ':', ':' + WEBKIT) + value;
	        // (inline-)?fl(e)x

	        case 101:
	          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
	      }

	      break;
	    // writing-mode

	    case 5936:
	      switch (charat(value, length + 11)) {
	        // vertical-l(r)
	        case 114:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
	        // vertical-r(l)

	        case 108:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
	        // horizontal(-)tb

	        case 45:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
	      }

	      return WEBKIT + value + MS + value + value;
	  }

	  return value;
	}

	var prefixer = function prefixer(element, index, children, callback) {
	  if (element.length > -1) if (!element["return"]) switch (element.type) {
	    case DECLARATION:
	      element["return"] = prefix(element.value, element.length);
	      break;

	    case KEYFRAMES:
	      return serialize([copy(element, {
	        value: replace(element.value, '@', '@' + WEBKIT)
	      })], callback);

	    case RULESET:
	      if (element.length) return combine(element.props, function (value) {
	        switch (match(value, /(::plac\w+|:read-\w+)/)) {
	          // :read-(only|write)
	          case ':read-only':
	          case ':read-write':
	            return serialize([copy(element, {
	              props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
	            })], callback);
	          // :placeholder

	          case '::placeholder':
	            return serialize([copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
	            })], callback);
	        }

	        return '';
	      });
	  }
	};

	var isBrowser$4 = typeof document !== 'undefined';
	var getServerStylisCache = isBrowser$4 ? undefined : weakMemoize(function () {
	  return memoize$1(function () {
	    var cache = {};
	    return function (name) {
	      return cache[name];
	    };
	  });
	});
	var defaultStylisPlugins = [prefixer];

	var createCache = function createCache(options) {
	  var key = options.key;

	  if (isBrowser$4 && key === 'css') {
	    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
	    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
	    // note this very very intentionally targets all style elements regardless of the key to ensure
	    // that creating a cache works inside of render of a React component

	    Array.prototype.forEach.call(ssrStyles, function (node) {
	      // we want to only move elements which have a space in the data-emotion attribute value
	      // because that indicates that it is an Emotion 11 server-side rendered style elements
	      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
	      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
	      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
	      // will not result in the Emotion 10 styles being destroyed
	      var dataEmotionAttribute = node.getAttribute('data-emotion');

	      if (dataEmotionAttribute.indexOf(' ') === -1) {
	        return;
	      }
	      document.head.appendChild(node);
	      node.setAttribute('data-s', '');
	    });
	  }

	  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

	  var inserted = {};
	  var container;
	  var nodesToHydrate = [];

	  if (isBrowser$4) {
	    container = options.container || document.head;
	    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
	    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
	    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
	      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

	      for (var i = 1; i < attrib.length; i++) {
	        inserted[attrib[i]] = true;
	      }

	      nodesToHydrate.push(node);
	    });
	  }

	  var _insert;

	  var omnipresentPlugins = [compat, removeLabel];

	  if (isBrowser$4) {
	    var currentSheet;
	    var finalizingPlugins = [stringify, rulesheet(function (rule) {
	      currentSheet.insert(rule);
	    })];
	    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

	    var stylis = function stylis(styles) {
	      return serialize(compile(styles), serializer);
	    };

	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      currentSheet = sheet;

	      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

	      if (shouldCache) {
	        cache.inserted[serialized.name] = true;
	      }
	    };
	  } else {
	    var _finalizingPlugins = [stringify];

	    var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));

	    var _stylis = function _stylis(styles) {
	      return serialize(compile(styles), _serializer);
	    }; // $FlowFixMe


	    var serverStylisCache = getServerStylisCache(stylisPlugins)(key);

	    var getRules = function getRules(selector, serialized) {
	      var name = serialized.name;

	      if (serverStylisCache[name] === undefined) {
	        serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
	      }

	      return serverStylisCache[name];
	    };

	    _insert = function _insert(selector, serialized, sheet, shouldCache) {
	      var name = serialized.name;
	      var rules = getRules(selector, serialized);

	      if (cache.compat === undefined) {
	        // in regular mode, we don't set the styles on the inserted cache
	        // since we don't need to and that would be wasting memory
	        // we return them so that they are rendered in a style tag
	        if (shouldCache) {
	          cache.inserted[name] = true;
	        }

	        return rules;
	      } else {
	        // in compat mode, we put the styles on the inserted cache so
	        // that emotion-server can pull out the styles
	        // except when we don't want to cache it which was in Global but now
	        // is nowhere but we don't want to do a major right now
	        // and just in case we're going to leave the case here
	        // it's also not affecting client side bundle size
	        // so it's really not a big deal
	        if (shouldCache) {
	          cache.inserted[name] = rules;
	        } else {
	          return rules;
	        }
	      }
	    };
	  }

	  var cache = {
	    key: key,
	    sheet: new StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy,
	      prepend: options.prepend,
	      insertionPoint: options.insertionPoint
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  cache.sheet.hydrate(nodesToHydrate);
	  return cache;
	};

	var reactIs$1 = {exports: {}};

	var reactIs_production_min = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min;

	function requireReactIs_production_min () {
		if (hasRequiredReactIs_production_min) return reactIs_production_min;
		hasRequiredReactIs_production_min = 1;
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
		Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
		function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
		reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
		reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
		reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;
		return reactIs_production_min;
	}

	(function (module) {

		{
		  module.exports = requireReactIs_production_min();
		}
	} (reactIs$1));

	var reactIs = reactIs$1.exports;
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	var isBrowser$3 = typeof document !== 'undefined';
	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className] + ";");
	    } else {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var registerStyles = function registerStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;

	  if ( // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false || // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser$3 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }
	};
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  registerStyles(cache, serialized, isStringTag);
	  var className = cache.key + "-" + serialized.name;

	  if (cache.inserted[serialized.name] === undefined) {
	    var stylesForSSR = '';
	    var current = serialized;

	    do {
	      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

	      if (!isBrowser$3 && maybeStyles !== undefined) {
	        stylesForSSR += maybeStyles;
	      }

	      current = current.next;
	    } while (current !== undefined);

	    if (!isBrowser$3 && stylesForSSR.length !== 0) {
	      return stylesForSSR;
	    }
	  }
	};

	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash

	  var k,
	      i = 0,
	      len = str.length;

	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^=
	    /* k >>> r: */
	    k >>> 24;
	    h =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
	    /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array


	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h =
	      /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.


	  h ^= h >>> 13;
	  h =
	  /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};

	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};

	var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});

	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }

	  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }

	  return value;
	};

	var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

	function handleInterpolation(mergedProps, registered, interpolation) {
	  if (interpolation == null) {
	    return '';
	  }

	  if (interpolation.__emotion_styles !== undefined) {

	    return interpolation;
	  }

	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }

	    case 'object':
	      {
	        if (interpolation.anim === 1) {
	          cursor = {
	            name: interpolation.name,
	            styles: interpolation.styles,
	            next: cursor
	          };
	          return interpolation.name;
	        }

	        if (interpolation.styles !== undefined) {
	          var next = interpolation.next;

	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }

	          var styles = interpolation.styles + ";";

	          return styles;
	        }

	        return createStringFromObject(mergedProps, registered, interpolation);
	      }

	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result);
	        }

	        break;
	      }
	  } // finalize string values (regular strings and functions interpolated into css calls)


	  if (registered == null) {
	    return interpolation;
	  }

	  var cached = registered[interpolation];
	  return cached !== undefined ? cached : interpolation;
	}

	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';

	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
	    }
	  } else {
	    for (var _key in obj) {
	      var value = obj[_key];

	      if (typeof value !== 'object') {
	        if (registered != null && registered[value] !== undefined) {
	          string += _key + "{" + registered[value] + "}";
	        } else if (isProcessableValue(value)) {
	          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
	        }
	      } else {
	        if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {
	          throw new Error(noComponentSelectorMessage);
	        }

	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value);

	          switch (_key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(_key) + ":" + interpolated + ";";
	                break;
	              }

	            default:
	              {

	                string += _key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }

	  return string;
	}

	var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
	// keyframes are stored on the SerializedStyles object as a linked list


	var cursor;
	var serializeStyles = function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }

	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];

	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings);
	  } else {

	    styles += strings[0];
	  } // we start at 1 since we've already handled the first arg


	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i]);

	    if (stringMode) {

	      styles += strings[i];
	    }
	  }


	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' + // $FlowFixMe we know it's not null
	    match[1];
	  }

	  var name = murmur2(styles) + identifierName;

	  return {
	    name: name,
	    styles: styles,
	    next: cursor
	  };
	};

	var isBrowser$2 = typeof document !== 'undefined';

	var syncFallback = function syncFallback(create) {
	  return create();
	};

	var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : false;
	var useInsertionEffectAlwaysWithSyncFallback = !isBrowser$2 ? syncFallback : useInsertionEffect || syncFallback;
	var useInsertionEffectWithLayoutFallback = useInsertionEffect || react.exports.useLayoutEffect;

	var isBrowser$1 = typeof document !== 'undefined';

	var EmotionCacheContext = /* #__PURE__ */react.exports.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
	// because this module is primarily intended for the browser and node
	// but it's also required in react native and similar environments sometimes
	// and we could have a special build just for that
	// but this is much easier and the native packages
	// might use a different theme context in the future anyway
	typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
	  key: 'css'
	}) : null);

	EmotionCacheContext.Provider;

	var withEmotionCache = function withEmotionCache(func) {
	  // $FlowFixMe
	  return /*#__PURE__*/react.exports.forwardRef(function (props, ref) {
	    // the cache will never be null in the browser
	    var cache = react.exports.useContext(EmotionCacheContext);
	    return func(props, cache, ref);
	  });
	};

	if (!isBrowser$1) {
	  withEmotionCache = function withEmotionCache(func) {
	    return function (props) {
	      var cache = react.exports.useContext(EmotionCacheContext);

	      if (cache === null) {
	        // yes, we're potentially creating this on every render
	        // it doesn't actually matter though since it's only on the server
	        // so there will only every be a single render
	        // that could change in the future because of suspense and etc. but for now,
	        // this works and i don't want to optimise for a future thing that we aren't sure about
	        cache = createCache({
	          key: 'css'
	        });
	        return /*#__PURE__*/react.exports.createElement(EmotionCacheContext.Provider, {
	          value: cache
	        }, func(props, cache));
	      } else {
	        return func(props, cache);
	      }
	    };
	  };
	}

	var ThemeContext$2 = /* #__PURE__ */react.exports.createContext({});

	// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
	// initial client-side render from SSR, use place of hydrating tag

	var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {

	  var styles = props.styles;
	  var serialized = serializeStyles([styles], undefined, react.exports.useContext(ThemeContext$2));

	  if (!isBrowser$1) {
	    var _ref;

	    var serializedNames = serialized.name;
	    var serializedStyles = serialized.styles;
	    var next = serialized.next;

	    while (next !== undefined) {
	      serializedNames += ' ' + next.name;
	      serializedStyles += next.styles;
	      next = next.next;
	    }

	    var shouldCache = cache.compat === true;
	    var rules = cache.insert("", {
	      name: serializedNames,
	      styles: serializedStyles
	    }, cache.sheet, shouldCache);

	    if (shouldCache) {
	      return null;
	    }

	    return /*#__PURE__*/react.exports.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
	      __html: rules
	    }, _ref.nonce = cache.sheet.nonce, _ref));
	  } // yes, i know these hooks are used conditionally
	  // but it is based on a constant that will never change at runtime
	  // it's effectively like having two implementations and switching them out
	  // so it's not actually breaking anything


	  var sheetRef = react.exports.useRef();
	  useInsertionEffectWithLayoutFallback(function () {
	    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

	    var sheet = new cache.sheet.constructor({
	      key: key,
	      nonce: cache.sheet.nonce,
	      container: cache.sheet.container,
	      speedy: cache.sheet.isSpeedy
	    });
	    var rehydrating = false; // $FlowFixMe

	    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

	    if (cache.sheet.tags.length) {
	      sheet.before = cache.sheet.tags[0];
	    }

	    if (node !== null) {
	      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

	      node.setAttribute('data-emotion', key);
	      sheet.hydrate([node]);
	    }

	    sheetRef.current = [sheet, rehydrating];
	    return function () {
	      sheet.flush();
	    };
	  }, [cache]);
	  useInsertionEffectWithLayoutFallback(function () {
	    var sheetRefCurrent = sheetRef.current;
	    var sheet = sheetRefCurrent[0],
	        rehydrating = sheetRefCurrent[1];

	    if (rehydrating) {
	      sheetRefCurrent[1] = false;
	      return;
	    }

	    if (serialized.next !== undefined) {
	      // insert keyframes
	      insertStyles(cache, serialized.next, true);
	    }

	    if (sheet.tags.length) {
	      // if this doesn't exist then it will be null so the style element will be appended
	      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
	      sheet.before = element;
	      sheet.flush();
	    }

	    cache.insert("", serialized, sheet, false);
	  }, [cache, serialized.name]);
	  return null;
	});

	function css() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return serializeStyles(args);
	}

	var keyframes = function keyframes() {
	  var insertable = css.apply(void 0, arguments);
	  var name = "animation-" + insertable.name; // $FlowFixMe

	  return {
	    name: name,
	    styles: "@keyframes " + name + "{" + insertable.styles + "}",
	    anim: 1,
	    toString: function toString() {
	      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
	    }
	  };
	};

	var testOmitPropsOnStringTag = isPropValid;

	var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
	  return key !== 'theme';
	};

	var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
	  return typeof tag === 'string' && // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
	};
	var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
	  var shouldForwardProp;

	  if (options) {
	    var optionsShouldForwardProp = options.shouldForwardProp;
	    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
	      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
	    } : optionsShouldForwardProp;
	  }

	  if (typeof shouldForwardProp !== 'function' && isReal) {
	    shouldForwardProp = tag.__emotion_forwardProp;
	  }

	  return shouldForwardProp;
	};
	var isBrowser = typeof document !== 'undefined';

	var Insertion = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  if (!isBrowser && rules !== undefined) {
	    var _ref2;

	    var serializedNames = serialized.name;
	    var next = serialized.next;

	    while (next !== undefined) {
	      serializedNames += ' ' + next.name;
	      next = next.next;
	    }

	    return /*#__PURE__*/react.exports.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
	      __html: rules
	    }, _ref2.nonce = cache.sheet.nonce, _ref2));
	  }

	  return null;
	};

	var createStyled$1 = function createStyled(tag, options) {

	  var isReal = tag.__emotion_real === tag;
	  var baseTag = isReal && tag.__emotion_base || tag;
	  var identifierName;
	  var targetClassName;

	  if (options !== undefined) {
	    identifierName = options.label;
	    targetClassName = options.target;
	  }

	  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
	  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
	  var shouldUseAs = !defaultShouldForwardProp('as');
	  return function () {
	    var args = arguments;
	    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

	    if (identifierName !== undefined) {
	      styles.push("label:" + identifierName + ";");
	    }

	    if (args[0] == null || args[0].raw === undefined) {
	      styles.push.apply(styles, args);
	    } else {

	      styles.push(args[0][0]);
	      var len = args.length;
	      var i = 1;

	      for (; i < len; i++) {

	        styles.push(args[i], args[0][i]);
	      }
	    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


	    var Styled = withEmotionCache(function (props, cache, ref) {
	      var FinalTag = shouldUseAs && props.as || baseTag;
	      var className = '';
	      var classInterpolations = [];
	      var mergedProps = props;

	      if (props.theme == null) {
	        mergedProps = {};

	        for (var key in props) {
	          mergedProps[key] = props[key];
	        }

	        mergedProps.theme = react.exports.useContext(ThemeContext$2);
	      }

	      if (typeof props.className === 'string') {
	        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
	      } else if (props.className != null) {
	        className = props.className + " ";
	      }

	      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
	      className += cache.key + "-" + serialized.name;

	      if (targetClassName !== undefined) {
	        className += " " + targetClassName;
	      }

	      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
	      var newProps = {};

	      for (var _key in props) {
	        if (shouldUseAs && _key === 'as') continue;

	        if ( // $FlowFixMe
	        finalShouldForwardProp(_key)) {
	          newProps[_key] = props[_key];
	        }
	      }

	      newProps.className = className;
	      newProps.ref = ref;
	      return /*#__PURE__*/react.exports.createElement(react.exports.Fragment, null, /*#__PURE__*/react.exports.createElement(Insertion, {
	        cache: cache,
	        serialized: serialized,
	        isStringTag: typeof FinalTag === 'string'
	      }), /*#__PURE__*/react.exports.createElement(FinalTag, newProps));
	    });
	    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
	    Styled.defaultProps = tag.defaultProps;
	    Styled.__emotion_real = Styled;
	    Styled.__emotion_base = baseTag;
	    Styled.__emotion_styles = styles;
	    Styled.__emotion_forwardProp = shouldForwardProp;
	    Object.defineProperty(Styled, 'toString', {
	      value: function value() {
	        if (targetClassName === undefined && "production" !== 'production') {
	          return 'NO_COMPONENT_SELECTOR';
	        } // $FlowFixMe: coerce undefined to string


	        return "." + targetClassName;
	      }
	    });

	    Styled.withComponent = function (nextTag, nextOptions) {
	      return createStyled(nextTag, _extends({}, options, nextOptions, {
	        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
	      })).apply(void 0, styles);
	    };

	    return Styled;
	  };
	};

	var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

	var newStyled = createStyled$1.bind();
	tags.forEach(function (tagName) {
	  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
	  newStyled[tagName] = newStyled(tagName);
	});

	var emStyled = newStyled;

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_production_min = {};

	/**
	 * @license React
	 * react-jsx-runtime.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactJsxRuntime_production_min;

	function requireReactJsxRuntime_production_min () {
		if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
		hasRequiredReactJsxRuntime_production_min = 1;
	var f=react.exports,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
		function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;
		return reactJsxRuntime_production_min;
	}

	(function (module) {

		{
		  module.exports = requireReactJsxRuntime_production_min();
		}
	} (jsxRuntime));

	function isEmpty$4(obj) {
	  return obj === undefined || obj === null || Object.keys(obj).length === 0;
	}
	function GlobalStyles$1(props) {
	  const {
	    styles,
	    defaultTheme = {}
	  } = props;
	  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$4(themeInput) ? defaultTheme : themeInput) : styles;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Global, {
	    styles: globalStyles
	  });
	}

	/** @license MUI v5.10.14
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	function styled$2(tag, options) {
	  const stylesFactory = emStyled(tag, options);
	  return stylesFactory;
	}

	// eslint-disable-next-line @typescript-eslint/naming-convention
	const internal_processStyles = (tag, processor) => {
	  // Emotion attaches all the styles as `__emotion_styles`.
	  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
	  if (Array.isArray(tag.__emotion_styles)) {
	    tag.__emotion_styles = processor(tag.__emotion_styles);
	  }
	};

	function merge(acc, item) {
	  if (!item) {
	    return acc;
	  }
	  return deepmerge(acc, item, {
	    clone: false // No need to clone deep, it's way faster.
	  });
	}

	// The breakpoint **start** at this value.
	// For instance with the first breakpoint xs: [xs, sm[.
	const values$1 = {
	  xs: 0,
	  // phone
	  sm: 600,
	  // tablet
	  md: 900,
	  // small laptop
	  lg: 1200,
	  // desktop
	  xl: 1536 // large screen
	};

	const defaultBreakpoints = {
	  // Sorted ASC by size. That's important.
	  // It can't be configured as it's used statically for propTypes.
	  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
	  up: key => `@media (min-width:${values$1[key]}px)`
	};
	function handleBreakpoints(props, propValue, styleFromPropValue) {
	  const theme = props.theme || {};
	  if (Array.isArray(propValue)) {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return propValue.reduce((acc, item, index) => {
	      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
	      return acc;
	    }, {});
	  }
	  if (typeof propValue === 'object') {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return Object.keys(propValue).reduce((acc, breakpoint) => {
	      // key is breakpoint
	      if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
	        const mediaKey = themeBreakpoints.up(breakpoint);
	        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
	      } else {
	        const cssKey = breakpoint;
	        acc[cssKey] = propValue[cssKey];
	      }
	      return acc;
	    }, {});
	  }
	  const output = styleFromPropValue(propValue);
	  return output;
	}
	function createEmptyBreakpointObject(breakpointsInput = {}) {
	  var _breakpointsInput$key;
	  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
	    const breakpointStyleKey = breakpointsInput.up(key);
	    acc[breakpointStyleKey] = {};
	    return acc;
	  }, {});
	  return breakpointsInOrder || {};
	}
	function removeUnusedBreakpoints(breakpointKeys, style) {
	  return breakpointKeys.reduce((acc, key) => {
	    const breakpointOutput = acc[key];
	    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
	    if (isBreakpointUnused) {
	      delete acc[key];
	    }
	    return acc;
	  }, style);
	}

	function getPath(obj, path, checkVars = true) {
	  if (!path || typeof path !== 'string') {
	    return null;
	  }

	  // Check if CSS variables are used
	  if (obj && obj.vars && checkVars) {
	    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
	    if (val != null) {
	      return val;
	    }
	  }
	  return path.split('.').reduce((acc, item) => {
	    if (acc && acc[item] != null) {
	      return acc[item];
	    }
	    return null;
	  }, obj);
	}
	function getStyleValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
	  let value;
	  if (typeof themeMapping === 'function') {
	    value = themeMapping(propValueFinal);
	  } else if (Array.isArray(themeMapping)) {
	    value = themeMapping[propValueFinal] || userValue;
	  } else {
	    value = getPath(themeMapping, propValueFinal) || userValue;
	  }
	  if (transform) {
	    value = transform(value, userValue);
	  }
	  return value;
	}
	function style$1(options) {
	  const {
	    prop,
	    cssProperty = options.prop,
	    themeKey,
	    transform
	  } = options;
	  const fn = props => {
	    if (props[prop] == null) {
	      return null;
	    }
	    const propValue = props[prop];
	    const theme = props.theme;
	    const themeMapping = getPath(theme, themeKey) || {};
	    const styleFromPropValue = propValueFinal => {
	      let value = getStyleValue$1(themeMapping, transform, propValueFinal);
	      if (propValueFinal === value && typeof propValueFinal === 'string') {
	        // Haven't found value
	        value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
	      }
	      if (cssProperty === false) {
	        return value;
	      }
	      return {
	        [cssProperty]: value
	      };
	    };
	    return handleBreakpoints(props, propValue, styleFromPropValue);
	  };
	  fn.propTypes = {};
	  fn.filterProps = [prop];
	  return fn;
	}

	function compose(...styles) {
	  const handlers = styles.reduce((acc, style) => {
	    style.filterProps.forEach(prop => {
	      acc[prop] = style;
	    });
	    return acc;
	  }, {});
	  const fn = props => {
	    return Object.keys(props).reduce((acc, prop) => {
	      if (handlers[prop]) {
	        return merge(acc, handlers[prop](props));
	      }
	      return acc;
	    }, {});
	  };
	  fn.propTypes = {};
	  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
	  return fn;
	}

	function memoize(fn) {
	  const cache = {};
	  return arg => {
	    if (cache[arg] === undefined) {
	      cache[arg] = fn(arg);
	    }
	    return cache[arg];
	  };
	}

	const properties = {
	  m: 'margin',
	  p: 'padding'
	};
	const directions = {
	  t: 'Top',
	  r: 'Right',
	  b: 'Bottom',
	  l: 'Left',
	  x: ['Left', 'Right'],
	  y: ['Top', 'Bottom']
	};
	const aliases = {
	  marginX: 'mx',
	  marginY: 'my',
	  paddingX: 'px',
	  paddingY: 'py'
	};

	// memoize() impact:
	// From 300,000 ops/sec
	// To 350,000 ops/sec
	const getCssProperties = memoize(prop => {
	  // It's not a shorthand notation.
	  if (prop.length > 2) {
	    if (aliases[prop]) {
	      prop = aliases[prop];
	    } else {
	      return [prop];
	    }
	  }
	  const [a, b] = prop.split('');
	  const property = properties[a];
	  const direction = directions[b] || '';
	  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
	});
	const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
	const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
	const spacingKeys = [...marginKeys, ...paddingKeys];
	function createUnaryUnit(theme, themeKey, defaultValue, propName) {
	  var _getPath;
	  const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
	  if (typeof themeSpacing === 'number') {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }
	      return themeSpacing * abs;
	    };
	  }
	  if (Array.isArray(themeSpacing)) {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }
	      return themeSpacing[abs];
	    };
	  }
	  if (typeof themeSpacing === 'function') {
	    return themeSpacing;
	  }
	  return () => undefined;
	}
	function createUnarySpacing(theme) {
	  return createUnaryUnit(theme, 'spacing', 8);
	}
	function getValue(transformer, propValue) {
	  if (typeof propValue === 'string' || propValue == null) {
	    return propValue;
	  }
	  const abs = Math.abs(propValue);
	  const transformed = transformer(abs);
	  if (propValue >= 0) {
	    return transformed;
	  }
	  if (typeof transformed === 'number') {
	    return -transformed;
	  }
	  return `-${transformed}`;
	}
	function getStyleFromPropValue(cssProperties, transformer) {
	  return propValue => cssProperties.reduce((acc, cssProperty) => {
	    acc[cssProperty] = getValue(transformer, propValue);
	    return acc;
	  }, {});
	}
	function resolveCssProperty(props, keys, prop, transformer) {
	  // Using a hash computation over an array iteration could be faster, but with only 28 items,
	  // it's doesn't worth the bundle size.
	  if (keys.indexOf(prop) === -1) {
	    return null;
	  }
	  const cssProperties = getCssProperties(prop);
	  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
	  const propValue = props[prop];
	  return handleBreakpoints(props, propValue, styleFromPropValue);
	}
	function style(props, keys) {
	  const transformer = createUnarySpacing(props.theme);
	  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
	}
	function spacing(props) {
	  return style(props, spacingKeys);
	}
	spacing.propTypes = {};
	spacing.filterProps = spacingKeys;

	function getBorder(value) {
	  if (typeof value !== 'number') {
	    return value;
	  }
	  return `${value}px solid`;
	}
	const border = style$1({
	  prop: 'border',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderTop = style$1({
	  prop: 'borderTop',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderRight = style$1({
	  prop: 'borderRight',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderBottom = style$1({
	  prop: 'borderBottom',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderLeft = style$1({
	  prop: 'borderLeft',
	  themeKey: 'borders',
	  transform: getBorder
	});
	const borderColor = style$1({
	  prop: 'borderColor',
	  themeKey: 'palette'
	});
	const borderTopColor = style$1({
	  prop: 'borderTopColor',
	  themeKey: 'palette'
	});
	const borderRightColor = style$1({
	  prop: 'borderRightColor',
	  themeKey: 'palette'
	});
	const borderBottomColor = style$1({
	  prop: 'borderBottomColor',
	  themeKey: 'palette'
	});
	const borderLeftColor = style$1({
	  prop: 'borderLeftColor',
	  themeKey: 'palette'
	});
	const borderRadius = props => {
	  if (props.borderRadius !== undefined && props.borderRadius !== null) {
	    const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4);
	    const styleFromPropValue = propValue => ({
	      borderRadius: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
	  }
	  return null;
	};
	borderRadius.propTypes = {};
	borderRadius.filterProps = ['borderRadius'];
	const borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
	var borders$1 = borders;

	const displayPrint = style$1({
	  prop: 'displayPrint',
	  cssProperty: false,
	  transform: value => ({
	    '@media print': {
	      display: value
	    }
	  })
	});
	const displayRaw = style$1({
	  prop: 'display'
	});
	const overflow = style$1({
	  prop: 'overflow'
	});
	const textOverflow = style$1({
	  prop: 'textOverflow'
	});
	const visibility = style$1({
	  prop: 'visibility'
	});
	const whiteSpace = style$1({
	  prop: 'whiteSpace'
	});
	var display = compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

	const flexBasis = style$1({
	  prop: 'flexBasis'
	});
	const flexDirection = style$1({
	  prop: 'flexDirection'
	});
	const flexWrap = style$1({
	  prop: 'flexWrap'
	});
	const justifyContent = style$1({
	  prop: 'justifyContent'
	});
	const alignItems = style$1({
	  prop: 'alignItems'
	});
	const alignContent = style$1({
	  prop: 'alignContent'
	});
	const order$1 = style$1({
	  prop: 'order'
	});
	const flex = style$1({
	  prop: 'flex'
	});
	const flexGrow = style$1({
	  prop: 'flexGrow'
	});
	const flexShrink = style$1({
	  prop: 'flexShrink'
	});
	const alignSelf = style$1({
	  prop: 'alignSelf'
	});
	const justifyItems = style$1({
	  prop: 'justifyItems'
	});
	const justifySelf = style$1({
	  prop: 'justifySelf'
	});
	const flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order$1, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
	var flexbox$1 = flexbox;

	const gap = props => {
	  if (props.gap !== undefined && props.gap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8);
	    const styleFromPropValue = propValue => ({
	      gap: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.gap, styleFromPropValue);
	  }
	  return null;
	};
	gap.propTypes = {};
	gap.filterProps = ['gap'];
	const columnGap = props => {
	  if (props.columnGap !== undefined && props.columnGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8);
	    const styleFromPropValue = propValue => ({
	      columnGap: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
	  }
	  return null;
	};
	columnGap.propTypes = {};
	columnGap.filterProps = ['columnGap'];
	const rowGap = props => {
	  if (props.rowGap !== undefined && props.rowGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8);
	    const styleFromPropValue = propValue => ({
	      rowGap: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
	  }
	  return null;
	};
	rowGap.propTypes = {};
	rowGap.filterProps = ['rowGap'];
	const gridColumn = style$1({
	  prop: 'gridColumn'
	});
	const gridRow = style$1({
	  prop: 'gridRow'
	});
	const gridAutoFlow = style$1({
	  prop: 'gridAutoFlow'
	});
	const gridAutoColumns = style$1({
	  prop: 'gridAutoColumns'
	});
	const gridAutoRows = style$1({
	  prop: 'gridAutoRows'
	});
	const gridTemplateColumns = style$1({
	  prop: 'gridTemplateColumns'
	});
	const gridTemplateRows = style$1({
	  prop: 'gridTemplateRows'
	});
	const gridTemplateAreas = style$1({
	  prop: 'gridTemplateAreas'
	});
	const gridArea = style$1({
	  prop: 'gridArea'
	});
	const grid = compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
	var grid$1 = grid;

	function transform$1(value, userValue) {
	  if (userValue === 'grey') {
	    return userValue;
	  }
	  return value;
	}
	const color = style$1({
	  prop: 'color',
	  themeKey: 'palette',
	  transform: transform$1
	});
	const bgcolor = style$1({
	  prop: 'bgcolor',
	  cssProperty: 'backgroundColor',
	  themeKey: 'palette',
	  transform: transform$1
	});
	const backgroundColor = style$1({
	  prop: 'backgroundColor',
	  themeKey: 'palette',
	  transform: transform$1
	});
	const palette = compose(color, bgcolor, backgroundColor);
	var palette$1 = palette;

	const position = style$1({
	  prop: 'position'
	});
	const zIndex$2 = style$1({
	  prop: 'zIndex',
	  themeKey: 'zIndex'
	});
	const top$1 = style$1({
	  prop: 'top'
	});
	const right$1 = style$1({
	  prop: 'right'
	});
	const bottom$1 = style$1({
	  prop: 'bottom'
	});
	const left$1 = style$1({
	  prop: 'left'
	});
	var positions = compose(position, zIndex$2, top$1, right$1, bottom$1, left$1);

	const boxShadow = style$1({
	  prop: 'boxShadow',
	  themeKey: 'shadows'
	});
	var shadows$2 = boxShadow;

	function transform(value) {
	  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
	}
	const width = style$1({
	  prop: 'width',
	  transform
	});
	const maxWidth = props => {
	  if (props.maxWidth !== undefined && props.maxWidth !== null) {
	    const styleFromPropValue = propValue => {
	      var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
	      const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values$1[propValue];
	      return {
	        maxWidth: breakpoint || transform(propValue)
	      };
	    };
	    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
	  }
	  return null;
	};
	maxWidth.filterProps = ['maxWidth'];
	const minWidth = style$1({
	  prop: 'minWidth',
	  transform
	});
	const height = style$1({
	  prop: 'height',
	  transform
	});
	const maxHeight = style$1({
	  prop: 'maxHeight',
	  transform
	});
	const minHeight = style$1({
	  prop: 'minHeight',
	  transform
	});
	style$1({
	  prop: 'size',
	  cssProperty: 'width',
	  transform
	});
	style$1({
	  prop: 'size',
	  cssProperty: 'height',
	  transform
	});
	const boxSizing = style$1({
	  prop: 'boxSizing'
	});
	const sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
	var sizing$1 = sizing;

	const fontFamily = style$1({
	  prop: 'fontFamily',
	  themeKey: 'typography'
	});
	const fontSize = style$1({
	  prop: 'fontSize',
	  themeKey: 'typography'
	});
	const fontStyle = style$1({
	  prop: 'fontStyle',
	  themeKey: 'typography'
	});
	const fontWeight = style$1({
	  prop: 'fontWeight',
	  themeKey: 'typography'
	});
	const letterSpacing = style$1({
	  prop: 'letterSpacing'
	});
	const textTransform = style$1({
	  prop: 'textTransform'
	});
	const lineHeight = style$1({
	  prop: 'lineHeight'
	});
	const textAlign = style$1({
	  prop: 'textAlign'
	});
	const typographyVariant = style$1({
	  prop: 'typography',
	  cssProperty: false,
	  themeKey: 'typography'
	});
	const typography = compose(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
	var typography$1 = typography;

	const filterPropsMapping = {
	  borders: borders$1.filterProps,
	  display: display.filterProps,
	  flexbox: flexbox$1.filterProps,
	  grid: grid$1.filterProps,
	  positions: positions.filterProps,
	  palette: palette$1.filterProps,
	  shadows: shadows$2.filterProps,
	  sizing: sizing$1.filterProps,
	  spacing: spacing.filterProps,
	  typography: typography$1.filterProps
	};
	const styleFunctionMapping = {
	  borders: borders$1,
	  display,
	  flexbox: flexbox$1,
	  grid: grid$1,
	  positions,
	  palette: palette$1,
	  shadows: shadows$2,
	  sizing: sizing$1,
	  spacing,
	  typography: typography$1
	};
	const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
	  filterPropsMapping[styleFnName].forEach(propName => {
	    acc[propName] = styleFunctionMapping[styleFnName];
	  });
	  return acc;
	}, {});

	function objectsHaveSameKeys(...objects) {
	  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
	  const union = new Set(allKeys);
	  return objects.every(object => union.size === Object.keys(object).length);
	}
	function callIfFn(maybeFn, arg) {
	  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
	}

	// eslint-disable-next-line @typescript-eslint/naming-convention
	function unstable_createStyleFunctionSx(styleFunctionMapping$1 = styleFunctionMapping) {
	  const propToStyleFunction = Object.keys(styleFunctionMapping$1).reduce((acc, styleFnName) => {
	    styleFunctionMapping$1[styleFnName].filterProps.forEach(propName => {
	      acc[propName] = styleFunctionMapping$1[styleFnName];
	    });
	    return acc;
	  }, {});
	  function getThemeValue(prop, value, theme) {
	    const inputProps = {
	      [prop]: value,
	      theme
	    };
	    const styleFunction = propToStyleFunction[prop];
	    return styleFunction ? styleFunction(inputProps) : {
	      [prop]: value
	    };
	  }
	  function styleFunctionSx(props) {
	    const {
	      sx,
	      theme = {}
	    } = props || {};
	    if (!sx) {
	      return null; // Emotion & styled-components will neglect null
	    }

	    /*
	     * Receive `sxInput` as object or callback
	     * and then recursively check keys & values to create media query object styles.
	     * (the result will be used in `styled`)
	     */
	    function traverse(sxInput) {
	      let sxObject = sxInput;
	      if (typeof sxInput === 'function') {
	        sxObject = sxInput(theme);
	      } else if (typeof sxInput !== 'object') {
	        // value
	        return sxInput;
	      }
	      if (!sxObject) {
	        return null;
	      }
	      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
	      const breakpointsKeys = Object.keys(emptyBreakpoints);
	      let css = emptyBreakpoints;
	      Object.keys(sxObject).forEach(styleKey => {
	        const value = callIfFn(sxObject[styleKey], theme);
	        if (value !== null && value !== undefined) {
	          if (typeof value === 'object') {
	            if (propToStyleFunction[styleKey]) {
	              css = merge(css, getThemeValue(styleKey, value, theme));
	            } else {
	              const breakpointsValues = handleBreakpoints({
	                theme
	              }, value, x => ({
	                [styleKey]: x
	              }));
	              if (objectsHaveSameKeys(breakpointsValues, value)) {
	                css[styleKey] = styleFunctionSx({
	                  sx: value,
	                  theme
	                });
	              } else {
	                css = merge(css, breakpointsValues);
	              }
	            }
	          } else {
	            css = merge(css, getThemeValue(styleKey, value, theme));
	          }
	        }
	      });
	      return removeUnusedBreakpoints(breakpointsKeys, css);
	    }
	    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
	  }
	  return styleFunctionSx;
	}
	const styleFunctionSx = unstable_createStyleFunctionSx();
	styleFunctionSx.filterProps = ['sx'];
	var defaultStyleFunctionSx = styleFunctionSx;

	const _excluded$1L = ["sx"];
	const splitProps = props => {
	  const result = {
	    systemProps: {},
	    otherProps: {}
	  };
	  Object.keys(props).forEach(prop => {
	    if (propToStyleFunction[prop]) {
	      result.systemProps[prop] = props[prop];
	    } else {
	      result.otherProps[prop] = props[prop];
	    }
	  });
	  return result;
	};
	function extendSxProp(props) {
	  const {
	      sx: inSx
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1L);
	  const {
	    systemProps,
	    otherProps
	  } = splitProps(other);
	  let finalSx;
	  if (Array.isArray(inSx)) {
	    finalSx = [systemProps, ...inSx];
	  } else if (typeof inSx === 'function') {
	    finalSx = (...args) => {
	      const result = inSx(...args);
	      if (!isPlainObject(result)) {
	        return systemProps;
	      }
	      return _extends({}, systemProps, result);
	    };
	  } else {
	    finalSx = _extends({}, systemProps, inSx);
	  }
	  return _extends({}, otherProps, {
	    sx: finalSx
	  });
	}

	function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

	const _excluded$1K = ["values", "unit", "step"];
	const sortBreakpointsValues = values => {
	  const breakpointsAsArray = Object.keys(values).map(key => ({
	    key,
	    val: values[key]
	  })) || [];
	  // Sort in ascending order
	  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
	  return breakpointsAsArray.reduce((acc, obj) => {
	    return _extends({}, acc, {
	      [obj.key]: obj.val
	    });
	  }, {});
	};

	// Keep in mind that @media is inclusive by the CSS specification.
	function createBreakpoints(breakpoints) {
	  const {
	      // The breakpoint **start** at this value.
	      // For instance with the first breakpoint xs: [xs, sm).
	      values = {
	        xs: 0,
	        // phone
	        sm: 600,
	        // tablet
	        md: 900,
	        // small laptop
	        lg: 1200,
	        // desktop
	        xl: 1536 // large screen
	      },

	      unit = 'px',
	      step = 5
	    } = breakpoints,
	    other = _objectWithoutPropertiesLoose(breakpoints, _excluded$1K);
	  const sortedValues = sortBreakpointsValues(values);
	  const keys = Object.keys(sortedValues);
	  function up(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (min-width:${value}${unit})`;
	  }
	  function down(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (max-width:${value - step / 100}${unit})`;
	  }
	  function between(start, end) {
	    const endIndex = keys.indexOf(end);
	    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
	  }
	  function only(key) {
	    if (keys.indexOf(key) + 1 < keys.length) {
	      return between(key, keys[keys.indexOf(key) + 1]);
	    }
	    return up(key);
	  }
	  function not(key) {
	    // handle first and last key separately, for better readability
	    const keyIndex = keys.indexOf(key);
	    if (keyIndex === 0) {
	      return up(keys[1]);
	    }
	    if (keyIndex === keys.length - 1) {
	      return down(keys[keyIndex]);
	    }
	    return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
	  }
	  return _extends({
	    keys,
	    values: sortedValues,
	    up,
	    down,
	    between,
	    only,
	    not,
	    unit
	  }, other);
	}

	const shape = {
	  borderRadius: 4
	};
	var shape$1 = shape;

	/* tslint:enable:unified-signatures */

	function createSpacing(spacingInput = 8) {
	  // Already transformed.
	  if (spacingInput.mui) {
	    return spacingInput;
	  }

	  // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
	  // Smaller components, such as icons, can align to a 4dp grid.
	  // https://m2.material.io/design/layout/understanding-layout.html
	  const transform = createUnarySpacing({
	    spacing: spacingInput
	  });
	  const spacing = (...argsInput) => {
	    const args = argsInput.length === 0 ? [1] : argsInput;
	    return args.map(argument => {
	      const output = transform(argument);
	      return typeof output === 'number' ? `${output}px` : output;
	    }).join(' ');
	  };
	  spacing.mui = true;
	  return spacing;
	}

	const _excluded$1J = ["breakpoints", "palette", "spacing", "shape"];
	function createTheme$1(options = {}, ...args) {
	  const {
	      breakpoints: breakpointsInput = {},
	      palette: paletteInput = {},
	      spacing: spacingInput,
	      shape: shapeInput = {}
	    } = options,
	    other = _objectWithoutPropertiesLoose(options, _excluded$1J);
	  const breakpoints = createBreakpoints(breakpointsInput);
	  const spacing = createSpacing(spacingInput);
	  let muiTheme = deepmerge({
	    breakpoints,
	    direction: 'ltr',
	    components: {},
	    // Inject component definitions.
	    palette: _extends({
	      mode: 'light'
	    }, paletteInput),
	    spacing,
	    shape: _extends({}, shape$1, shapeInput)
	  }, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
	  return muiTheme;
	}

	const ThemeContext = /*#__PURE__*/react.exports.createContext(null);
	var ThemeContext$1 = ThemeContext;

	function useTheme$3() {
	  const theme = react.exports.useContext(ThemeContext$1);
	  return theme;
	}

	function isObjectEmpty(obj) {
	  return Object.keys(obj).length === 0;
	}
	function useTheme$2(defaultTheme = null) {
	  const contextTheme = useTheme$3();
	  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
	}

	const systemDefaultTheme$1 = createTheme$1();
	function useTheme$1(defaultTheme = systemDefaultTheme$1) {
	  return useTheme$2(defaultTheme);
	}

	const _excluded$1I = ["variant"];
	function isEmpty$3(string) {
	  return string.length === 0;
	}

	/**
	 * Generates string classKey based on the properties provided. It starts with the
	 * variant if defined, and then it appends all other properties in alphabetical order.
	 * @param {object} props - the properties for which the classKey should be created.
	 */
	function propsToClassKey(props) {
	  const {
	      variant
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1I);
	  let classKey = variant || '';
	  Object.keys(other).sort().forEach(key => {
	    if (key === 'color') {
	      classKey += isEmpty$3(classKey) ? props[key] : capitalize(props[key]);
	    } else {
	      classKey += `${isEmpty$3(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
	    }
	  });
	  return classKey;
	}

	const _excluded$1H = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"],
	  _excluded2$8 = ["theme"],
	  _excluded3 = ["theme"];
	function isEmpty$2(obj) {
	  return Object.keys(obj).length === 0;
	}

	// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
	function isStringTag(tag) {
	  return typeof tag === 'string' &&
	  // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96;
	}
	const getStyleOverrides = (name, theme) => {
	  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
	    return theme.components[name].styleOverrides;
	  }
	  return null;
	};
	const getVariantStyles = (name, theme) => {
	  let variants = [];
	  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
	    variants = theme.components[name].variants;
	  }
	  const variantsStyles = {};
	  variants.forEach(definition => {
	    const key = propsToClassKey(definition.props);
	    variantsStyles[key] = definition.style;
	  });
	  return variantsStyles;
	};
	const variantsResolver = (props, styles, theme, name) => {
	  var _theme$components, _theme$components$nam;
	  const {
	    ownerState = {}
	  } = props;
	  const variantsStyles = [];
	  const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
	  if (themeVariants) {
	    themeVariants.forEach(themeVariant => {
	      let isMatch = true;
	      Object.keys(themeVariant.props).forEach(key => {
	        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
	          isMatch = false;
	        }
	      });
	      if (isMatch) {
	        variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);
	      }
	    });
	  }
	  return variantsStyles;
	};

	// Update /system/styled/#api in case if this changes
	function shouldForwardProp(prop) {
	  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
	}
	const systemDefaultTheme = createTheme$1();
	function createStyled(input = {}) {
	  const {
	    defaultTheme = systemDefaultTheme,
	    rootShouldForwardProp = shouldForwardProp,
	    slotShouldForwardProp = shouldForwardProp,
	    styleFunctionSx = defaultStyleFunctionSx
	  } = input;
	  const systemSx = props => {
	    const theme = isEmpty$2(props.theme) ? defaultTheme : props.theme;
	    return styleFunctionSx(_extends({}, props, {
	      theme
	    }));
	  };
	  systemSx.__mui_systemSx = true;
	  return (tag, inputOptions = {}) => {
	    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
	    internal_processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
	    const {
	        name: componentName,
	        slot: componentSlot,
	        skipVariantsResolver: inputSkipVariantsResolver,
	        skipSx: inputSkipSx,
	        overridesResolver
	      } = inputOptions,
	      options = _objectWithoutPropertiesLoose(inputOptions, _excluded$1H);

	    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
	    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
	    const skipSx = inputSkipSx || false;
	    let label;
	    let shouldForwardPropOption = shouldForwardProp;
	    if (componentSlot === 'Root') {
	      shouldForwardPropOption = rootShouldForwardProp;
	    } else if (componentSlot) {
	      // any other slot specified
	      shouldForwardPropOption = slotShouldForwardProp;
	    } else if (isStringTag(tag)) {
	      // for string (html) tag, preserve the behavior in emotion & styled-components.
	      shouldForwardPropOption = undefined;
	    }
	    const defaultStyledResolver = styled$2(tag, _extends({
	      shouldForwardProp: shouldForwardPropOption,
	      label
	    }, options));
	    const muiStyledResolver = (styleArg, ...expressions) => {
	      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
	        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
	        // component stays as a function. This condition makes sure that we do not interpolate functions
	        // which are basically components used as a selectors.
	        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? _ref => {
	          let {
	              theme: themeInput
	            } = _ref,
	            other = _objectWithoutPropertiesLoose(_ref, _excluded2$8);
	          return stylesArg(_extends({
	            theme: isEmpty$2(themeInput) ? defaultTheme : themeInput
	          }, other));
	        } : stylesArg;
	      }) : [];
	      let transformedStyleArg = styleArg;
	      if (componentName && overridesResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty$2(props.theme) ? defaultTheme : props.theme;
	          const styleOverrides = getStyleOverrides(componentName, theme);
	          if (styleOverrides) {
	            const resolvedStyleOverrides = {};
	            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
	              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
	                theme
	              })) : slotStyle;
	            });
	            return overridesResolver(props, resolvedStyleOverrides);
	          }
	          return null;
	        });
	      }
	      if (componentName && !skipVariantsResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = isEmpty$2(props.theme) ? defaultTheme : props.theme;
	          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
	        });
	      }
	      if (!skipSx) {
	        expressionsWithDefaultTheme.push(systemSx);
	      }
	      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
	      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
	        const placeholders = new Array(numOfCustomFnsApplied).fill('');
	        // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
	        transformedStyleArg = [...styleArg, ...placeholders];
	        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
	      } else if (typeof styleArg === 'function' &&
	      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
	      // component stays as a function. This condition makes sure that we do not interpolate functions
	      // which are basically components used as a selectors.
	      styleArg.__emotion_real !== styleArg) {
	        // If the type is function, we need to define the default theme.
	        transformedStyleArg = _ref2 => {
	          let {
	              theme: themeInput
	            } = _ref2,
	            other = _objectWithoutPropertiesLoose(_ref2, _excluded3);
	          return styleArg(_extends({
	            theme: isEmpty$2(themeInput) ? defaultTheme : themeInput
	          }, other));
	        };
	      }
	      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
	      return Component;
	    };
	    if (defaultStyledResolver.withConfig) {
	      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
	    }
	    return muiStyledResolver;
	  };
	}

	function getThemeProps(params) {
	  const {
	    theme,
	    name,
	    props
	  } = params;
	  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
	    return props;
	  }
	  return resolveProps(theme.components[name].defaultProps, props);
	}

	function useThemeProps$1({
	  props,
	  name,
	  defaultTheme
	}) {
	  const theme = useTheme$1(defaultTheme);
	  const mergedProps = getThemeProps({
	    theme,
	    name,
	    props
	  });
	  return mergedProps;
	}

	/**
	 * Returns a number whose value is limited to the given range.
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp$1(value, min = 0, max = 1) {
	  return Math.min(Math.max(min, value), max);
	}

	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 * @returns {string} A CSS rgb color string
	 */
	function hexToRgb(color) {
	  color = color.slice(1);
	  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
	  let colors = color.match(re);
	  if (colors && colors[0].length === 1) {
	    colors = colors.map(n => n + n);
	  }
	  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
	}

	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {object} - A MUI color object: {type: string, values: number[]}
	 */
	function decomposeColor(color) {
	  // Idempotent
	  if (color.type) {
	    return color;
	  }
	  if (color.charAt(0) === '#') {
	    return decomposeColor(hexToRgb(color));
	  }
	  const marker = color.indexOf('(');
	  const type = color.substring(0, marker);
	  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
	    throw new Error(formatMuiErrorMessage(9, color));
	  }
	  let values = color.substring(marker + 1, color.length - 1);
	  let colorSpace;
	  if (type === 'color') {
	    values = values.split(' ');
	    colorSpace = values.shift();
	    if (values.length === 4 && values[3].charAt(0) === '/') {
	      values[3] = values[3].slice(1);
	    }
	    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
	      throw new Error(formatMuiErrorMessage(10, colorSpace));
	    }
	  } else {
	    values = values.split(',');
	  }
	  values = values.map(value => parseFloat(value));
	  return {
	    type,
	    values,
	    colorSpace
	  };
	}

	/**
	 * Converts a color object with type and values to a string.
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */
	function recomposeColor(color) {
	  const {
	    type,
	    colorSpace
	  } = color;
	  let {
	    values
	  } = color;
	  if (type.indexOf('rgb') !== -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
	  } else if (type.indexOf('hsl') !== -1) {
	    values[1] = `${values[1]}%`;
	    values[2] = `${values[2]}%`;
	  }
	  if (type.indexOf('color') !== -1) {
	    values = `${colorSpace} ${values.join(' ')}`;
	  } else {
	    values = `${values.join(', ')}`;
	  }
	  return `${type}(${values})`;
	}

	/**
	 * Converts a color from hsl format to rgb format.
	 * @param {string} color - HSL color values
	 * @returns {string} rgb color values
	 */
	function hslToRgb(color) {
	  color = decomposeColor(color);
	  const {
	    values
	  } = color;
	  const h = values[0];
	  const s = values[1] / 100;
	  const l = values[2] / 100;
	  const a = s * Math.min(l, 1 - l);
	  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
	  let type = 'rgb';
	  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
	  if (color.type === 'hsla') {
	    type += 'a';
	    rgb.push(values[3]);
	  }
	  return recomposeColor({
	    type,
	    values: rgb
	  });
	}
	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */
	function getLuminance(color) {
	  color = decomposeColor(color);
	  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
	  rgb = rgb.map(val => {
	    if (color.type !== 'color') {
	      val /= 255; // normalized
	    }

	    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
	  });

	  // Truncate at 3 digits
	  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
	}

	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21.
	 */
	function getContrastRatio(foreground, background) {
	  const lumA = getLuminance(foreground);
	  const lumB = getLuminance(background);
	  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	}

	/**
	 * Sets the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} value - value to set the alpha channel to in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function alpha(color, value) {
	  color = decomposeColor(color);
	  value = clamp$1(value);
	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }
	  if (color.type === 'color') {
	    color.values[3] = `/${value}`;
	  } else {
	    color.values[3] = value;
	  }
	  return recomposeColor(color);
	}

	/**
	 * Darkens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$1(coefficient);
	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }
	  return recomposeColor(color);
	}

	/**
	 * Lightens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$1(coefficient);
	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  } else if (color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (1 - color.values[i]) * coefficient;
	    }
	  }
	  return recomposeColor(color);
	}

	function createMixins(breakpoints, mixins) {
	  return _extends({
	    toolbar: {
	      minHeight: 56,
	      [breakpoints.up('xs')]: {
	        '@media (orientation: landscape)': {
	          minHeight: 48
	        }
	      },
	      [breakpoints.up('sm')]: {
	        minHeight: 64
	      }
	    }
	  }, mixins);
	}

	const _excluded$1G = ["mode", "contrastThreshold", "tonalOffset"];
	const light = {
	  // The colors used to style the text.
	  text: {
	    // The most important text.
	    primary: 'rgba(0, 0, 0, 0.87)',
	    // Secondary text.
	    secondary: 'rgba(0, 0, 0, 0.6)',
	    // Disabled text have even lower visual prominence.
	    disabled: 'rgba(0, 0, 0, 0.38)'
	  },
	  // The color used to divide different elements.
	  divider: 'rgba(0, 0, 0, 0.12)',
	  // The background colors used to style the surfaces.
	  // Consistency between these values is important.
	  background: {
	    paper: common$1.white,
	    default: common$1.white
	  },
	  // The colors used to style the action elements.
	  action: {
	    // The color of an active action like an icon button.
	    active: 'rgba(0, 0, 0, 0.54)',
	    // The color of an hovered action.
	    hover: 'rgba(0, 0, 0, 0.04)',
	    hoverOpacity: 0.04,
	    // The color of a selected action.
	    selected: 'rgba(0, 0, 0, 0.08)',
	    selectedOpacity: 0.08,
	    // The color of a disabled action.
	    disabled: 'rgba(0, 0, 0, 0.26)',
	    // The background color of a disabled action.
	    disabledBackground: 'rgba(0, 0, 0, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(0, 0, 0, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.12
	  }
	};
	const dark = {
	  text: {
	    primary: common$1.white,
	    secondary: 'rgba(255, 255, 255, 0.7)',
	    disabled: 'rgba(255, 255, 255, 0.5)',
	    icon: 'rgba(255, 255, 255, 0.5)'
	  },
	  divider: 'rgba(255, 255, 255, 0.12)',
	  background: {
	    paper: '#121212',
	    default: '#121212'
	  },
	  action: {
	    active: common$1.white,
	    hover: 'rgba(255, 255, 255, 0.08)',
	    hoverOpacity: 0.08,
	    selected: 'rgba(255, 255, 255, 0.16)',
	    selectedOpacity: 0.16,
	    disabled: 'rgba(255, 255, 255, 0.3)',
	    disabledBackground: 'rgba(255, 255, 255, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(255, 255, 255, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.24
	  }
	};
	function addLightOrDark(intent, direction, shade, tonalOffset) {
	  const tonalOffsetLight = tonalOffset.light || tonalOffset;
	  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
	  if (!intent[direction]) {
	    if (intent.hasOwnProperty(shade)) {
	      intent[direction] = intent[shade];
	    } else if (direction === 'light') {
	      intent.light = lighten(intent.main, tonalOffsetLight);
	    } else if (direction === 'dark') {
	      intent.dark = darken(intent.main, tonalOffsetDark);
	    }
	  }
	}
	function getDefaultPrimary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: blue$1[200],
	      light: blue$1[50],
	      dark: blue$1[400]
	    };
	  }
	  return {
	    main: blue$1[700],
	    light: blue$1[400],
	    dark: blue$1[800]
	  };
	}
	function getDefaultSecondary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: purple$1[200],
	      light: purple$1[50],
	      dark: purple$1[400]
	    };
	  }
	  return {
	    main: purple$1[500],
	    light: purple$1[300],
	    dark: purple$1[700]
	  };
	}
	function getDefaultError(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: red$1[500],
	      light: red$1[300],
	      dark: red$1[700]
	    };
	  }
	  return {
	    main: red$1[700],
	    light: red$1[400],
	    dark: red$1[800]
	  };
	}
	function getDefaultInfo(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: lightBlue$1[400],
	      light: lightBlue$1[300],
	      dark: lightBlue$1[700]
	    };
	  }
	  return {
	    main: lightBlue$1[700],
	    light: lightBlue$1[500],
	    dark: lightBlue$1[900]
	  };
	}
	function getDefaultSuccess(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: green$1[400],
	      light: green$1[300],
	      dark: green$1[700]
	    };
	  }
	  return {
	    main: green$1[800],
	    light: green$1[500],
	    dark: green$1[900]
	  };
	}
	function getDefaultWarning(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: orange$1[400],
	      light: orange$1[300],
	      dark: orange$1[700]
	    };
	  }
	  return {
	    main: '#ed6c02',
	    // closest to orange[800] that pass 3:1.
	    light: orange$1[500],
	    dark: orange$1[900]
	  };
	}
	function createPalette(palette) {
	  const {
	      mode = 'light',
	      contrastThreshold = 3,
	      tonalOffset = 0.2
	    } = palette,
	    other = _objectWithoutPropertiesLoose(palette, _excluded$1G);
	  const primary = palette.primary || getDefaultPrimary(mode);
	  const secondary = palette.secondary || getDefaultSecondary(mode);
	  const error = palette.error || getDefaultError(mode);
	  const info = palette.info || getDefaultInfo(mode);
	  const success = palette.success || getDefaultSuccess(mode);
	  const warning = palette.warning || getDefaultWarning(mode);

	  // Use the same logic as
	  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
	  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
	  function getContrastText(background) {
	    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
	    return contrastText;
	  }
	  const augmentColor = ({
	    color,
	    name,
	    mainShade = 500,
	    lightShade = 300,
	    darkShade = 700
	  }) => {
	    color = _extends({}, color);
	    if (!color.main && color[mainShade]) {
	      color.main = color[mainShade];
	    }
	    if (!color.hasOwnProperty('main')) {
	      throw new Error(formatMuiErrorMessage(11, name ? ` (${name})` : '', mainShade));
	    }
	    if (typeof color.main !== 'string') {
	      throw new Error(formatMuiErrorMessage(12, name ? ` (${name})` : '', JSON.stringify(color.main)));
	    }
	    addLightOrDark(color, 'light', lightShade, tonalOffset);
	    addLightOrDark(color, 'dark', darkShade, tonalOffset);
	    if (!color.contrastText) {
	      color.contrastText = getContrastText(color.main);
	    }
	    return color;
	  };
	  const modes = {
	    dark,
	    light
	  };
	  const paletteOutput = deepmerge(_extends({
	    // A collection of common colors.
	    common: _extends({}, common$1),
	    // prevent mutable object.
	    // The palette mode, can be light or dark.
	    mode,
	    // The colors used to represent primary interface elements for a user.
	    primary: augmentColor({
	      color: primary,
	      name: 'primary'
	    }),
	    // The colors used to represent secondary interface elements for a user.
	    secondary: augmentColor({
	      color: secondary,
	      name: 'secondary',
	      mainShade: 'A400',
	      lightShade: 'A200',
	      darkShade: 'A700'
	    }),
	    // The colors used to represent interface elements that the user should be made aware of.
	    error: augmentColor({
	      color: error,
	      name: 'error'
	    }),
	    // The colors used to represent potentially dangerous actions or important messages.
	    warning: augmentColor({
	      color: warning,
	      name: 'warning'
	    }),
	    // The colors used to present information to the user that is neutral and not necessarily important.
	    info: augmentColor({
	      color: info,
	      name: 'info'
	    }),
	    // The colors used to indicate the successful completion of an action that user triggered.
	    success: augmentColor({
	      color: success,
	      name: 'success'
	    }),
	    // The grey colors.
	    grey: grey$1,
	    // Used by `getContrastText()` to maximize the contrast between
	    // the background and the text.
	    contrastThreshold,
	    // Takes a background color and returns the text color that maximizes the contrast.
	    getContrastText,
	    // Generate a rich color object.
	    augmentColor,
	    // Used by the functions below to shift a color's luminance by approximately
	    // two indexes within its tonal palette.
	    // E.g., shift from Red 500 to Red 300 or Red 700.
	    tonalOffset
	  }, modes[mode]), other);
	  return paletteOutput;
	}

	const _excluded$1F = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
	function round$2(value) {
	  return Math.round(value * 1e5) / 1e5;
	}
	const caseAllCaps = {
	  textTransform: 'uppercase'
	};
	const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

	/**
	 * @see @link{https://m2.material.io/design/typography/the-type-system.html}
	 * @see @link{https://m2.material.io/design/typography/understanding-typography.html}
	 */
	function createTypography(palette, typography) {
	  const _ref = typeof typography === 'function' ? typography(palette) : typography,
	    {
	      fontFamily = defaultFontFamily,
	      // The default font size of the Material Specification.
	      fontSize = 14,
	      // px
	      fontWeightLight = 300,
	      fontWeightRegular = 400,
	      fontWeightMedium = 500,
	      fontWeightBold = 700,
	      // Tell MUI what's the font-size on the html element.
	      // 16px is the default font-size used by browsers.
	      htmlFontSize = 16,
	      // Apply the CSS properties to all the variants.
	      allVariants,
	      pxToRem: pxToRem2
	    } = _ref,
	    other = _objectWithoutPropertiesLoose(_ref, _excluded$1F);
	  const coef = fontSize / 14;
	  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
	  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
	    fontFamily,
	    fontWeight,
	    fontSize: pxToRem(size),
	    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
	    lineHeight
	  }, fontFamily === defaultFontFamily ? {
	    letterSpacing: `${round$2(letterSpacing / size)}em`
	  } : {}, casing, allVariants);
	  const variants = {
	    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
	    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
	    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
	    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
	    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
	    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
	    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
	    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
	    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
	    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
	    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
	    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
	    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
	  };
	  return deepmerge(_extends({
	    htmlFontSize,
	    pxToRem,
	    fontFamily,
	    fontSize,
	    fontWeightLight,
	    fontWeightRegular,
	    fontWeightMedium,
	    fontWeightBold
	  }, variants), other, {
	    clone: false // No need to clone deep
	  });
	}

	const shadowKeyUmbraOpacity = 0.2;
	const shadowKeyPenumbraOpacity = 0.14;
	const shadowAmbientShadowOpacity = 0.12;
	function createShadow(...px) {
	  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
	}

	// Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
	const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
	var shadows$1 = shadows;

	const _excluded$1E = ["duration", "easing", "delay"];
	// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
	// to learn the context in which each easing should be used.
	const easing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	};

	// Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
	// to learn when use what timing
	const duration = {
	  shortest: 150,
	  shorter: 200,
	  short: 250,
	  // most basic recommended timing
	  standard: 300,
	  // this is to be used in complex animations
	  complex: 375,
	  // recommended when something is entering screen
	  enteringScreen: 225,
	  // recommended when something is leaving screen
	  leavingScreen: 195
	};
	function formatMs(milliseconds) {
	  return `${Math.round(milliseconds)}ms`;
	}
	function getAutoHeightDuration(height) {
	  if (!height) {
	    return 0;
	  }
	  const constant = height / 36;

	  // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
	  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
	}
	function createTransitions(inputTransitions) {
	  const mergedEasing = _extends({}, easing, inputTransitions.easing);
	  const mergedDuration = _extends({}, duration, inputTransitions.duration);
	  const create = (props = ['all'], options = {}) => {
	    const {
	        duration: durationOption = mergedDuration.standard,
	        easing: easingOption = mergedEasing.easeInOut,
	        delay = 0
	      } = options;
	      _objectWithoutPropertiesLoose(options, _excluded$1E);
	    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
	  };
	  return _extends({
	    getAutoHeightDuration,
	    create
	  }, inputTransitions, {
	    easing: mergedEasing,
	    duration: mergedDuration
	  });
	}

	// We need to centralize the zIndex definitions as they work
	// like global values in the browser.
	const zIndex = {
	  mobileStepper: 1000,
	  fab: 1050,
	  speedDial: 1050,
	  appBar: 1100,
	  drawer: 1200,
	  modal: 1300,
	  snackbar: 1400,
	  tooltip: 1500
	};
	var zIndex$1 = zIndex;

	const _excluded$1D = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
	function createTheme(options = {}, ...args) {
	  const {
	      mixins: mixinsInput = {},
	      palette: paletteInput = {},
	      transitions: transitionsInput = {},
	      typography: typographyInput = {}
	    } = options,
	    other = _objectWithoutPropertiesLoose(options, _excluded$1D);
	  if (options.vars) {
	    throw new Error(formatMuiErrorMessage(18));
	  }
	  const palette = createPalette(paletteInput);
	  const systemTheme = createTheme$1(options);
	  let muiTheme = deepmerge(systemTheme, {
	    mixins: createMixins(systemTheme.breakpoints, mixinsInput),
	    palette,
	    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
	    shadows: shadows$1.slice(),
	    typography: createTypography(palette, typographyInput),
	    transitions: createTransitions(transitionsInput),
	    zIndex: _extends({}, zIndex$1)
	  });
	  muiTheme = deepmerge(muiTheme, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
	  return muiTheme;
	}

	// Ported from Compass
	// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss
	// Emulate the sass function "unit"
	function getUnit(input) {
	  return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
	}

	// Emulate the sass function "unitless"
	function toUnitless(length) {
	  return parseFloat(length);
	}

	const defaultTheme = createTheme();
	var defaultTheme$1 = defaultTheme;

	function useTheme() {
	  const theme = useTheme$1(defaultTheme$1);
	  return theme;
	}

	function useThemeProps({
	  props,
	  name
	}) {
	  return useThemeProps$1({
	    props,
	    name,
	    defaultTheme: defaultTheme$1
	  });
	}

	const rootShouldForwardProp = prop => shouldForwardProp(prop) && prop !== 'classes';
	const slotShouldForwardProp = shouldForwardProp;
	const styled = createStyled({
	  defaultTheme: defaultTheme$1,
	  rootShouldForwardProp
	});
	var styled$1 = styled;

	// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
	const getOverlayAlpha = elevation => {
	  let alphaValue;
	  if (elevation < 1) {
	    alphaValue = 5.11916 * elevation ** 2;
	  } else {
	    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
	  }
	  return (alphaValue / 100).toFixed(2);
	};
	var getOverlayAlpha$1 = getOverlayAlpha;

	/**
	 * Determines if a given element is a DOM element name (i.e. not a React component).
	 */
	function isHostComponent(element) {
	  return typeof element === 'string';
	}

	/**
	 * Type of the ownerState based on the type of an element it applies to.
	 * This resolves to the provided OwnerState for React components and `undefined` for host components.
	 * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.
	 */

	/**
	 * Appends the ownerState object to the props, merging with the existing one if necessary.
	 *
	 * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node, `ownerState` is not applied.
	 * @param otherProps Props of the element.
	 * @param ownerState
	 */
	function appendOwnerState(elementType, otherProps, ownerState) {
	  if (isHostComponent(elementType)) {
	    return otherProps;
	  }
	  return _extends({}, otherProps, {
	    ownerState: _extends({}, otherProps.ownerState, ownerState)
	  });
	}

	/**
	 * Extracts event handlers from a given object.
	 * A prop is considered an event handler if it is a function and its name starts with `on`.
	 *
	 * @param object An object to extract event handlers from.
	 * @param excludeKeys An array of keys to exclude from the returned object.
	 */
	function extractEventHandlers(object, excludeKeys = []) {
	  if (object === undefined) {
	    return {};
	  }
	  const result = {};
	  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	/**
	 * If `componentProps` is a function, calls it with the provided `ownerState`.
	 * Otherwise, just returns `componentProps`.
	 */
	function resolveComponentProps(componentProps, ownerState) {
	  if (typeof componentProps === 'function') {
	    return componentProps(ownerState);
	  }
	  return componentProps;
	}

	/**
	 * Removes event handlers from the given object.
	 * A field is considered an event handler if it is a function with a name beginning with `on`.
	 *
	 * @param object Object to remove event handlers from.
	 * @returns Object with event handlers removed.
	 */
	function omitEventHandlers(object) {
	  if (object === undefined) {
	    return {};
	  }
	  const result = {};
	  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	/**
	 * Merges the slot component internal props (usually coming from a hook)
	 * with the externally provided ones.
	 *
	 * The merge order is (the latter overrides the former):
	 * 1. The internal props (specified as a getter function to work with get*Props hook result)
	 * 2. Additional props (specified internally on an unstyled component)
	 * 3. External props specified on the owner component. These should only be used on a root slot.
	 * 4. External props specified in the `slotProps.*` prop.
	 * 5. The `className` prop - combined from all the above.
	 * @param parameters
	 * @returns
	 */
	function mergeSlotProps(parameters) {
	  const {
	    getSlotProps,
	    additionalProps,
	    externalSlotProps,
	    externalForwardedProps,
	    className
	  } = parameters;
	  if (!getSlotProps) {
	    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,
	    // so we can simply merge all the props without having to worry about extracting event handlers.
	    const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
	    const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
	    const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
	    if (joinedClasses.length > 0) {
	      props.className = joinedClasses;
	    }
	    if (Object.keys(mergedStyle).length > 0) {
	      props.style = mergedStyle;
	    }
	    return {
	      props,
	      internalRef: undefined
	    };
	  }

	  // In this case, getSlotProps is responsible for calling the external event handlers.
	  // We don't need to include them in the merged props because of this.

	  const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));
	  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
	  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
	  const internalSlotProps = getSlotProps(eventHandlers);

	  // The order of classes is important here.
	  // Emotion (that we use in libraries consuming MUI Base) depends on this order
	  // to properly override style. It requires the most important classes to be last
	  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.
	  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
	  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
	  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
	  if (joinedClasses.length > 0) {
	    props.className = joinedClasses;
	  }
	  if (Object.keys(mergedStyle).length > 0) {
	    props.style = mergedStyle;
	  }
	  return {
	    props,
	    internalRef: internalSlotProps.ref
	  };
	}

	const _excluded$1C = ["elementType", "externalSlotProps", "ownerState"];
	/**
	 * Builds the props to be passed into the slot of an unstyled component.
	 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
	 * If the slot component is not a host component, it also merges in the `ownerState`.
	 *
	 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
	 */
	function useSlotProps(parameters) {
	  var _parameters$additiona;
	  const {
	      elementType,
	      externalSlotProps,
	      ownerState
	    } = parameters,
	    rest = _objectWithoutPropertiesLoose(parameters, _excluded$1C);
	  const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);
	  const {
	    props: mergedProps,
	    internalRef
	  } = mergeSlotProps(_extends({}, rest, {
	    externalSlotProps: resolvedComponentsProps
	  }));
	  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
	  const props = appendOwnerState(elementType, _extends({}, mergedProps, {
	    ref
	  }), ownerState);
	  return props;
	}

	// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
	// Give up on IE11 support for this feature
	function stripDiacritics(string) {
	  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
	}
	function createFilterOptions(config = {}) {
	  const {
	    ignoreAccents = true,
	    ignoreCase = true,
	    limit,
	    matchFrom = 'any',
	    stringify,
	    trim = false
	  } = config;
	  return (options, {
	    inputValue,
	    getOptionLabel
	  }) => {
	    let input = trim ? inputValue.trim() : inputValue;
	    if (ignoreCase) {
	      input = input.toLowerCase();
	    }
	    if (ignoreAccents) {
	      input = stripDiacritics(input);
	    }
	    const filteredOptions = !input ? options : options.filter(option => {
	      let candidate = (stringify || getOptionLabel)(option);
	      if (ignoreCase) {
	        candidate = candidate.toLowerCase();
	      }
	      if (ignoreAccents) {
	        candidate = stripDiacritics(candidate);
	      }
	      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
	    });
	    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
	  };
	}

	// To replace with .findIndex() once we stop IE11 support.
	function findIndex(array, comp) {
	  for (let i = 0; i < array.length; i += 1) {
	    if (comp(array[i])) {
	      return i;
	    }
	  }
	  return -1;
	}
	const defaultFilterOptions = createFilterOptions();

	// Number of options to jump in list box when pageup and pagedown keys are used.
	const pageSize = 5;
	const defaultIsActiveElementInListbox = listboxRef => {
	  var _listboxRef$current$p;
	  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
	};
	function useAutocomplete(props) {
	  const {
	    // eslint-disable-next-line @typescript-eslint/naming-convention
	    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
	    // eslint-disable-next-line @typescript-eslint/naming-convention
	    unstable_classNamePrefix = 'Mui',
	    autoComplete = false,
	    autoHighlight = false,
	    autoSelect = false,
	    blurOnSelect = false,
	    clearOnBlur = !props.freeSolo,
	    clearOnEscape = false,
	    componentName = 'useAutocomplete',
	    defaultValue = props.multiple ? [] : null,
	    disableClearable = false,
	    disableCloseOnSelect = false,
	    disabled: disabledProp,
	    disabledItemsFocusable = false,
	    disableListWrap = false,
	    filterOptions = defaultFilterOptions,
	    filterSelectedOptions = false,
	    freeSolo = false,
	    getOptionDisabled,
	    getOptionLabel: getOptionLabelProp = option => {
	      var _option$label;
	      return (_option$label = option.label) != null ? _option$label : option;
	    },
	    groupBy,
	    handleHomeEndKeys = !props.freeSolo,
	    id: idProp,
	    includeInputInList = false,
	    inputValue: inputValueProp,
	    isOptionEqualToValue = (option, value) => option === value,
	    multiple = false,
	    onChange,
	    onClose,
	    onHighlightChange,
	    onInputChange,
	    onOpen,
	    open: openProp,
	    openOnFocus = false,
	    options,
	    readOnly = false,
	    selectOnFocus = !props.freeSolo,
	    value: valueProp
	  } = props;
	  const id = useId(idProp);
	  let getOptionLabel = getOptionLabelProp;
	  getOptionLabel = option => {
	    const optionLabel = getOptionLabelProp(option);
	    if (typeof optionLabel !== 'string') {
	      return String(optionLabel);
	    }
	    return optionLabel;
	  };
	  const ignoreFocus = react.exports.useRef(false);
	  const firstFocus = react.exports.useRef(true);
	  const inputRef = react.exports.useRef(null);
	  const listboxRef = react.exports.useRef(null);
	  const [anchorEl, setAnchorEl] = react.exports.useState(null);
	  const [focusedTag, setFocusedTag] = react.exports.useState(-1);
	  const defaultHighlighted = autoHighlight ? 0 : -1;
	  const highlightedIndexRef = react.exports.useRef(defaultHighlighted);
	  const [value, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: componentName
	  });
	  const [inputValue, setInputValueState] = useControlled({
	    controlled: inputValueProp,
	    default: '',
	    name: componentName,
	    state: 'inputValue'
	  });
	  const [focused, setFocused] = react.exports.useState(false);
	  const resetInputValue = react.exports.useCallback((event, newValue) => {
	    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false
	    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item
	    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
	    if (!isOptionSelected && !clearOnBlur) {
	      return;
	    }
	    let newInputValue;
	    if (multiple) {
	      newInputValue = '';
	    } else if (newValue == null) {
	      newInputValue = '';
	    } else {
	      const optionLabel = getOptionLabel(newValue);
	      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
	    }
	    if (inputValue === newInputValue) {
	      return;
	    }
	    setInputValueState(newInputValue);
	    if (onInputChange) {
	      onInputChange(event, newInputValue, 'reset');
	    }
	  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
	  const prevValue = react.exports.useRef();
	  react.exports.useEffect(() => {
	    const valueChange = value !== prevValue.current;
	    prevValue.current = value;
	    if (focused && !valueChange) {
	      return;
	    }

	    // Only reset the input's value when freeSolo if the component's value changes.
	    if (freeSolo && !valueChange) {
	      return;
	    }
	    resetInputValue(null, value);
	  }, [value, resetInputValue, focused, prevValue, freeSolo]);
	  const [open, setOpenState] = useControlled({
	    controlled: openProp,
	    default: false,
	    name: componentName,
	    state: 'open'
	  });
	  const [inputPristine, setInputPristine] = react.exports.useState(true);
	  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
	  const popupOpen = open && !readOnly;
	  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {
	    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {
	      return false;
	    }
	    return true;
	  }),
	  // we use the empty string to manipulate `filterOptions` to not filter any options
	  // i.e. the filter predicate always returns true
	  {
	    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,
	    getOptionLabel
	  }) : [];
	  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
	  const focusTag = useEventCallback(tagToFocus => {
	    if (tagToFocus === -1) {
	      inputRef.current.focus();
	    } else {
	      anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
	    }
	  });

	  // Ensure the focusedTag is never inconsistent
	  react.exports.useEffect(() => {
	    if (multiple && focusedTag > value.length - 1) {
	      setFocusedTag(-1);
	      focusTag(-1);
	    }
	  }, [value, multiple, focusedTag, focusTag]);
	  function validOptionIndex(index, direction) {
	    if (!listboxRef.current || index === -1) {
	      return -1;
	    }
	    let nextFocus = index;
	    while (true) {
	      // Out of range
	      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {
	        return -1;
	      }
	      const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);

	      // Same logic as MenuList.js
	      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';
	      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {
	        // Move to the next element.
	        nextFocus += direction === 'next' ? 1 : -1;
	      } else {
	        return nextFocus;
	      }
	    }
	  }
	  const setHighlightedIndex = useEventCallback(({
	    event,
	    index,
	    reason = 'auto'
	  }) => {
	    highlightedIndexRef.current = index;

	    // does the index exist?
	    if (index === -1) {
	      inputRef.current.removeAttribute('aria-activedescendant');
	    } else {
	      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);
	    }
	    if (onHighlightChange) {
	      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
	    }
	    if (!listboxRef.current) {
	      return;
	    }
	    const prev = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
	    if (prev) {
	      prev.classList.remove(`${unstable_classNamePrefix}-focused`);
	      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
	    }
	    const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');

	    // "No results"
	    if (!listboxNode) {
	      return;
	    }
	    if (index === -1) {
	      listboxNode.scrollTop = 0;
	      return;
	    }
	    const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
	    if (!option) {
	      return;
	    }
	    option.classList.add(`${unstable_classNamePrefix}-focused`);
	    if (reason === 'keyboard') {
	      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
	    }

	    // Scroll active descendant into view.
	    // Logic copied from https://www.w3.org/WAI/ARIA/apg/example-index/combobox/js/select-only.js
	    //
	    // Consider this API instead once it has a better browser support:
	    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });
	    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
	      const element = option;
	      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
	      const elementBottom = element.offsetTop + element.offsetHeight;
	      if (elementBottom > scrollBottom) {
	        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
	      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
	        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
	      }
	    }
	  });
	  const changeHighlightedIndex = useEventCallback(({
	    event,
	    diff,
	    direction = 'next',
	    reason = 'auto'
	  }) => {
	    if (!popupOpen) {
	      return;
	    }
	    const getNextIndex = () => {
	      const maxIndex = filteredOptions.length - 1;
	      if (diff === 'reset') {
	        return defaultHighlighted;
	      }
	      if (diff === 'start') {
	        return 0;
	      }
	      if (diff === 'end') {
	        return maxIndex;
	      }
	      const newIndex = highlightedIndexRef.current + diff;
	      if (newIndex < 0) {
	        if (newIndex === -1 && includeInputInList) {
	          return -1;
	        }
	        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
	          return 0;
	        }
	        return maxIndex;
	      }
	      if (newIndex > maxIndex) {
	        if (newIndex === maxIndex + 1 && includeInputInList) {
	          return -1;
	        }
	        if (disableListWrap || Math.abs(diff) > 1) {
	          return maxIndex;
	        }
	        return 0;
	      }
	      return newIndex;
	    };
	    const nextIndex = validOptionIndex(getNextIndex(), direction);
	    setHighlightedIndex({
	      index: nextIndex,
	      reason,
	      event
	    });

	    // Sync the content of the input with the highlighted option.
	    if (autoComplete && diff !== 'reset') {
	      if (nextIndex === -1) {
	        inputRef.current.value = inputValue;
	      } else {
	        const option = getOptionLabel(filteredOptions[nextIndex]);
	        inputRef.current.value = option;

	        // The portion of the selected suggestion that has not been typed by the user,
	        // a completion string, appears inline after the input cursor in the textbox.
	        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
	        if (index === 0 && inputValue.length > 0) {
	          inputRef.current.setSelectionRange(inputValue.length, option.length);
	        }
	      }
	    }
	  });
	  const syncHighlightedIndex = react.exports.useCallback(() => {
	    if (!popupOpen) {
	      return;
	    }
	    const valueItem = multiple ? value[0] : value;

	    // The popup is empty, reset
	    if (filteredOptions.length === 0 || valueItem == null) {
	      changeHighlightedIndex({
	        diff: 'reset'
	      });
	      return;
	    }
	    if (!listboxRef.current) {
	      return;
	    }

	    // Synchronize the value with the highlighted index
	    if (valueItem != null) {
	      const currentOption = filteredOptions[highlightedIndexRef.current];

	      // Keep the current highlighted index if possible
	      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {
	        return;
	      }
	      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));
	      if (itemIndex === -1) {
	        changeHighlightedIndex({
	          diff: 'reset'
	        });
	      } else {
	        setHighlightedIndex({
	          index: itemIndex
	        });
	      }
	      return;
	    }

	    // Prevent the highlighted index to leak outside the boundaries.
	    if (highlightedIndexRef.current >= filteredOptions.length - 1) {
	      setHighlightedIndex({
	        index: filteredOptions.length - 1
	      });
	      return;
	    }

	    // Restore the focus to the previous index.
	    setHighlightedIndex({
	      index: highlightedIndexRef.current
	    });
	    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [
	  // Only sync the highlighted index when the option switch between empty and not
	  filteredOptions.length,
	  // Don't sync the highlighted index with the value when multiple
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);
	  const handleListboxRef = useEventCallback(node => {
	    setRef(listboxRef, node);
	    if (!node) {
	      return;
	    }
	    syncHighlightedIndex();
	  });
	  react.exports.useEffect(() => {
	    syncHighlightedIndex();
	  }, [syncHighlightedIndex]);
	  const handleOpen = event => {
	    if (open) {
	      return;
	    }
	    setOpenState(true);
	    setInputPristine(true);
	    if (onOpen) {
	      onOpen(event);
	    }
	  };
	  const handleClose = (event, reason) => {
	    if (!open) {
	      return;
	    }
	    setOpenState(false);
	    if (onClose) {
	      onClose(event, reason);
	    }
	  };
	  const handleValue = (event, newValue, reason, details) => {
	    if (multiple) {
	      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
	        return;
	      }
	    } else if (value === newValue) {
	      return;
	    }
	    if (onChange) {
	      onChange(event, newValue, reason, details);
	    }
	    setValueState(newValue);
	  };
	  const isTouch = react.exports.useRef(false);
	  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {
	    let reason = reasonProp;
	    let newValue = option;
	    if (multiple) {
	      newValue = Array.isArray(value) ? value.slice() : [];
	      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));
	      if (itemIndex === -1) {
	        newValue.push(option);
	      } else if (origin !== 'freeSolo') {
	        newValue.splice(itemIndex, 1);
	        reason = 'removeOption';
	      }
	    }
	    resetInputValue(event, newValue);
	    handleValue(event, newValue, reason, {
	      option
	    });
	    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
	      handleClose(event, reason);
	    }
	    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {
	      inputRef.current.blur();
	    }
	  };
	  function validTagIndex(index, direction) {
	    if (index === -1) {
	      return -1;
	    }
	    let nextFocus = index;
	    while (true) {
	      // Out of range
	      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {
	        return -1;
	      }
	      const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);

	      // Same logic as MenuList.js
	      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {
	        nextFocus += direction === 'next' ? 1 : -1;
	      } else {
	        return nextFocus;
	      }
	    }
	  }
	  const handleFocusTag = (event, direction) => {
	    if (!multiple) {
	      return;
	    }
	    if (inputValue === '') {
	      handleClose(event, 'toggleInput');
	    }
	    let nextTag = focusedTag;
	    if (focusedTag === -1) {
	      if (inputValue === '' && direction === 'previous') {
	        nextTag = value.length - 1;
	      }
	    } else {
	      nextTag += direction === 'next' ? 1 : -1;
	      if (nextTag < 0) {
	        nextTag = 0;
	      }
	      if (nextTag === value.length) {
	        nextTag = -1;
	      }
	    }
	    nextTag = validTagIndex(nextTag, direction);
	    setFocusedTag(nextTag);
	    focusTag(nextTag);
	  };
	  const handleClear = event => {
	    ignoreFocus.current = true;
	    setInputValueState('');
	    if (onInputChange) {
	      onInputChange(event, '', 'clear');
	    }
	    handleValue(event, multiple ? [] : null, 'clear');
	  };
	  const handleKeyDown = other => event => {
	    if (other.onKeyDown) {
	      other.onKeyDown(event);
	    }
	    if (event.defaultMuiPrevented) {
	      return;
	    }
	    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {
	      setFocusedTag(-1);
	      focusTag(-1);
	    }

	    // Wait until IME is settled.
	    if (event.which !== 229) {
	      switch (event.key) {
	        case 'Home':
	          if (popupOpen && handleHomeEndKeys) {
	            // Prevent scroll of the page
	            event.preventDefault();
	            changeHighlightedIndex({
	              diff: 'start',
	              direction: 'next',
	              reason: 'keyboard',
	              event
	            });
	          }
	          break;
	        case 'End':
	          if (popupOpen && handleHomeEndKeys) {
	            // Prevent scroll of the page
	            event.preventDefault();
	            changeHighlightedIndex({
	              diff: 'end',
	              direction: 'previous',
	              reason: 'keyboard',
	              event
	            });
	          }
	          break;
	        case 'PageUp':
	          // Prevent scroll of the page
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: -pageSize,
	            direction: 'previous',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;
	        case 'PageDown':
	          // Prevent scroll of the page
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: pageSize,
	            direction: 'next',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;
	        case 'ArrowDown':
	          // Prevent cursor move
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: 1,
	            direction: 'next',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;
	        case 'ArrowUp':
	          // Prevent cursor move
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: -1,
	            direction: 'previous',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;
	        case 'ArrowLeft':
	          handleFocusTag(event, 'previous');
	          break;
	        case 'ArrowRight':
	          handleFocusTag(event, 'next');
	          break;
	        case 'Enter':
	          if (highlightedIndexRef.current !== -1 && popupOpen) {
	            const option = filteredOptions[highlightedIndexRef.current];
	            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;

	            // Avoid early form validation, let the end-users continue filling the form.
	            event.preventDefault();
	            if (disabled) {
	              return;
	            }
	            selectNewValue(event, option, 'selectOption');

	            // Move the selection to the end.
	            if (autoComplete) {
	              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
	            }
	          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
	            if (multiple) {
	              // Allow people to add new values before they submit the form.
	              event.preventDefault();
	            }
	            selectNewValue(event, inputValue, 'createOption', 'freeSolo');
	          }
	          break;
	        case 'Escape':
	          if (popupOpen) {
	            // Avoid Opera to exit fullscreen mode.
	            event.preventDefault();
	            // Avoid the Modal to handle the event.
	            event.stopPropagation();
	            handleClose(event, 'escape');
	          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
	            // Avoid Opera to exit fullscreen mode.
	            event.preventDefault();
	            // Avoid the Modal to handle the event.
	            event.stopPropagation();
	            handleClear(event);
	          }
	          break;
	        case 'Backspace':
	          if (multiple && !readOnly && inputValue === '' && value.length > 0) {
	            const index = focusedTag === -1 ? value.length - 1 : focusedTag;
	            const newValue = value.slice();
	            newValue.splice(index, 1);
	            handleValue(event, newValue, 'removeOption', {
	              option: value[index]
	            });
	          }
	          break;
	        case 'Delete':
	          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {
	            const index = focusedTag;
	            const newValue = value.slice();
	            newValue.splice(index, 1);
	            handleValue(event, newValue, 'removeOption', {
	              option: value[index]
	            });
	          }
	          break;
	      }
	    }
	  };
	  const handleFocus = event => {
	    setFocused(true);
	    if (openOnFocus && !ignoreFocus.current) {
	      handleOpen(event);
	    }
	  };
	  const handleBlur = event => {
	    // Ignore the event when using the scrollbar with IE11
	    if (unstable_isActiveElementInListbox(listboxRef)) {
	      inputRef.current.focus();
	      return;
	    }
	    setFocused(false);
	    firstFocus.current = true;
	    ignoreFocus.current = false;
	    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
	      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
	    } else if (autoSelect && freeSolo && inputValue !== '') {
	      selectNewValue(event, inputValue, 'blur', 'freeSolo');
	    } else if (clearOnBlur) {
	      resetInputValue(event, value);
	    }
	    handleClose(event, 'blur');
	  };
	  const handleInputChange = event => {
	    const newValue = event.target.value;
	    if (inputValue !== newValue) {
	      setInputValueState(newValue);
	      setInputPristine(false);
	      if (onInputChange) {
	        onInputChange(event, newValue, 'input');
	      }
	    }
	    if (newValue === '') {
	      if (!disableClearable && !multiple) {
	        handleValue(event, null, 'clear');
	      }
	    } else {
	      handleOpen(event);
	    }
	  };
	  const handleOptionMouseOver = event => {
	    setHighlightedIndex({
	      event,
	      index: Number(event.currentTarget.getAttribute('data-option-index')),
	      reason: 'mouse'
	    });
	  };
	  const handleOptionTouchStart = () => {
	    isTouch.current = true;
	  };
	  const handleOptionClick = event => {
	    const index = Number(event.currentTarget.getAttribute('data-option-index'));
	    selectNewValue(event, filteredOptions[index], 'selectOption');
	    isTouch.current = false;
	  };
	  const handleTagDelete = index => event => {
	    const newValue = value.slice();
	    newValue.splice(index, 1);
	    handleValue(event, newValue, 'removeOption', {
	      option: value[index]
	    });
	  };
	  const handlePopupIndicator = event => {
	    if (open) {
	      handleClose(event, 'toggleInput');
	    } else {
	      handleOpen(event);
	    }
	  };

	  // Prevent input blur when interacting with the combobox
	  const handleMouseDown = event => {
	    if (event.target.getAttribute('id') !== id) {
	      event.preventDefault();
	    }
	  };

	  // Focus the input when interacting with the combobox
	  const handleClick = () => {
	    inputRef.current.focus();
	    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
	      inputRef.current.select();
	    }
	    firstFocus.current = false;
	  };
	  const handleInputMouseDown = event => {
	    if (inputValue === '' || !open) {
	      handlePopupIndicator(event);
	    }
	  };
	  let dirty = freeSolo && inputValue.length > 0;
	  dirty = dirty || (multiple ? value.length > 0 : value !== null);
	  let groupedOptions = filteredOptions;
	  if (groupBy) {
	    groupedOptions = filteredOptions.reduce((acc, option, index) => {
	      const group = groupBy(option);
	      if (acc.length > 0 && acc[acc.length - 1].group === group) {
	        acc[acc.length - 1].options.push(option);
	      } else {
	        acc.push({
	          key: index,
	          index,
	          group,
	          options: [option]
	        });
	      }
	      return acc;
	    }, []);
	  }
	  if (disabledProp && focused) {
	    handleBlur();
	  }
	  return {
	    getRootProps: (other = {}) => _extends({
	      'aria-owns': listboxAvailable ? `${id}-listbox` : null
	    }, other, {
	      onKeyDown: handleKeyDown(other),
	      onMouseDown: handleMouseDown,
	      onClick: handleClick
	    }),
	    getInputLabelProps: () => ({
	      id: `${id}-label`,
	      htmlFor: id
	    }),
	    getInputProps: () => ({
	      id,
	      value: inputValue,
	      onBlur: handleBlur,
	      onFocus: handleFocus,
	      onChange: handleInputChange,
	      onMouseDown: handleInputMouseDown,
	      // if open then this is handled imperativeley so don't let react override
	      // only have an opinion about this when closed
	      'aria-activedescendant': popupOpen ? '' : null,
	      'aria-autocomplete': autoComplete ? 'both' : 'list',
	      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,
	      'aria-expanded': listboxAvailable,
	      // Disable browser's suggestion that might overlap with the popup.
	      // Handle autocomplete but not autofill.
	      autoComplete: 'off',
	      ref: inputRef,
	      autoCapitalize: 'none',
	      spellCheck: 'false',
	      role: 'combobox'
	    }),
	    getClearProps: () => ({
	      tabIndex: -1,
	      onClick: handleClear
	    }),
	    getPopupIndicatorProps: () => ({
	      tabIndex: -1,
	      onClick: handlePopupIndicator
	    }),
	    getTagProps: ({
	      index
	    }) => _extends({
	      key: index,
	      'data-tag-index': index,
	      tabIndex: -1
	    }, !readOnly && {
	      onDelete: handleTagDelete(index)
	    }),
	    getListboxProps: () => ({
	      role: 'listbox',
	      id: `${id}-listbox`,
	      'aria-labelledby': `${id}-label`,
	      ref: handleListboxRef,
	      onMouseDown: event => {
	        // Prevent blur
	        event.preventDefault();
	      }
	    }),
	    getOptionProps: ({
	      index,
	      option
	    }) => {
	      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));
	      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
	      return {
	        key: getOptionLabel(option),
	        tabIndex: -1,
	        role: 'option',
	        id: `${id}-option-${index}`,
	        onMouseOver: handleOptionMouseOver,
	        onClick: handleOptionClick,
	        onTouchStart: handleOptionTouchStart,
	        'data-option-index': index,
	        'aria-disabled': disabled,
	        'aria-selected': selected
	      };
	    },
	    id,
	    inputValue,
	    value,
	    dirty,
	    popupOpen,
	    focused: focused || focusedTag !== -1,
	    anchorEl,
	    setAnchorEl,
	    focusedTag,
	    groupedOptions
	  };
	}

	function useBadge(parameters) {
	  const {
	    badgeContent: badgeContentProp,
	    invisible: invisibleProp = false,
	    max: maxProp = 99,
	    showZero = false
	  } = parameters;
	  const prevProps = usePreviousProps$1({
	    badgeContent: badgeContentProp,
	    max: maxProp
	  });
	  let invisible = invisibleProp;
	  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
	    invisible = true;
	  }
	  const {
	    badgeContent,
	    max = maxProp
	  } = invisible ? prevProps : parameters;
	  const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
	  return {
	    badgeContent,
	    invisible,
	    max,
	    displayValue
	  };
	}

	function getBadgeUnstyledUtilityClass(slot) {
	  return generateUtilityClass('MuiBadge', slot);
	}
	generateUtilityClasses('MuiBadge', ['root', 'badge', 'invisible']);

	const _excluded$1B = ["badgeContent", "component", "children", "invisible", "max", "slotProps", "slots", "showZero"];
	const useUtilityClasses$1c = ownerState => {
	  const {
	    invisible
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    badge: ['badge', invisible && 'invisible']
	  };
	  return composeClasses(slots, getBadgeUnstyledUtilityClass, undefined);
	};
	/**
	 *
	 * Demos:
	 *
	 * - [Unstyled badge](https://mui.com/base/react-badge/)
	 *
	 * API:
	 *
	 * - [BadgeUnstyled API](https://mui.com/base/api/badge-unstyled/)
	 */
	const BadgeUnstyled = /*#__PURE__*/react.exports.forwardRef(function BadgeUnstyled(props, ref) {
	  const {
	      component,
	      children,
	      max: maxProp = 99,
	      slotProps = {},
	      slots = {},
	      showZero = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1B);
	  const {
	    badgeContent,
	    max,
	    displayValue,
	    invisible
	  } = useBadge(_extends({}, props, {
	    max: maxProp
	  }));
	  const ownerState = _extends({}, props, {
	    badgeContent,
	    invisible,
	    max,
	    showZero
	  });
	  const classes = useUtilityClasses$1c(ownerState);
	  const Root = component || slots.root || 'span';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: slotProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref
	    },
	    ownerState,
	    className: classes.root
	  });
	  const Badge = slots.badge || 'span';
	  const badgeProps = useSlotProps({
	    elementType: Badge,
	    externalSlotProps: slotProps.badge,
	    ownerState,
	    className: classes.badge
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
	    children: [children, /*#__PURE__*/jsxRuntime.exports.jsx(Badge, _extends({}, badgeProps, {
	      children: displayValue
	    }))]
	  }));
	});
	var BadgeUnstyled$1 = BadgeUnstyled;

	function mapEventPropToEvent(eventProp) {
	  return eventProp.substring(2).toLowerCase();
	}
	function clickedRootScrollbar(event, doc) {
	  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
	}
	/**
	 * Listen for click events that occur somewhere in the document, outside of the element itself.
	 * For instance, if you need to hide a menu when people click anywhere else on your page.
	 *
	 * Demos:
	 *
	 * - [Click-Away Listener](https://mui.com/base/react-click-away-listener/)
	 *
	 * API:
	 *
	 * - [ClickAwayListener API](https://mui.com/base/api/click-away-listener/)
	 */
	function ClickAwayListener(props) {
	  const {
	    children,
	    disableReactTree = false,
	    mouseEvent = 'onClick',
	    onClickAway,
	    touchEvent = 'onTouchEnd'
	  } = props;
	  const movedRef = react.exports.useRef(false);
	  const nodeRef = react.exports.useRef(null);
	  const activatedRef = react.exports.useRef(false);
	  const syntheticEventRef = react.exports.useRef(false);
	  react.exports.useEffect(() => {
	    // Ensure that this component is not "activated" synchronously.
	    // https://github.com/facebook/react/issues/20074
	    setTimeout(() => {
	      activatedRef.current = true;
	    }, 0);
	    return () => {
	      activatedRef.current = false;
	    };
	  }, []);
	  const handleRef = useForkRef(
	  // @ts-expect-error TODO upstream fix
	  children.ref, nodeRef);

	  // The handler doesn't take event.defaultPrevented into account:
	  //
	  // event.preventDefault() is meant to stop default behaviors like
	  // clicking a checkbox to check it, hitting a button to submit a form,
	  // and hitting left arrow to move the cursor in a text input etc.
	  // Only special HTML elements have these default behaviors.
	  const handleClickAway = useEventCallback(event => {
	    // Given developers can stop the propagation of the synthetic event,
	    // we can only be confident with a positive value.
	    const insideReactTree = syntheticEventRef.current;
	    syntheticEventRef.current = false;
	    const doc = ownerDocument(nodeRef.current);

	    // 1. IE11 support, which trigger the handleClickAway even after the unbind
	    // 2. The child might render null.
	    // 3. Behave like a blur listener.
	    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {
	      return;
	    }

	    // Do not act if user performed touchmove
	    if (movedRef.current) {
	      movedRef.current = false;
	      return;
	    }
	    let insideDOM;

	    // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js
	    if (event.composedPath) {
	      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
	    } else {
	      insideDOM = !doc.documentElement.contains(
	      // @ts-expect-error returns `false` as intended when not dispatched from a Node
	      event.target) || nodeRef.current.contains(
	      // @ts-expect-error returns `false` as intended when not dispatched from a Node
	      event.target);
	    }
	    if (!insideDOM && (disableReactTree || !insideReactTree)) {
	      onClickAway(event);
	    }
	  });

	  // Keep track of mouse/touch events that bubbled up through the portal.
	  const createHandleSynthetic = handlerName => event => {
	    syntheticEventRef.current = true;
	    const childrenPropsHandler = children.props[handlerName];
	    if (childrenPropsHandler) {
	      childrenPropsHandler(event);
	    }
	  };
	  const childrenProps = {
	    ref: handleRef
	  };
	  if (touchEvent !== false) {
	    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
	  }
	  react.exports.useEffect(() => {
	    if (touchEvent !== false) {
	      const mappedTouchEvent = mapEventPropToEvent(touchEvent);
	      const doc = ownerDocument(nodeRef.current);
	      const handleTouchMove = () => {
	        movedRef.current = true;
	      };
	      doc.addEventListener(mappedTouchEvent, handleClickAway);
	      doc.addEventListener('touchmove', handleTouchMove);
	      return () => {
	        doc.removeEventListener(mappedTouchEvent, handleClickAway);
	        doc.removeEventListener('touchmove', handleTouchMove);
	      };
	    }
	    return undefined;
	  }, [handleClickAway, touchEvent]);
	  if (mouseEvent !== false) {
	    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
	  }
	  react.exports.useEffect(() => {
	    if (mouseEvent !== false) {
	      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
	      const doc = ownerDocument(nodeRef.current);
	      doc.addEventListener(mappedMouseEvent, handleClickAway);
	      return () => {
	        doc.removeEventListener(mappedMouseEvent, handleClickAway);
	      };
	    }
	    return undefined;
	  }, [handleClickAway, mouseEvent]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(react.exports.Fragment, {
	    children: /*#__PURE__*/react.exports.cloneElement(children, childrenProps)
	  });
	}

	/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */
	const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');
	function getTabIndex(node) {
	  const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
	  if (!Number.isNaN(tabindexAttr)) {
	    return tabindexAttr;
	  }

	  // Browsers do not return `tabIndex` correctly for contentEditable nodes;
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
	  // so if they don't have a tabindex attribute specifically set, assume it's 0.
	  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
	  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
	  //  yet they are still part of the regular tab order; in FF, they get a default
	  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
	  //  order, consider their tab index to be 0.
	  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
	    return 0;
	  }
	  return node.tabIndex;
	}
	function isNonTabbableRadio(node) {
	  if (node.tagName !== 'INPUT' || node.type !== 'radio') {
	    return false;
	  }
	  if (!node.name) {
	    return false;
	  }
	  const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
	  let roving = getRadio(`[name="${node.name}"]:checked`);
	  if (!roving) {
	    roving = getRadio(`[name="${node.name}"]`);
	  }
	  return roving !== node;
	}
	function isNodeMatchingSelectorFocusable(node) {
	  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
	    return false;
	  }
	  return true;
	}
	function defaultGetTabbable(root) {
	  const regularTabNodes = [];
	  const orderedTabNodes = [];
	  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
	    const nodeTabIndex = getTabIndex(node);
	    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
	      return;
	    }
	    if (nodeTabIndex === 0) {
	      regularTabNodes.push(node);
	    } else {
	      orderedTabNodes.push({
	        documentOrder: i,
	        tabIndex: nodeTabIndex,
	        node
	      });
	    }
	  });
	  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
	}
	function defaultIsEnabled() {
	  return true;
	}

	/**
	 * Utility component that locks focus inside the component.
	 */
	function FocusTrap(props) {
	  const {
	    children,
	    disableAutoFocus = false,
	    disableEnforceFocus = false,
	    disableRestoreFocus = false,
	    getTabbable = defaultGetTabbable,
	    isEnabled = defaultIsEnabled,
	    open
	  } = props;
	  const ignoreNextEnforceFocus = react.exports.useRef();
	  const sentinelStart = react.exports.useRef(null);
	  const sentinelEnd = react.exports.useRef(null);
	  const nodeToRestore = react.exports.useRef(null);
	  const reactFocusEventTarget = react.exports.useRef(null);
	  // This variable is useful when disableAutoFocus is true.
	  // It waits for the active element to move into the component to activate.
	  const activated = react.exports.useRef(false);
	  const rootRef = react.exports.useRef(null);
	  const handleRef = useForkRef(children.ref, rootRef);
	  const lastKeydown = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }
	    activated.current = !disableAutoFocus;
	  }, [disableAutoFocus, open]);
	  react.exports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }
	    const doc = ownerDocument(rootRef.current);
	    if (!rootRef.current.contains(doc.activeElement)) {
	      if (!rootRef.current.hasAttribute('tabIndex')) {
	        rootRef.current.setAttribute('tabIndex', -1);
	      }
	      if (activated.current) {
	        rootRef.current.focus();
	      }
	    }
	    return () => {
	      // restoreLastFocus()
	      if (!disableRestoreFocus) {
	        // In IE11 it is possible for document.activeElement to be null resulting
	        // in nodeToRestore.current being null.
	        // Not all elements in IE11 have a focus method.
	        // Once IE11 support is dropped the focus() call can be unconditional.
	        if (nodeToRestore.current && nodeToRestore.current.focus) {
	          ignoreNextEnforceFocus.current = true;
	          nodeToRestore.current.focus();
	        }
	        nodeToRestore.current = null;
	      }
	    };
	    // Missing `disableRestoreFocus` which is fine.
	    // We don't support changing that prop on an open FocusTrap
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [open]);
	  react.exports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }
	    const doc = ownerDocument(rootRef.current);
	    const contain = nativeEvent => {
	      const {
	        current: rootElement
	      } = rootRef;
	      // Cleanup functions are executed lazily in React 17.
	      // Contain can be called between the component being unmounted and its cleanup function being run.
	      if (rootElement === null) {
	        return;
	      }
	      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
	        ignoreNextEnforceFocus.current = false;
	        return;
	      }
	      if (!rootElement.contains(doc.activeElement)) {
	        // if the focus event is not coming from inside the children's react tree, reset the refs
	        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
	          reactFocusEventTarget.current = null;
	        } else if (reactFocusEventTarget.current !== null) {
	          return;
	        }
	        if (!activated.current) {
	          return;
	        }
	        let tabbable = [];
	        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
	          tabbable = getTabbable(rootRef.current);
	        }
	        if (tabbable.length > 0) {
	          var _lastKeydown$current, _lastKeydown$current2;
	          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
	          const focusNext = tabbable[0];
	          const focusPrevious = tabbable[tabbable.length - 1];
	          if (isShiftTab) {
	            focusPrevious.focus();
	          } else {
	            focusNext.focus();
	          }
	        } else {
	          rootElement.focus();
	        }
	      }
	    };
	    const loopFocus = nativeEvent => {
	      lastKeydown.current = nativeEvent;
	      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
	        return;
	      }

	      // Make sure the next tab starts from the right place.
	      // doc.activeElement referes to the origin.
	      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
	        // We need to ignore the next contain as
	        // it will try to move the focus back to the rootRef element.
	        ignoreNextEnforceFocus.current = true;
	        sentinelEnd.current.focus();
	      }
	    };
	    doc.addEventListener('focusin', contain);
	    doc.addEventListener('keydown', loopFocus, true);

	    // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
	    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
	    // Instead, we can look if the active element was restored on the BODY element.
	    //
	    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
	    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
	    const interval = setInterval(() => {
	      if (doc.activeElement.tagName === 'BODY') {
	        contain();
	      }
	    }, 50);
	    return () => {
	      clearInterval(interval);
	      doc.removeEventListener('focusin', contain);
	      doc.removeEventListener('keydown', loopFocus, true);
	    };
	  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
	  const onFocus = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }
	    activated.current = true;
	    reactFocusEventTarget.current = event.target;
	    const childrenPropsHandler = children.props.onFocus;
	    if (childrenPropsHandler) {
	      childrenPropsHandler(event);
	    }
	  };
	  const handleFocusSentinel = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }
	    activated.current = true;
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx("div", {
	      tabIndex: open ? 0 : -1,
	      onFocus: handleFocusSentinel,
	      ref: sentinelStart,
	      "data-testid": "sentinelStart"
	    }), /*#__PURE__*/react.exports.cloneElement(children, {
	      ref: handleRef,
	      onFocus
	    }), /*#__PURE__*/jsxRuntime.exports.jsx("div", {
	      tabIndex: open ? 0 : -1,
	      onFocus: handleFocusSentinel,
	      ref: sentinelEnd,
	      "data-testid": "sentinelEnd"
	    })]
	  });
	}

	var top = 'top';
	var bottom = 'bottom';
	var right = 'right';
	var left = 'left';
	var auto = 'auto';
	var basePlacements = [top, bottom, right, left];
	var start = 'start';
	var end = 'end';
	var clippingParents = 'clippingParents';
	var viewport = 'viewport';
	var popper = 'popper';
	var reference = 'reference';
	var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
	  return acc.concat([placement + "-" + start, placement + "-" + end]);
	}, []);
	var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
	  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
	}, []); // modifiers that need to read the DOM

	var beforeRead = 'beforeRead';
	var read = 'read';
	var afterRead = 'afterRead'; // pure-logic modifiers

	var beforeMain = 'beforeMain';
	var main = 'main';
	var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

	var beforeWrite = 'beforeWrite';
	var write = 'write';
	var afterWrite = 'afterWrite';
	var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

	function getNodeName(element) {
	  return element ? (element.nodeName || '').toLowerCase() : null;
	}

	function getWindow(node) {
	  if (node == null) {
	    return window;
	  }

	  if (node.toString() !== '[object Window]') {
	    var ownerDocument = node.ownerDocument;
	    return ownerDocument ? ownerDocument.defaultView || window : window;
	  }

	  return node;
	}

	function isElement(node) {
	  var OwnElement = getWindow(node).Element;
	  return node instanceof OwnElement || node instanceof Element;
	}

	function isHTMLElement(node) {
	  var OwnElement = getWindow(node).HTMLElement;
	  return node instanceof OwnElement || node instanceof HTMLElement;
	}

	function isShadowRoot(node) {
	  // IE 11 has no ShadowRoot
	  if (typeof ShadowRoot === 'undefined') {
	    return false;
	  }

	  var OwnElement = getWindow(node).ShadowRoot;
	  return node instanceof OwnElement || node instanceof ShadowRoot;
	}

	// and applies them to the HTMLElements such as popper and arrow

	function applyStyles(_ref) {
	  var state = _ref.state;
	  Object.keys(state.elements).forEach(function (name) {
	    var style = state.styles[name] || {};
	    var attributes = state.attributes[name] || {};
	    var element = state.elements[name]; // arrow is optional + virtual elements

	    if (!isHTMLElement(element) || !getNodeName(element)) {
	      return;
	    } // Flow doesn't support to extend this property, but it's the most
	    // effective way to apply styles to an HTMLElement
	    // $FlowFixMe[cannot-write]


	    Object.assign(element.style, style);
	    Object.keys(attributes).forEach(function (name) {
	      var value = attributes[name];

	      if (value === false) {
	        element.removeAttribute(name);
	      } else {
	        element.setAttribute(name, value === true ? '' : value);
	      }
	    });
	  });
	}

	function effect$2(_ref2) {
	  var state = _ref2.state;
	  var initialStyles = {
	    popper: {
	      position: state.options.strategy,
	      left: '0',
	      top: '0',
	      margin: '0'
	    },
	    arrow: {
	      position: 'absolute'
	    },
	    reference: {}
	  };
	  Object.assign(state.elements.popper.style, initialStyles.popper);
	  state.styles = initialStyles;

	  if (state.elements.arrow) {
	    Object.assign(state.elements.arrow.style, initialStyles.arrow);
	  }

	  return function () {
	    Object.keys(state.elements).forEach(function (name) {
	      var element = state.elements[name];
	      var attributes = state.attributes[name] || {};
	      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

	      var style = styleProperties.reduce(function (style, property) {
	        style[property] = '';
	        return style;
	      }, {}); // arrow is optional + virtual elements

	      if (!isHTMLElement(element) || !getNodeName(element)) {
	        return;
	      }

	      Object.assign(element.style, style);
	      Object.keys(attributes).forEach(function (attribute) {
	        element.removeAttribute(attribute);
	      });
	    });
	  };
	} // eslint-disable-next-line import/no-unused-modules


	var applyStyles$1 = {
	  name: 'applyStyles',
	  enabled: true,
	  phase: 'write',
	  fn: applyStyles,
	  effect: effect$2,
	  requires: ['computeStyles']
	};

	function getBasePlacement(placement) {
	  return placement.split('-')[0];
	}

	var max = Math.max;
	var min = Math.min;
	var round$1 = Math.round;

	function getUAString() {
	  var uaData = navigator.userAgentData;

	  if (uaData != null && uaData.brands) {
	    return uaData.brands.map(function (item) {
	      return item.brand + "/" + item.version;
	    }).join(' ');
	  }

	  return navigator.userAgent;
	}

	function isLayoutViewport() {
	  return !/^((?!chrome|android).)*safari/i.test(getUAString());
	}

	function getBoundingClientRect(element, includeScale, isFixedStrategy) {
	  if (includeScale === void 0) {
	    includeScale = false;
	  }

	  if (isFixedStrategy === void 0) {
	    isFixedStrategy = false;
	  }

	  var clientRect = element.getBoundingClientRect();
	  var scaleX = 1;
	  var scaleY = 1;

	  if (includeScale && isHTMLElement(element)) {
	    scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
	    scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
	  }

	  var _ref = isElement(element) ? getWindow(element) : window,
	      visualViewport = _ref.visualViewport;

	  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
	  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
	  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
	  var width = clientRect.width / scaleX;
	  var height = clientRect.height / scaleY;
	  return {
	    width: width,
	    height: height,
	    top: y,
	    right: x + width,
	    bottom: y + height,
	    left: x,
	    x: x,
	    y: y
	  };
	}

	// means it doesn't take into account transforms.

	function getLayoutRect(element) {
	  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
	  // Fixes https://github.com/popperjs/popper-core/issues/1223

	  var width = element.offsetWidth;
	  var height = element.offsetHeight;

	  if (Math.abs(clientRect.width - width) <= 1) {
	    width = clientRect.width;
	  }

	  if (Math.abs(clientRect.height - height) <= 1) {
	    height = clientRect.height;
	  }

	  return {
	    x: element.offsetLeft,
	    y: element.offsetTop,
	    width: width,
	    height: height
	  };
	}

	function contains(parent, child) {
	  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

	  if (parent.contains(child)) {
	    return true;
	  } // then fallback to custom implementation with Shadow DOM support
	  else if (rootNode && isShadowRoot(rootNode)) {
	      var next = child;

	      do {
	        if (next && parent.isSameNode(next)) {
	          return true;
	        } // $FlowFixMe[prop-missing]: need a better way to handle this...


	        next = next.parentNode || next.host;
	      } while (next);
	    } // Give up, the result is false


	  return false;
	}

	function getComputedStyle(element) {
	  return getWindow(element).getComputedStyle(element);
	}

	function isTableElement(element) {
	  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
	}

	function getDocumentElement(element) {
	  // $FlowFixMe[incompatible-return]: assume body is always available
	  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
	  element.document) || window.document).documentElement;
	}

	function getParentNode(element) {
	  if (getNodeName(element) === 'html') {
	    return element;
	  }

	  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
	    // $FlowFixMe[incompatible-return]
	    // $FlowFixMe[prop-missing]
	    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
	    element.parentNode || ( // DOM Element detected
	    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
	    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
	    getDocumentElement(element) // fallback

	  );
	}

	function getTrueOffsetParent(element) {
	  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
	  getComputedStyle(element).position === 'fixed') {
	    return null;
	  }

	  return element.offsetParent;
	} // `.offsetParent` reports `null` for fixed elements, while absolute elements
	// return the containing block


	function getContainingBlock(element) {
	  var isFirefox = /firefox/i.test(getUAString());
	  var isIE = /Trident/i.test(getUAString());

	  if (isIE && isHTMLElement(element)) {
	    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
	    var elementCss = getComputedStyle(element);

	    if (elementCss.position === 'fixed') {
	      return null;
	    }
	  }

	  var currentNode = getParentNode(element);

	  if (isShadowRoot(currentNode)) {
	    currentNode = currentNode.host;
	  }

	  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
	    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
	    // create a containing block.
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

	    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
	      return currentNode;
	    } else {
	      currentNode = currentNode.parentNode;
	    }
	  }

	  return null;
	} // Gets the closest ancestor positioned element. Handles some edge cases,
	// such as table ancestors and cross browser bugs.


	function getOffsetParent(element) {
	  var window = getWindow(element);
	  var offsetParent = getTrueOffsetParent(element);

	  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
	    offsetParent = getTrueOffsetParent(offsetParent);
	  }

	  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
	    return window;
	  }

	  return offsetParent || getContainingBlock(element) || window;
	}

	function getMainAxisFromPlacement(placement) {
	  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
	}

	function within(min$1, value, max$1) {
	  return max(min$1, min(value, max$1));
	}
	function withinMaxClamp(min, value, max) {
	  var v = within(min, value, max);
	  return v > max ? max : v;
	}

	function getFreshSideObject() {
	  return {
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0
	  };
	}

	function mergePaddingObject(paddingObject) {
	  return Object.assign({}, getFreshSideObject(), paddingObject);
	}

	function expandToHashMap(value, keys) {
	  return keys.reduce(function (hashMap, key) {
	    hashMap[key] = value;
	    return hashMap;
	  }, {});
	}

	var toPaddingObject = function toPaddingObject(padding, state) {
	  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : padding;
	  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	};

	function arrow(_ref) {
	  var _state$modifiersData$;

	  var state = _ref.state,
	      name = _ref.name,
	      options = _ref.options;
	  var arrowElement = state.elements.arrow;
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var basePlacement = getBasePlacement(state.placement);
	  var axis = getMainAxisFromPlacement(basePlacement);
	  var isVertical = [left, right].indexOf(basePlacement) >= 0;
	  var len = isVertical ? 'height' : 'width';

	  if (!arrowElement || !popperOffsets) {
	    return;
	  }

	  var paddingObject = toPaddingObject(options.padding, state);
	  var arrowRect = getLayoutRect(arrowElement);
	  var minProp = axis === 'y' ? top : left;
	  var maxProp = axis === 'y' ? bottom : right;
	  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
	  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
	  var arrowOffsetParent = getOffsetParent(arrowElement);
	  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
	  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
	  // outside of the popper bounds

	  var min = paddingObject[minProp];
	  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
	  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
	  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

	  var axisProp = axis;
	  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
	}

	function effect$1(_ref2) {
	  var state = _ref2.state,
	      options = _ref2.options;
	  var _options$element = options.element,
	      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

	  if (arrowElement == null) {
	    return;
	  } // CSS selector


	  if (typeof arrowElement === 'string') {
	    arrowElement = state.elements.popper.querySelector(arrowElement);

	    if (!arrowElement) {
	      return;
	    }
	  }

	  if (!contains(state.elements.popper, arrowElement)) {

	    return;
	  }

	  state.elements.arrow = arrowElement;
	} // eslint-disable-next-line import/no-unused-modules


	var arrow$1 = {
	  name: 'arrow',
	  enabled: true,
	  phase: 'main',
	  fn: arrow,
	  effect: effect$1,
	  requires: ['popperOffsets'],
	  requiresIfExists: ['preventOverflow']
	};

	function getVariation(placement) {
	  return placement.split('-')[1];
	}

	var unsetSides = {
	  top: 'auto',
	  right: 'auto',
	  bottom: 'auto',
	  left: 'auto'
	}; // Round the offsets to the nearest suitable subpixel based on the DPR.
	// Zooming can change the DPR, but it seems to report a value that will
	// cleanly divide the values into the appropriate subpixels.

	function roundOffsetsByDPR(_ref) {
	  var x = _ref.x,
	      y = _ref.y;
	  var win = window;
	  var dpr = win.devicePixelRatio || 1;
	  return {
	    x: round$1(x * dpr) / dpr || 0,
	    y: round$1(y * dpr) / dpr || 0
	  };
	}

	function mapToStyles(_ref2) {
	  var _Object$assign2;

	  var popper = _ref2.popper,
	      popperRect = _ref2.popperRect,
	      placement = _ref2.placement,
	      variation = _ref2.variation,
	      offsets = _ref2.offsets,
	      position = _ref2.position,
	      gpuAcceleration = _ref2.gpuAcceleration,
	      adaptive = _ref2.adaptive,
	      roundOffsets = _ref2.roundOffsets,
	      isFixed = _ref2.isFixed;
	  var _offsets$x = offsets.x,
	      x = _offsets$x === void 0 ? 0 : _offsets$x,
	      _offsets$y = offsets.y,
	      y = _offsets$y === void 0 ? 0 : _offsets$y;

	  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
	    x: x,
	    y: y
	  }) : {
	    x: x,
	    y: y
	  };

	  x = _ref3.x;
	  y = _ref3.y;
	  var hasX = offsets.hasOwnProperty('x');
	  var hasY = offsets.hasOwnProperty('y');
	  var sideX = left;
	  var sideY = top;
	  var win = window;

	  if (adaptive) {
	    var offsetParent = getOffsetParent(popper);
	    var heightProp = 'clientHeight';
	    var widthProp = 'clientWidth';

	    if (offsetParent === getWindow(popper)) {
	      offsetParent = getDocumentElement(popper);

	      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
	        heightProp = 'scrollHeight';
	        widthProp = 'scrollWidth';
	      }
	    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


	    offsetParent = offsetParent;

	    if (placement === top || (placement === left || placement === right) && variation === end) {
	      sideY = bottom;
	      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
	      offsetParent[heightProp];
	      y -= offsetY - popperRect.height;
	      y *= gpuAcceleration ? 1 : -1;
	    }

	    if (placement === left || (placement === top || placement === bottom) && variation === end) {
	      sideX = right;
	      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
	      offsetParent[widthProp];
	      x -= offsetX - popperRect.width;
	      x *= gpuAcceleration ? 1 : -1;
	    }
	  }

	  var commonStyles = Object.assign({
	    position: position
	  }, adaptive && unsetSides);

	  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
	    x: x,
	    y: y
	  }) : {
	    x: x,
	    y: y
	  };

	  x = _ref4.x;
	  y = _ref4.y;

	  if (gpuAcceleration) {
	    var _Object$assign;

	    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
	  }

	  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
	}

	function computeStyles(_ref5) {
	  var state = _ref5.state,
	      options = _ref5.options;
	  var _options$gpuAccelerat = options.gpuAcceleration,
	      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
	      _options$adaptive = options.adaptive,
	      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
	      _options$roundOffsets = options.roundOffsets,
	      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

	  var commonStyles = {
	    placement: getBasePlacement(state.placement),
	    variation: getVariation(state.placement),
	    popper: state.elements.popper,
	    popperRect: state.rects.popper,
	    gpuAcceleration: gpuAcceleration,
	    isFixed: state.options.strategy === 'fixed'
	  };

	  if (state.modifiersData.popperOffsets != null) {
	    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.popperOffsets,
	      position: state.options.strategy,
	      adaptive: adaptive,
	      roundOffsets: roundOffsets
	    })));
	  }

	  if (state.modifiersData.arrow != null) {
	    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.arrow,
	      position: 'absolute',
	      adaptive: false,
	      roundOffsets: roundOffsets
	    })));
	  }

	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-placement': state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var computeStyles$1 = {
	  name: 'computeStyles',
	  enabled: true,
	  phase: 'beforeWrite',
	  fn: computeStyles,
	  data: {}
	};

	var passive = {
	  passive: true
	};

	function effect(_ref) {
	  var state = _ref.state,
	      instance = _ref.instance,
	      options = _ref.options;
	  var _options$scroll = options.scroll,
	      scroll = _options$scroll === void 0 ? true : _options$scroll,
	      _options$resize = options.resize,
	      resize = _options$resize === void 0 ? true : _options$resize;
	  var window = getWindow(state.elements.popper);
	  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

	  if (scroll) {
	    scrollParents.forEach(function (scrollParent) {
	      scrollParent.addEventListener('scroll', instance.update, passive);
	    });
	  }

	  if (resize) {
	    window.addEventListener('resize', instance.update, passive);
	  }

	  return function () {
	    if (scroll) {
	      scrollParents.forEach(function (scrollParent) {
	        scrollParent.removeEventListener('scroll', instance.update, passive);
	      });
	    }

	    if (resize) {
	      window.removeEventListener('resize', instance.update, passive);
	    }
	  };
	} // eslint-disable-next-line import/no-unused-modules


	var eventListeners = {
	  name: 'eventListeners',
	  enabled: true,
	  phase: 'write',
	  fn: function fn() {},
	  effect: effect,
	  data: {}
	};

	var hash$1 = {
	  left: 'right',
	  right: 'left',
	  bottom: 'top',
	  top: 'bottom'
	};
	function getOppositePlacement(placement) {
	  return placement.replace(/left|right|bottom|top/g, function (matched) {
	    return hash$1[matched];
	  });
	}

	var hash = {
	  start: 'end',
	  end: 'start'
	};
	function getOppositeVariationPlacement(placement) {
	  return placement.replace(/start|end/g, function (matched) {
	    return hash[matched];
	  });
	}

	function getWindowScroll(node) {
	  var win = getWindow(node);
	  var scrollLeft = win.pageXOffset;
	  var scrollTop = win.pageYOffset;
	  return {
	    scrollLeft: scrollLeft,
	    scrollTop: scrollTop
	  };
	}

	function getWindowScrollBarX(element) {
	  // If <html> has a CSS width greater than the viewport, then this will be
	  // incorrect for RTL.
	  // Popper 1 is broken in this case and never had a bug report so let's assume
	  // it's not an issue. I don't think anyone ever specifies width on <html>
	  // anyway.
	  // Browsers where the left scrollbar doesn't cause an issue report `0` for
	  // this (e.g. Edge 2019, IE11, Safari)
	  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
	}

	function getViewportRect(element, strategy) {
	  var win = getWindow(element);
	  var html = getDocumentElement(element);
	  var visualViewport = win.visualViewport;
	  var width = html.clientWidth;
	  var height = html.clientHeight;
	  var x = 0;
	  var y = 0;

	  if (visualViewport) {
	    width = visualViewport.width;
	    height = visualViewport.height;
	    var layoutViewport = isLayoutViewport();

	    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
	      x = visualViewport.offsetLeft;
	      y = visualViewport.offsetTop;
	    }
	  }

	  return {
	    width: width,
	    height: height,
	    x: x + getWindowScrollBarX(element),
	    y: y
	  };
	}

	// of the `<html>` and `<body>` rect bounds if horizontally scrollable

	function getDocumentRect(element) {
	  var _element$ownerDocumen;

	  var html = getDocumentElement(element);
	  var winScroll = getWindowScroll(element);
	  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
	  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
	  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
	  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
	  var y = -winScroll.scrollTop;

	  if (getComputedStyle(body || html).direction === 'rtl') {
	    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
	  }

	  return {
	    width: width,
	    height: height,
	    x: x,
	    y: y
	  };
	}

	function isScrollParent(element) {
	  // Firefox wants us to check `-x` and `-y` variations as well
	  var _getComputedStyle = getComputedStyle(element),
	      overflow = _getComputedStyle.overflow,
	      overflowX = _getComputedStyle.overflowX,
	      overflowY = _getComputedStyle.overflowY;

	  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
	}

	function getScrollParent(node) {
	  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
	    // $FlowFixMe[incompatible-return]: assume body is always available
	    return node.ownerDocument.body;
	  }

	  if (isHTMLElement(node) && isScrollParent(node)) {
	    return node;
	  }

	  return getScrollParent(getParentNode(node));
	}

	/*
	given a DOM element, return the list of all scroll parents, up the list of ancesors
	until we get to the top window object. This list is what we attach scroll listeners
	to, because if any of these parent elements scroll, we'll need to re-calculate the
	reference element's position.
	*/

	function listScrollParents(element, list) {
	  var _element$ownerDocumen;

	  if (list === void 0) {
	    list = [];
	  }

	  var scrollParent = getScrollParent(element);
	  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
	  var win = getWindow(scrollParent);
	  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
	  var updatedList = list.concat(target);
	  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
	  updatedList.concat(listScrollParents(getParentNode(target)));
	}

	function rectToClientRect(rect) {
	  return Object.assign({}, rect, {
	    left: rect.x,
	    top: rect.y,
	    right: rect.x + rect.width,
	    bottom: rect.y + rect.height
	  });
	}

	function getInnerBoundingClientRect(element, strategy) {
	  var rect = getBoundingClientRect(element, false, strategy === 'fixed');
	  rect.top = rect.top + element.clientTop;
	  rect.left = rect.left + element.clientLeft;
	  rect.bottom = rect.top + element.clientHeight;
	  rect.right = rect.left + element.clientWidth;
	  rect.width = element.clientWidth;
	  rect.height = element.clientHeight;
	  rect.x = rect.left;
	  rect.y = rect.top;
	  return rect;
	}

	function getClientRectFromMixedType(element, clippingParent, strategy) {
	  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
	} // A "clipping parent" is an overflowable container with the characteristic of
	// clipping (or hiding) overflowing elements with a position different from
	// `initial`


	function getClippingParents(element) {
	  var clippingParents = listScrollParents(getParentNode(element));
	  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
	  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

	  if (!isElement(clipperElement)) {
	    return [];
	  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


	  return clippingParents.filter(function (clippingParent) {
	    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
	  });
	} // Gets the maximum area that the element is visible in due to any number of
	// clipping parents


	function getClippingRect(element, boundary, rootBoundary, strategy) {
	  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
	  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
	  var firstClippingParent = clippingParents[0];
	  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
	    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
	    accRect.top = max(rect.top, accRect.top);
	    accRect.right = min(rect.right, accRect.right);
	    accRect.bottom = min(rect.bottom, accRect.bottom);
	    accRect.left = max(rect.left, accRect.left);
	    return accRect;
	  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
	  clippingRect.width = clippingRect.right - clippingRect.left;
	  clippingRect.height = clippingRect.bottom - clippingRect.top;
	  clippingRect.x = clippingRect.left;
	  clippingRect.y = clippingRect.top;
	  return clippingRect;
	}

	function computeOffsets(_ref) {
	  var reference = _ref.reference,
	      element = _ref.element,
	      placement = _ref.placement;
	  var basePlacement = placement ? getBasePlacement(placement) : null;
	  var variation = placement ? getVariation(placement) : null;
	  var commonX = reference.x + reference.width / 2 - element.width / 2;
	  var commonY = reference.y + reference.height / 2 - element.height / 2;
	  var offsets;

	  switch (basePlacement) {
	    case top:
	      offsets = {
	        x: commonX,
	        y: reference.y - element.height
	      };
	      break;

	    case bottom:
	      offsets = {
	        x: commonX,
	        y: reference.y + reference.height
	      };
	      break;

	    case right:
	      offsets = {
	        x: reference.x + reference.width,
	        y: commonY
	      };
	      break;

	    case left:
	      offsets = {
	        x: reference.x - element.width,
	        y: commonY
	      };
	      break;

	    default:
	      offsets = {
	        x: reference.x,
	        y: reference.y
	      };
	  }

	  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

	  if (mainAxis != null) {
	    var len = mainAxis === 'y' ? 'height' : 'width';

	    switch (variation) {
	      case start:
	        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
	        break;

	      case end:
	        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
	        break;
	    }
	  }

	  return offsets;
	}

	function detectOverflow(state, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      _options$placement = _options.placement,
	      placement = _options$placement === void 0 ? state.placement : _options$placement,
	      _options$strategy = _options.strategy,
	      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
	      _options$boundary = _options.boundary,
	      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
	      _options$rootBoundary = _options.rootBoundary,
	      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
	      _options$elementConte = _options.elementContext,
	      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
	      _options$altBoundary = _options.altBoundary,
	      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
	      _options$padding = _options.padding,
	      padding = _options$padding === void 0 ? 0 : _options$padding;
	  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	  var altContext = elementContext === popper ? reference : popper;
	  var popperRect = state.rects.popper;
	  var element = state.elements[altBoundary ? altContext : elementContext];
	  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
	  var referenceClientRect = getBoundingClientRect(state.elements.reference);
	  var popperOffsets = computeOffsets({
	    reference: referenceClientRect,
	    element: popperRect,
	    strategy: 'absolute',
	    placement: placement
	  });
	  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
	  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
	  // 0 or negative = within the clipping rect

	  var overflowOffsets = {
	    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
	    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
	    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
	    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
	  };
	  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

	  if (elementContext === popper && offsetData) {
	    var offset = offsetData[placement];
	    Object.keys(overflowOffsets).forEach(function (key) {
	      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
	      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
	      overflowOffsets[key] += offset[axis] * multiply;
	    });
	  }

	  return overflowOffsets;
	}

	function computeAutoPlacement(state, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var _options = options,
	      placement = _options.placement,
	      boundary = _options.boundary,
	      rootBoundary = _options.rootBoundary,
	      padding = _options.padding,
	      flipVariations = _options.flipVariations,
	      _options$allowedAutoP = _options.allowedAutoPlacements,
	      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
	  var variation = getVariation(placement);
	  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
	    return getVariation(placement) === variation;
	  }) : basePlacements;
	  var allowedPlacements = placements$1.filter(function (placement) {
	    return allowedAutoPlacements.indexOf(placement) >= 0;
	  });

	  if (allowedPlacements.length === 0) {
	    allowedPlacements = placements$1;
	  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


	  var overflows = allowedPlacements.reduce(function (acc, placement) {
	    acc[placement] = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding
	    })[getBasePlacement(placement)];
	    return acc;
	  }, {});
	  return Object.keys(overflows).sort(function (a, b) {
	    return overflows[a] - overflows[b];
	  });
	}

	function getExpandedFallbackPlacements(placement) {
	  if (getBasePlacement(placement) === auto) {
	    return [];
	  }

	  var oppositePlacement = getOppositePlacement(placement);
	  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
	}

	function flip(_ref) {
	  var state = _ref.state,
	      options = _ref.options,
	      name = _ref.name;

	  if (state.modifiersData[name]._skip) {
	    return;
	  }

	  var _options$mainAxis = options.mainAxis,
	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	      _options$altAxis = options.altAxis,
	      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
	      specifiedFallbackPlacements = options.fallbackPlacements,
	      padding = options.padding,
	      boundary = options.boundary,
	      rootBoundary = options.rootBoundary,
	      altBoundary = options.altBoundary,
	      _options$flipVariatio = options.flipVariations,
	      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
	      allowedAutoPlacements = options.allowedAutoPlacements;
	  var preferredPlacement = state.options.placement;
	  var basePlacement = getBasePlacement(preferredPlacement);
	  var isBasePlacement = basePlacement === preferredPlacement;
	  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
	  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
	    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding,
	      flipVariations: flipVariations,
	      allowedAutoPlacements: allowedAutoPlacements
	    }) : placement);
	  }, []);
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var checksMap = new Map();
	  var makeFallbackChecks = true;
	  var firstFittingPlacement = placements[0];

	  for (var i = 0; i < placements.length; i++) {
	    var placement = placements[i];

	    var _basePlacement = getBasePlacement(placement);

	    var isStartVariation = getVariation(placement) === start;
	    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
	    var len = isVertical ? 'width' : 'height';
	    var overflow = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      altBoundary: altBoundary,
	      padding: padding
	    });
	    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

	    if (referenceRect[len] > popperRect[len]) {
	      mainVariationSide = getOppositePlacement(mainVariationSide);
	    }

	    var altVariationSide = getOppositePlacement(mainVariationSide);
	    var checks = [];

	    if (checkMainAxis) {
	      checks.push(overflow[_basePlacement] <= 0);
	    }

	    if (checkAltAxis) {
	      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
	    }

	    if (checks.every(function (check) {
	      return check;
	    })) {
	      firstFittingPlacement = placement;
	      makeFallbackChecks = false;
	      break;
	    }

	    checksMap.set(placement, checks);
	  }

	  if (makeFallbackChecks) {
	    // `2` may be desired in some cases – research later
	    var numberOfChecks = flipVariations ? 3 : 1;

	    var _loop = function _loop(_i) {
	      var fittingPlacement = placements.find(function (placement) {
	        var checks = checksMap.get(placement);

	        if (checks) {
	          return checks.slice(0, _i).every(function (check) {
	            return check;
	          });
	        }
	      });

	      if (fittingPlacement) {
	        firstFittingPlacement = fittingPlacement;
	        return "break";
	      }
	    };

	    for (var _i = numberOfChecks; _i > 0; _i--) {
	      var _ret = _loop(_i);

	      if (_ret === "break") break;
	    }
	  }

	  if (state.placement !== firstFittingPlacement) {
	    state.modifiersData[name]._skip = true;
	    state.placement = firstFittingPlacement;
	    state.reset = true;
	  }
	} // eslint-disable-next-line import/no-unused-modules


	var flip$1 = {
	  name: 'flip',
	  enabled: true,
	  phase: 'main',
	  fn: flip,
	  requiresIfExists: ['offset'],
	  data: {
	    _skip: false
	  }
	};

	function getSideOffsets(overflow, rect, preventedOffsets) {
	  if (preventedOffsets === void 0) {
	    preventedOffsets = {
	      x: 0,
	      y: 0
	    };
	  }

	  return {
	    top: overflow.top - rect.height - preventedOffsets.y,
	    right: overflow.right - rect.width + preventedOffsets.x,
	    bottom: overflow.bottom - rect.height + preventedOffsets.y,
	    left: overflow.left - rect.width - preventedOffsets.x
	  };
	}

	function isAnySideFullyClipped(overflow) {
	  return [top, right, bottom, left].some(function (side) {
	    return overflow[side] >= 0;
	  });
	}

	function hide(_ref) {
	  var state = _ref.state,
	      name = _ref.name;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var preventedOffsets = state.modifiersData.preventOverflow;
	  var referenceOverflow = detectOverflow(state, {
	    elementContext: 'reference'
	  });
	  var popperAltOverflow = detectOverflow(state, {
	    altBoundary: true
	  });
	  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
	  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
	  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
	  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
	  state.modifiersData[name] = {
	    referenceClippingOffsets: referenceClippingOffsets,
	    popperEscapeOffsets: popperEscapeOffsets,
	    isReferenceHidden: isReferenceHidden,
	    hasPopperEscaped: hasPopperEscaped
	  };
	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-reference-hidden': isReferenceHidden,
	    'data-popper-escaped': hasPopperEscaped
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var hide$1 = {
	  name: 'hide',
	  enabled: true,
	  phase: 'main',
	  requiresIfExists: ['preventOverflow'],
	  fn: hide
	};

	function distanceAndSkiddingToXY(placement, rects, offset) {
	  var basePlacement = getBasePlacement(placement);
	  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

	  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
	    placement: placement
	  })) : offset,
	      skidding = _ref[0],
	      distance = _ref[1];

	  skidding = skidding || 0;
	  distance = (distance || 0) * invertDistance;
	  return [left, right].indexOf(basePlacement) >= 0 ? {
	    x: distance,
	    y: skidding
	  } : {
	    x: skidding,
	    y: distance
	  };
	}

	function offset(_ref2) {
	  var state = _ref2.state,
	      options = _ref2.options,
	      name = _ref2.name;
	  var _options$offset = options.offset,
	      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
	  var data = placements.reduce(function (acc, placement) {
	    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
	    return acc;
	  }, {});
	  var _data$state$placement = data[state.placement],
	      x = _data$state$placement.x,
	      y = _data$state$placement.y;

	  if (state.modifiersData.popperOffsets != null) {
	    state.modifiersData.popperOffsets.x += x;
	    state.modifiersData.popperOffsets.y += y;
	  }

	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules


	var offset$1 = {
	  name: 'offset',
	  enabled: true,
	  phase: 'main',
	  requires: ['popperOffsets'],
	  fn: offset
	};

	function popperOffsets(_ref) {
	  var state = _ref.state,
	      name = _ref.name;
	  // Offsets are the actual position the popper needs to have to be
	  // properly positioned near its reference element
	  // This is the most basic placement, and will be adjusted by
	  // the modifiers in the next step
	  state.modifiersData[name] = computeOffsets({
	    reference: state.rects.reference,
	    element: state.rects.popper,
	    strategy: 'absolute',
	    placement: state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules


	var popperOffsets$1 = {
	  name: 'popperOffsets',
	  enabled: true,
	  phase: 'read',
	  fn: popperOffsets,
	  data: {}
	};

	function getAltAxis(axis) {
	  return axis === 'x' ? 'y' : 'x';
	}

	function preventOverflow(_ref) {
	  var state = _ref.state,
	      options = _ref.options,
	      name = _ref.name;
	  var _options$mainAxis = options.mainAxis,
	      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	      _options$altAxis = options.altAxis,
	      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
	      boundary = options.boundary,
	      rootBoundary = options.rootBoundary,
	      altBoundary = options.altBoundary,
	      padding = options.padding,
	      _options$tether = options.tether,
	      tether = _options$tether === void 0 ? true : _options$tether,
	      _options$tetherOffset = options.tetherOffset,
	      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
	  var overflow = detectOverflow(state, {
	    boundary: boundary,
	    rootBoundary: rootBoundary,
	    padding: padding,
	    altBoundary: altBoundary
	  });
	  var basePlacement = getBasePlacement(state.placement);
	  var variation = getVariation(state.placement);
	  var isBasePlacement = !variation;
	  var mainAxis = getMainAxisFromPlacement(basePlacement);
	  var altAxis = getAltAxis(mainAxis);
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : tetherOffset;
	  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
	    mainAxis: tetherOffsetValue,
	    altAxis: tetherOffsetValue
	  } : Object.assign({
	    mainAxis: 0,
	    altAxis: 0
	  }, tetherOffsetValue);
	  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
	  var data = {
	    x: 0,
	    y: 0
	  };

	  if (!popperOffsets) {
	    return;
	  }

	  if (checkMainAxis) {
	    var _offsetModifierState$;

	    var mainSide = mainAxis === 'y' ? top : left;
	    var altSide = mainAxis === 'y' ? bottom : right;
	    var len = mainAxis === 'y' ? 'height' : 'width';
	    var offset = popperOffsets[mainAxis];
	    var min$1 = offset + overflow[mainSide];
	    var max$1 = offset - overflow[altSide];
	    var additive = tether ? -popperRect[len] / 2 : 0;
	    var minLen = variation === start ? referenceRect[len] : popperRect[len];
	    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
	    // outside the reference bounds

	    var arrowElement = state.elements.arrow;
	    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
	      width: 0,
	      height: 0
	    };
	    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
	    var arrowPaddingMin = arrowPaddingObject[mainSide];
	    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
	    // to include its full size in the calculation. If the reference is small
	    // and near the edge of a boundary, the popper can overflow even if the
	    // reference is not overflowing as well (e.g. virtual elements with no
	    // width or height)

	    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
	    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
	    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
	    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
	    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
	    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
	    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
	    var tetherMax = offset + maxOffset - offsetModifierValue;
	    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
	    popperOffsets[mainAxis] = preventedOffset;
	    data[mainAxis] = preventedOffset - offset;
	  }

	  if (checkAltAxis) {
	    var _offsetModifierState$2;

	    var _mainSide = mainAxis === 'x' ? top : left;

	    var _altSide = mainAxis === 'x' ? bottom : right;

	    var _offset = popperOffsets[altAxis];

	    var _len = altAxis === 'y' ? 'height' : 'width';

	    var _min = _offset + overflow[_mainSide];

	    var _max = _offset - overflow[_altSide];

	    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

	    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

	    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

	    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

	    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

	    popperOffsets[altAxis] = _preventedOffset;
	    data[altAxis] = _preventedOffset - _offset;
	  }

	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules


	var preventOverflow$1 = {
	  name: 'preventOverflow',
	  enabled: true,
	  phase: 'main',
	  fn: preventOverflow,
	  requiresIfExists: ['offset']
	};

	function getHTMLElementScroll(element) {
	  return {
	    scrollLeft: element.scrollLeft,
	    scrollTop: element.scrollTop
	  };
	}

	function getNodeScroll(node) {
	  if (node === getWindow(node) || !isHTMLElement(node)) {
	    return getWindowScroll(node);
	  } else {
	    return getHTMLElementScroll(node);
	  }
	}

	function isElementScaled(element) {
	  var rect = element.getBoundingClientRect();
	  var scaleX = round$1(rect.width) / element.offsetWidth || 1;
	  var scaleY = round$1(rect.height) / element.offsetHeight || 1;
	  return scaleX !== 1 || scaleY !== 1;
	} // Returns the composite rect of an element relative to its offsetParent.
	// Composite means it takes into account transforms as well as layout.


	function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
	  if (isFixed === void 0) {
	    isFixed = false;
	  }

	  var isOffsetParentAnElement = isHTMLElement(offsetParent);
	  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
	  var documentElement = getDocumentElement(offsetParent);
	  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
	  var scroll = {
	    scrollLeft: 0,
	    scrollTop: 0
	  };
	  var offsets = {
	    x: 0,
	    y: 0
	  };

	  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
	    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
	    isScrollParent(documentElement)) {
	      scroll = getNodeScroll(offsetParent);
	    }

	    if (isHTMLElement(offsetParent)) {
	      offsets = getBoundingClientRect(offsetParent, true);
	      offsets.x += offsetParent.clientLeft;
	      offsets.y += offsetParent.clientTop;
	    } else if (documentElement) {
	      offsets.x = getWindowScrollBarX(documentElement);
	    }
	  }

	  return {
	    x: rect.left + scroll.scrollLeft - offsets.x,
	    y: rect.top + scroll.scrollTop - offsets.y,
	    width: rect.width,
	    height: rect.height
	  };
	}

	function order(modifiers) {
	  var map = new Map();
	  var visited = new Set();
	  var result = [];
	  modifiers.forEach(function (modifier) {
	    map.set(modifier.name, modifier);
	  }); // On visiting object, check for its dependencies and visit them recursively

	  function sort(modifier) {
	    visited.add(modifier.name);
	    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
	    requires.forEach(function (dep) {
	      if (!visited.has(dep)) {
	        var depModifier = map.get(dep);

	        if (depModifier) {
	          sort(depModifier);
	        }
	      }
	    });
	    result.push(modifier);
	  }

	  modifiers.forEach(function (modifier) {
	    if (!visited.has(modifier.name)) {
	      // check for visited object
	      sort(modifier);
	    }
	  });
	  return result;
	}

	function orderModifiers(modifiers) {
	  // order based on dependencies
	  var orderedModifiers = order(modifiers); // order based on phase

	  return modifierPhases.reduce(function (acc, phase) {
	    return acc.concat(orderedModifiers.filter(function (modifier) {
	      return modifier.phase === phase;
	    }));
	  }, []);
	}

	function debounce(fn) {
	  var pending;
	  return function () {
	    if (!pending) {
	      pending = new Promise(function (resolve) {
	        Promise.resolve().then(function () {
	          pending = undefined;
	          resolve(fn());
	        });
	      });
	    }

	    return pending;
	  };
	}

	function mergeByName(modifiers) {
	  var merged = modifiers.reduce(function (merged, current) {
	    var existing = merged[current.name];
	    merged[current.name] = existing ? Object.assign({}, existing, current, {
	      options: Object.assign({}, existing.options, current.options),
	      data: Object.assign({}, existing.data, current.data)
	    }) : current;
	    return merged;
	  }, {}); // IE11 does not support Object.values

	  return Object.keys(merged).map(function (key) {
	    return merged[key];
	  });
	}

	var DEFAULT_OPTIONS = {
	  placement: 'bottom',
	  modifiers: [],
	  strategy: 'absolute'
	};

	function areValidElements() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return !args.some(function (element) {
	    return !(element && typeof element.getBoundingClientRect === 'function');
	  });
	}

	function popperGenerator(generatorOptions) {
	  if (generatorOptions === void 0) {
	    generatorOptions = {};
	  }

	  var _generatorOptions = generatorOptions,
	      _generatorOptions$def = _generatorOptions.defaultModifiers,
	      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
	      _generatorOptions$def2 = _generatorOptions.defaultOptions,
	      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
	  return function createPopper(reference, popper, options) {
	    if (options === void 0) {
	      options = defaultOptions;
	    }

	    var state = {
	      placement: 'bottom',
	      orderedModifiers: [],
	      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
	      modifiersData: {},
	      elements: {
	        reference: reference,
	        popper: popper
	      },
	      attributes: {},
	      styles: {}
	    };
	    var effectCleanupFns = [];
	    var isDestroyed = false;
	    var instance = {
	      state: state,
	      setOptions: function setOptions(setOptionsAction) {
	        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
	        cleanupModifierEffects();
	        state.options = Object.assign({}, defaultOptions, state.options, options);
	        state.scrollParents = {
	          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
	          popper: listScrollParents(popper)
	        }; // Orders the modifiers based on their dependencies and `phase`
	        // properties

	        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

	        state.orderedModifiers = orderedModifiers.filter(function (m) {
	          return m.enabled;
	        }); // Validate the provided modifiers so that the consumer will get warned

	        runModifierEffects();
	        return instance.update();
	      },
	      // Sync update – it will always be executed, even if not necessary. This
	      // is useful for low frequency updates where sync behavior simplifies the
	      // logic.
	      // For high frequency updates (e.g. `resize` and `scroll` events), always
	      // prefer the async Popper#update method
	      forceUpdate: function forceUpdate() {
	        if (isDestroyed) {
	          return;
	        }

	        var _state$elements = state.elements,
	            reference = _state$elements.reference,
	            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
	        // anymore

	        if (!areValidElements(reference, popper)) {

	          return;
	        } // Store the reference and popper rects to be read by modifiers


	        state.rects = {
	          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
	          popper: getLayoutRect(popper)
	        }; // Modifiers have the ability to reset the current update cycle. The
	        // most common use case for this is the `flip` modifier changing the
	        // placement, which then needs to re-run all the modifiers, because the
	        // logic was previously ran for the previous placement and is therefore
	        // stale/incorrect

	        state.reset = false;
	        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
	        // is filled with the initial data specified by the modifier. This means
	        // it doesn't persist and is fresh on each update.
	        // To ensure persistent data, use `${name}#persistent`

	        state.orderedModifiers.forEach(function (modifier) {
	          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
	        });

	        for (var index = 0; index < state.orderedModifiers.length; index++) {

	          if (state.reset === true) {
	            state.reset = false;
	            index = -1;
	            continue;
	          }

	          var _state$orderedModifie = state.orderedModifiers[index],
	              fn = _state$orderedModifie.fn,
	              _state$orderedModifie2 = _state$orderedModifie.options,
	              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
	              name = _state$orderedModifie.name;

	          if (typeof fn === 'function') {
	            state = fn({
	              state: state,
	              options: _options,
	              name: name,
	              instance: instance
	            }) || state;
	          }
	        }
	      },
	      // Async and optimistically optimized update – it will not be executed if
	      // not necessary (debounced to run at most once-per-tick)
	      update: debounce(function () {
	        return new Promise(function (resolve) {
	          instance.forceUpdate();
	          resolve(state);
	        });
	      }),
	      destroy: function destroy() {
	        cleanupModifierEffects();
	        isDestroyed = true;
	      }
	    };

	    if (!areValidElements(reference, popper)) {

	      return instance;
	    }

	    instance.setOptions(options).then(function (state) {
	      if (!isDestroyed && options.onFirstUpdate) {
	        options.onFirstUpdate(state);
	      }
	    }); // Modifiers have the ability to execute arbitrary code before the first
	    // update cycle runs. They will be executed in the same order as the update
	    // cycle. This is useful when a modifier adds some persistent data that
	    // other modifiers need to use, but the modifier is run after the dependent
	    // one.

	    function runModifierEffects() {
	      state.orderedModifiers.forEach(function (_ref3) {
	        var name = _ref3.name,
	            _ref3$options = _ref3.options,
	            options = _ref3$options === void 0 ? {} : _ref3$options,
	            effect = _ref3.effect;

	        if (typeof effect === 'function') {
	          var cleanupFn = effect({
	            state: state,
	            name: name,
	            instance: instance,
	            options: options
	          });

	          var noopFn = function noopFn() {};

	          effectCleanupFns.push(cleanupFn || noopFn);
	        }
	      });
	    }

	    function cleanupModifierEffects() {
	      effectCleanupFns.forEach(function (fn) {
	        return fn();
	      });
	      effectCleanupFns = [];
	    }

	    return instance;
	  };
	}

	var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
	var createPopper = /*#__PURE__*/popperGenerator({
	  defaultModifiers: defaultModifiers
	}); // eslint-disable-next-line import/no-unused-modules

	function getContainer$1(container) {
	  return typeof container === 'function' ? container() : container;
	}

	/**
	 * Portals provide a first-class way to render children into a DOM node
	 * that exists outside the DOM hierarchy of the parent component.
	 */
	const Portal = /*#__PURE__*/react.exports.forwardRef(function Portal(props, ref) {
	  const {
	    children,
	    container,
	    disablePortal = false
	  } = props;
	  const [mountNode, setMountNode] = react.exports.useState(null);
	  const handleRef = useForkRef( /*#__PURE__*/react.exports.isValidElement(children) ? children.ref : null, ref);
	  useEnhancedEffect$1(() => {
	    if (!disablePortal) {
	      setMountNode(getContainer$1(container) || document.body);
	    }
	  }, [container, disablePortal]);
	  useEnhancedEffect$1(() => {
	    if (mountNode && !disablePortal) {
	      setRef(ref, mountNode);
	      return () => {
	        setRef(ref, null);
	      };
	    }
	    return undefined;
	  }, [ref, mountNode, disablePortal]);
	  if (disablePortal) {
	    if ( /*#__PURE__*/react.exports.isValidElement(children)) {
	      return /*#__PURE__*/react.exports.cloneElement(children, {
	        ref: handleRef
	      });
	    }
	    return children;
	  }
	  return /*#__PURE__*/jsxRuntime.exports.jsx(react.exports.Fragment, {
	    children: mountNode ? /*#__PURE__*/reactDom.exports.createPortal(children, mountNode) : mountNode
	  });
	});
	var Portal$1 = Portal;

	function getPopperUnstyledUtilityClass(slot) {
	  return generateUtilityClass('MuiPopperUnstyled', slot);
	}
	generateUtilityClasses('MuiPopperUnstyled', ['root']);

	const _excluded$1A = ["anchorEl", "children", "component", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps"],
	  _excluded2$7 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];
	function flipPlacement(placement, direction) {
	  if (direction === 'ltr') {
	    return placement;
	  }
	  switch (placement) {
	    case 'bottom-end':
	      return 'bottom-start';
	    case 'bottom-start':
	      return 'bottom-end';
	    case 'top-end':
	      return 'top-start';
	    case 'top-start':
	      return 'top-end';
	    default:
	      return placement;
	  }
	}
	function resolveAnchorEl$1(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}
	const useUtilityClasses$1b = () => {
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getPopperUnstyledUtilityClass, {});
	};
	const defaultPopperOptions = {};

	/* eslint-disable react/prop-types */
	const PopperTooltip = /*#__PURE__*/react.exports.forwardRef(function PopperTooltip(props, ref) {
	  var _ref;
	  const {
	      anchorEl,
	      children,
	      component,
	      direction,
	      disablePortal,
	      modifiers,
	      open,
	      ownerState,
	      placement: initialPlacement,
	      popperOptions,
	      popperRef: popperRefProp,
	      slotProps = {},
	      slots = {},
	      TransitionProps
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1A);
	  const tooltipRef = react.exports.useRef(null);
	  const ownRef = useForkRef(tooltipRef, ref);
	  const popperRef = react.exports.useRef(null);
	  const handlePopperRef = useForkRef(popperRef, popperRefProp);
	  const handlePopperRefRef = react.exports.useRef(handlePopperRef);
	  useEnhancedEffect$1(() => {
	    handlePopperRefRef.current = handlePopperRef;
	  }, [handlePopperRef]);
	  react.exports.useImperativeHandle(popperRefProp, () => popperRef.current, []);
	  const rtlPlacement = flipPlacement(initialPlacement, direction);
	  /**
	   * placement initialized from prop but can change during lifetime if modifiers.flip.
	   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
	   */
	  const [placement, setPlacement] = react.exports.useState(rtlPlacement);
	  react.exports.useEffect(() => {
	    if (popperRef.current) {
	      popperRef.current.forceUpdate();
	    }
	  });
	  useEnhancedEffect$1(() => {
	    if (!anchorEl || !open) {
	      return undefined;
	    }
	    const handlePopperUpdate = data => {
	      setPlacement(data.placement);
	    };
	    resolveAnchorEl$1(anchorEl);
	    let popperModifiers = [{
	      name: 'preventOverflow',
	      options: {
	        altBoundary: disablePortal
	      }
	    }, {
	      name: 'flip',
	      options: {
	        altBoundary: disablePortal
	      }
	    }, {
	      name: 'onUpdate',
	      enabled: true,
	      phase: 'afterWrite',
	      fn: ({
	        state
	      }) => {
	        handlePopperUpdate(state);
	      }
	    }];
	    if (modifiers != null) {
	      popperModifiers = popperModifiers.concat(modifiers);
	    }
	    if (popperOptions && popperOptions.modifiers != null) {
	      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
	    }
	    const popper = createPopper(resolveAnchorEl$1(anchorEl), tooltipRef.current, _extends({
	      placement: rtlPlacement
	    }, popperOptions, {
	      modifiers: popperModifiers
	    }));
	    handlePopperRefRef.current(popper);
	    return () => {
	      popper.destroy();
	      handlePopperRefRef.current(null);
	    };
	  }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
	  const childProps = {
	    placement
	  };
	  if (TransitionProps !== null) {
	    childProps.TransitionProps = TransitionProps;
	  }
	  const classes = useUtilityClasses$1b();
	  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: slotProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      role: 'tooltip',
	      ref: ownRef
	    },
	    ownerState: _extends({}, props, ownerState),
	    className: classes.root
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Root, _extends({}, rootProps, {
	    children: typeof children === 'function' ? children(childProps) : children
	  }));
	});
	/* eslint-enable react/prop-types */

	/**
	 * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
	 */
	const PopperUnstyled = /*#__PURE__*/react.exports.forwardRef(function PopperUnstyled(props, ref) {
	  const {
	      anchorEl,
	      children,
	      container: containerProp,
	      direction = 'ltr',
	      disablePortal = false,
	      keepMounted = false,
	      modifiers,
	      open,
	      placement = 'bottom',
	      popperOptions = defaultPopperOptions,
	      popperRef,
	      style,
	      transition = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded2$7);
	  const [exited, setExited] = react.exports.useState(true);
	  const handleEnter = () => {
	    setExited(false);
	  };
	  const handleExited = () => {
	    setExited(true);
	  };
	  if (!keepMounted && !open && (!transition || exited)) {
	    return null;
	  }

	  // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container
	  const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl$1(anchorEl)).body : undefined);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Portal$1, {
	    disablePortal: disablePortal,
	    container: container,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(PopperTooltip, _extends({
	      anchorEl: anchorEl,
	      direction: direction,
	      disablePortal: disablePortal,
	      modifiers: modifiers,
	      ref: ref,
	      open: transition ? !exited : open,
	      placement: placement,
	      popperOptions: popperOptions,
	      popperRef: popperRef
	    }, other, {
	      style: _extends({
	        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
	        position: 'fixed',
	        // Fix Popper.js display issue
	        top: 0,
	        left: 0,
	        display: !open && keepMounted && (!transition || exited) ? 'none' : null
	      }, style),
	      TransitionProps: transition ? {
	        in: open,
	        onEnter: handleEnter,
	        onExited: handleExited
	      } : null,
	      children: children
	    }))
	  });
	});
	var PopperUnstyled$1 = PopperUnstyled;

	// Is a vertical scrollbar displayed?
	function isOverflowing(container) {
	  const doc = ownerDocument(container);
	  if (doc.body === container) {
	    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
	  }
	  return container.scrollHeight > container.clientHeight;
	}
	function ariaHidden(element, show) {
	  if (show) {
	    element.setAttribute('aria-hidden', 'true');
	  } else {
	    element.removeAttribute('aria-hidden');
	  }
	}
	function getPaddingRight(element) {
	  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
	}
	function isAriaHiddenForbiddenOnElement(element) {
	  // The forbidden HTML tags are the ones from ARIA specification that
	  // can be children of body and can't have aria-hidden attribute.
	  // cf. https://www.w3.org/TR/html-aria/#docconformance
	  const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];
	  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
	  const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
	  return isForbiddenTagName || isInputHidden;
	}
	function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
	  const blacklist = [mountElement, currentElement, ...elementsToExclude];
	  [].forEach.call(container.children, element => {
	    const isNotExcludedElement = blacklist.indexOf(element) === -1;
	    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
	    if (isNotExcludedElement && isNotForbiddenElement) {
	      ariaHidden(element, show);
	    }
	  });
	}
	function findIndexOf(items, callback) {
	  let idx = -1;
	  items.some((item, index) => {
	    if (callback(item)) {
	      idx = index;
	      return true;
	    }
	    return false;
	  });
	  return idx;
	}
	function handleContainer(containerInfo, props) {
	  const restoreStyle = [];
	  const container = containerInfo.container;
	  if (!props.disableScrollLock) {
	    if (isOverflowing(container)) {
	      // Compute the size before applying overflow hidden to avoid any scroll jumps.
	      const scrollbarSize = getScrollbarSize(ownerDocument(container));
	      restoreStyle.push({
	        value: container.style.paddingRight,
	        property: 'padding-right',
	        el: container
	      });
	      // Use computed style, here to get the real padding to add our scrollbar width.
	      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;

	      // .mui-fixed is a global helper.
	      const fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
	      [].forEach.call(fixedElements, element => {
	        restoreStyle.push({
	          value: element.style.paddingRight,
	          property: 'padding-right',
	          el: element
	        });
	        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
	      });
	    }
	    let scrollContainer;
	    if (container.parentNode instanceof DocumentFragment) {
	      scrollContainer = ownerDocument(container).body;
	    } else {
	      // Improve Gatsby support
	      // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
	      const parent = container.parentElement;
	      const containerWindow = ownerWindow(container);
	      scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
	    }

	    // Block the scroll even if no scrollbar is visible to account for mobile keyboard
	    // screensize shrink.
	    restoreStyle.push({
	      value: scrollContainer.style.overflow,
	      property: 'overflow',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowX,
	      property: 'overflow-x',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowY,
	      property: 'overflow-y',
	      el: scrollContainer
	    });
	    scrollContainer.style.overflow = 'hidden';
	  }
	  const restore = () => {
	    restoreStyle.forEach(({
	      value,
	      el,
	      property
	    }) => {
	      if (value) {
	        el.style.setProperty(property, value);
	      } else {
	        el.style.removeProperty(property);
	      }
	    });
	  };
	  return restore;
	}
	function getHiddenSiblings(container) {
	  const hiddenSiblings = [];
	  [].forEach.call(container.children, element => {
	    if (element.getAttribute('aria-hidden') === 'true') {
	      hiddenSiblings.push(element);
	    }
	  });
	  return hiddenSiblings;
	}
	/**
	 * @ignore - do not document.
	 *
	 * Proper state management for containers and the modals in those containers.
	 * Simplified, but inspired by react-overlay's ModalManager class.
	 * Used by the Modal to ensure proper styling of containers.
	 */
	class ModalManager {
	  constructor() {
	    this.containers = void 0;
	    this.modals = void 0;
	    this.modals = [];
	    this.containers = [];
	  }
	  add(modal, container) {
	    let modalIndex = this.modals.indexOf(modal);
	    if (modalIndex !== -1) {
	      return modalIndex;
	    }
	    modalIndex = this.modals.length;
	    this.modals.push(modal);

	    // If the modal we are adding is already in the DOM.
	    if (modal.modalRef) {
	      ariaHidden(modal.modalRef, false);
	    }
	    const hiddenSiblings = getHiddenSiblings(container);
	    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
	    const containerIndex = findIndexOf(this.containers, item => item.container === container);
	    if (containerIndex !== -1) {
	      this.containers[containerIndex].modals.push(modal);
	      return modalIndex;
	    }
	    this.containers.push({
	      modals: [modal],
	      container,
	      restore: null,
	      hiddenSiblings
	    });
	    return modalIndex;
	  }
	  mount(modal, props) {
	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];
	    if (!containerInfo.restore) {
	      containerInfo.restore = handleContainer(containerInfo, props);
	    }
	  }
	  remove(modal, ariaHiddenState = true) {
	    const modalIndex = this.modals.indexOf(modal);
	    if (modalIndex === -1) {
	      return modalIndex;
	    }
	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];
	    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
	    this.modals.splice(modalIndex, 1);

	    // If that was the last modal in a container, clean up the container.
	    if (containerInfo.modals.length === 0) {
	      // The modal might be closed before it had the chance to be mounted in the DOM.
	      if (containerInfo.restore) {
	        containerInfo.restore();
	      }
	      if (modal.modalRef) {
	        // In case the modal wasn't in the DOM yet.
	        ariaHidden(modal.modalRef, ariaHiddenState);
	      }
	      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
	      this.containers.splice(containerIndex, 1);
	    } else {
	      // Otherwise make sure the next top modal is visible to a screen reader.
	      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
	      // as soon as a modal is adding its modalRef is undefined. it can't set
	      // aria-hidden because the dom element doesn't exist either
	      // when modal was unmounted before modalRef gets null
	      if (nextTop.modalRef) {
	        ariaHidden(nextTop.modalRef, false);
	      }
	    }
	    return modalIndex;
	  }
	  isTopModal(modal) {
	    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
	  }
	}

	function getModalUtilityClass(slot) {
	  return generateUtilityClass('MuiModal', slot);
	}
	generateUtilityClasses('MuiModal', ['root', 'hidden']);

	const _excluded$1z = ["children", "classes", "closeAfterTransition", "component", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
	const useUtilityClasses$1a = ownerState => {
	  const {
	    open,
	    exited,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', !open && exited && 'hidden']
	  };
	  return composeClasses(slots, getModalUtilityClass, classes);
	};
	function getContainer(container) {
	  return typeof container === 'function' ? container() : container;
	}
	function getHasTransition(props) {
	  return props.children ? props.children.props.hasOwnProperty('in') : false;
	}

	// A modal manager used to track and manage the state of open Modals.
	// Modals don't open on the server so this won't conflict with concurrent requests.
	const defaultManager = new ModalManager();

	/**
	 * Modal is a lower-level construct that is leveraged by the following components:
	 *
	 * - [Dialog](/material-ui/api/dialog/)
	 * - [Drawer](/material-ui/api/drawer/)
	 * - [Menu](/material-ui/api/menu/)
	 * - [Popover](/material-ui/api/popover/)
	 *
	 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
	 * rather than directly using Modal.
	 *
	 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
	 */
	const ModalUnstyled = /*#__PURE__*/react.exports.forwardRef(function ModalUnstyled(props, ref) {
	  var _props$ariaHidden, _ref;
	  const {
	      children,
	      classes: classesProp,
	      closeAfterTransition = false,
	      component,
	      container,
	      disableAutoFocus = false,
	      disableEnforceFocus = false,
	      disableEscapeKeyDown = false,
	      disablePortal = false,
	      disableRestoreFocus = false,
	      disableScrollLock = false,
	      hideBackdrop = false,
	      keepMounted = false,
	      // private
	      // eslint-disable-next-line react/prop-types
	      manager = defaultManager,
	      onBackdropClick,
	      onClose,
	      onKeyDown,
	      open,
	      /* eslint-disable react/prop-types */
	      onTransitionEnter,
	      onTransitionExited,
	      slotProps = {},
	      slots = {}
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1z);
	  const [exited, setExited] = react.exports.useState(true);
	  const modal = react.exports.useRef({});
	  const mountNodeRef = react.exports.useRef(null);
	  const modalRef = react.exports.useRef(null);
	  const handleRef = useForkRef(modalRef, ref);
	  const hasTransition = getHasTransition(props);
	  const ariaHiddenProp = (_props$ariaHidden = props['aria-hidden']) != null ? _props$ariaHidden : true;
	  const getDoc = () => ownerDocument(mountNodeRef.current);
	  const getModal = () => {
	    modal.current.modalRef = modalRef.current;
	    modal.current.mountNode = mountNodeRef.current;
	    return modal.current;
	  };
	  const handleMounted = () => {
	    manager.mount(getModal(), {
	      disableScrollLock
	    });

	    // Fix a bug on Chrome where the scroll isn't initially 0.
	    modalRef.current.scrollTop = 0;
	  };
	  const handleOpen = useEventCallback(() => {
	    const resolvedContainer = getContainer(container) || getDoc().body;
	    manager.add(getModal(), resolvedContainer);

	    // The element was already mounted.
	    if (modalRef.current) {
	      handleMounted();
	    }
	  });
	  const isTopModal = react.exports.useCallback(() => manager.isTopModal(getModal()), [manager]);
	  const handlePortalRef = useEventCallback(node => {
	    mountNodeRef.current = node;
	    if (!node) {
	      return;
	    }
	    if (open && isTopModal()) {
	      handleMounted();
	    } else {
	      ariaHidden(modalRef.current, ariaHiddenProp);
	    }
	  });
	  const handleClose = react.exports.useCallback(() => {
	    manager.remove(getModal(), ariaHiddenProp);
	  }, [manager, ariaHiddenProp]);
	  react.exports.useEffect(() => {
	    return () => {
	      handleClose();
	    };
	  }, [handleClose]);
	  react.exports.useEffect(() => {
	    if (open) {
	      handleOpen();
	    } else if (!hasTransition || !closeAfterTransition) {
	      handleClose();
	    }
	  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
	  const ownerState = _extends({}, props, {
	    classes: classesProp,
	    closeAfterTransition,
	    disableAutoFocus,
	    disableEnforceFocus,
	    disableEscapeKeyDown,
	    disablePortal,
	    disableRestoreFocus,
	    disableScrollLock,
	    exited,
	    hideBackdrop,
	    keepMounted
	  });
	  const classes = useUtilityClasses$1a(ownerState);
	  const handleEnter = () => {
	    setExited(false);
	    if (onTransitionEnter) {
	      onTransitionEnter();
	    }
	  };
	  const handleExited = () => {
	    setExited(true);
	    if (onTransitionExited) {
	      onTransitionExited();
	    }
	    if (closeAfterTransition) {
	      handleClose();
	    }
	  };
	  const handleBackdropClick = event => {
	    if (event.target !== event.currentTarget) {
	      return;
	    }
	    if (onBackdropClick) {
	      onBackdropClick(event);
	    }
	    if (onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };
	  const handleKeyDown = event => {
	    if (onKeyDown) {
	      onKeyDown(event);
	    }

	    // The handler doesn't take event.defaultPrevented into account:
	    //
	    // event.preventDefault() is meant to stop default behaviors like
	    // clicking a checkbox to check it, hitting a button to submit a form,
	    // and hitting left arrow to move the cursor in a text input etc.
	    // Only special HTML elements have these default behaviors.
	    if (event.key !== 'Escape' || !isTopModal()) {
	      return;
	    }
	    if (!disableEscapeKeyDown) {
	      // Swallow the event, in case someone is listening for the escape key on the body.
	      event.stopPropagation();
	      if (onClose) {
	        onClose(event, 'escapeKeyDown');
	      }
	    }
	  };
	  const childProps = {};
	  if (children.props.tabIndex === undefined) {
	    childProps.tabIndex = '-1';
	  }

	  // It's a Transition like component
	  if (hasTransition) {
	    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
	    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
	  }
	  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: slotProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref: handleRef,
	      role: 'presentation',
	      onKeyDown: handleKeyDown
	    },
	    className: classes.root,
	    ownerState
	  });
	  const BackdropComponent = slots.backdrop;
	  const backdropProps = useSlotProps({
	    elementType: BackdropComponent,
	    externalSlotProps: slotProps.backdrop,
	    additionalProps: {
	      'aria-hidden': true,
	      onClick: handleBackdropClick,
	      open
	    },
	    className: classes.backdrop,
	    ownerState
	  });
	  if (!keepMounted && !open && (!hasTransition || exited)) {
	    return null;
	  }
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Portal$1, {
	    ref: handlePortalRef,
	    container: container,
	    disablePortal: disablePortal,
	    children: /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, {
	      children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/jsxRuntime.exports.jsx(BackdropComponent, _extends({}, backdropProps)) : null, /*#__PURE__*/jsxRuntime.exports.jsx(FocusTrap, {
	        disableEnforceFocus: disableEnforceFocus,
	        disableAutoFocus: disableAutoFocus,
	        disableRestoreFocus: disableRestoreFocus,
	        isEnabled: isTopModal,
	        open: open,
	        children: /*#__PURE__*/react.exports.cloneElement(children, childProps)
	      })]
	    }))
	  });
	});
	var ModalUnstyled$1 = ModalUnstyled;

	const _excluded$1y = ["onChange", "maxRows", "minRows", "style", "value"];
	function getStyleValue(computedStyle, property) {
	  return parseInt(computedStyle[property], 10) || 0;
	}
	const styles$2 = {
	  shadow: {
	    // Visibility needed to hide the extra text area on iPads
	    visibility: 'hidden',
	    // Remove from the content flow
	    position: 'absolute',
	    // Ignore the scrollbar width
	    overflow: 'hidden',
	    height: 0,
	    top: 0,
	    left: 0,
	    // Create a new layer, increase the isolation of the computed values
	    transform: 'translateZ(0)'
	  }
	};
	function isEmpty$1(obj) {
	  return obj === undefined || obj === null || Object.keys(obj).length === 0;
	}
	const TextareaAutosize = /*#__PURE__*/react.exports.forwardRef(function TextareaAutosize(props, ref) {
	  const {
	      onChange,
	      maxRows,
	      minRows = 1,
	      style,
	      value
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1y);
	  const {
	    current: isControlled
	  } = react.exports.useRef(value != null);
	  const inputRef = react.exports.useRef(null);
	  const handleRef = useForkRef(ref, inputRef);
	  const shadowRef = react.exports.useRef(null);
	  const renders = react.exports.useRef(0);
	  const [state, setState] = react.exports.useState({});
	  const getUpdatedState = react.exports.useCallback(() => {
	    const input = inputRef.current;
	    const containerWindow = ownerWindow(input);
	    const computedStyle = containerWindow.getComputedStyle(input);

	    // If input's width is shrunk and it's not visible, don't sync height.
	    if (computedStyle.width === '0px') {
	      return {};
	    }
	    const inputShallow = shadowRef.current;
	    inputShallow.style.width = computedStyle.width;
	    inputShallow.value = input.value || props.placeholder || 'x';
	    if (inputShallow.value.slice(-1) === '\n') {
	      // Certain fonts which overflow the line height will cause the textarea
	      // to report a different scrollHeight depending on whether the last line
	      // is empty. Make it non-empty to avoid this issue.
	      inputShallow.value += ' ';
	    }
	    const boxSizing = computedStyle['box-sizing'];
	    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
	    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width');

	    // The height of the inner content
	    const innerHeight = inputShallow.scrollHeight;

	    // Measure height of a textarea with a single row
	    inputShallow.value = 'x';
	    const singleRowHeight = inputShallow.scrollHeight;

	    // The height of the outer content
	    let outerHeight = innerHeight;
	    if (minRows) {
	      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
	    }
	    if (maxRows) {
	      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
	    }
	    outerHeight = Math.max(outerHeight, singleRowHeight);

	    // Take the box sizing into account for applying this value as a style.
	    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
	    const overflow = Math.abs(outerHeight - innerHeight) <= 1;
	    return {
	      outerHeightStyle,
	      overflow
	    };
	  }, [maxRows, minRows, props.placeholder]);
	  const updateState = (prevState, newState) => {
	    const {
	      outerHeightStyle,
	      overflow
	    } = newState;
	    // Need a large enough difference to update the height.
	    // This prevents infinite rendering loop.
	    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
	      renders.current += 1;
	      return {
	        overflow,
	        outerHeightStyle
	      };
	    }
	    return prevState;
	  };
	  const syncHeight = react.exports.useCallback(() => {
	    const newState = getUpdatedState();
	    if (isEmpty$1(newState)) {
	      return;
	    }
	    setState(prevState => {
	      return updateState(prevState, newState);
	    });
	  }, [getUpdatedState]);
	  const syncHeightWithFlushSycn = () => {
	    const newState = getUpdatedState();
	    if (isEmpty$1(newState)) {
	      return;
	    }

	    // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering
	    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen
	    // Related issue - https://github.com/facebook/react/issues/24331
	    reactDom.exports.flushSync(() => {
	      setState(prevState => {
	        return updateState(prevState, newState);
	      });
	    });
	  };
	  react.exports.useEffect(() => {
	    const handleResize = debounce$1(() => {
	      renders.current = 0;

	      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last
	      // ResizeObserver's handler that runs because of the change in the layout is trying to
	      // access a dom node that is no longer there (as the fallback component is being shown instead).
	      // See https://github.com/mui/material-ui/issues/32640
	      if (inputRef.current) {
	        syncHeightWithFlushSycn();
	      }
	    });
	    const containerWindow = ownerWindow(inputRef.current);
	    containerWindow.addEventListener('resize', handleResize);
	    let resizeObserver;
	    if (typeof ResizeObserver !== 'undefined') {
	      resizeObserver = new ResizeObserver(handleResize);
	      resizeObserver.observe(inputRef.current);
	    }
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	      if (resizeObserver) {
	        resizeObserver.disconnect();
	      }
	    };
	  });
	  useEnhancedEffect$1(() => {
	    syncHeight();
	  });
	  react.exports.useEffect(() => {
	    renders.current = 0;
	  }, [value]);
	  const handleChange = event => {
	    renders.current = 0;
	    if (!isControlled) {
	      syncHeight();
	    }
	    if (onChange) {
	      onChange(event);
	    }
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx("textarea", _extends({
	      value: value,
	      onChange: handleChange,
	      ref: handleRef
	      // Apply the rows prop to get a "correct" first SSR paint
	      ,
	      rows: minRows,
	      style: _extends({
	        height: state.outerHeightStyle,
	        // Need a large enough difference to allow scrolling.
	        // This prevents infinite rendering loop.
	        overflow: state.overflow ? 'hidden' : null
	      }, style)
	    }, other)), /*#__PURE__*/jsxRuntime.exports.jsx("textarea", {
	      "aria-hidden": true,
	      className: props.className,
	      readOnly: true,
	      ref: shadowRef,
	      tabIndex: -1,
	      style: _extends({}, styles$2.shadow, style, {
	        padding: 0
	      })
	    })]
	  });
	});
	var TextareaAutosize$1 = TextareaAutosize;

	function getSvgIconUtilityClass(slot) {
	  return generateUtilityClass('MuiSvgIcon', slot);
	}
	generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

	const _excluded$1x = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
	const useUtilityClasses$19 = ownerState => {
	  const {
	    color,
	    fontSize,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
	  };
	  return composeClasses(slots, getSvgIconUtilityClass, classes);
	};
	const SvgIconRoot = styled$1('svg', {
	  name: 'MuiSvgIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
	  return {
	    userSelect: 'none',
	    width: '1em',
	    height: '1em',
	    display: 'inline-block',
	    fill: 'currentColor',
	    flexShrink: 0,
	    transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
	      duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
	    }),
	    fontSize: {
	      inherit: 'inherit',
	      small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
	      medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
	      large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875rem'
	    }[ownerState.fontSize],
	    // TODO v5 deprecate, v6 remove for sx
	    color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
	      action: (_palette2 = (theme.vars || theme).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
	      disabled: (_palette3 = (theme.vars || theme).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
	      inherit: undefined
	    }[ownerState.color]
	  };
	});
	const SvgIcon = /*#__PURE__*/react.exports.forwardRef(function SvgIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSvgIcon'
	  });
	  const {
	      children,
	      className,
	      color = 'inherit',
	      component = 'svg',
	      fontSize = 'medium',
	      htmlColor,
	      inheritViewBox = false,
	      titleAccess,
	      viewBox = '0 0 24 24'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1x);
	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    fontSize,
	    instanceFontSize: inProps.fontSize,
	    inheritViewBox,
	    viewBox
	  });
	  const more = {};
	  if (!inheritViewBox) {
	    more.viewBox = viewBox;
	  }
	  const classes = useUtilityClasses$19(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SvgIconRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    focusable: "false",
	    color: htmlColor,
	    "aria-hidden": titleAccess ? undefined : true,
	    role: titleAccess ? 'img' : undefined,
	    ref: ref
	  }, more, other, {
	    ownerState: ownerState,
	    children: [children, titleAccess ? /*#__PURE__*/jsxRuntime.exports.jsx("title", {
	      children: titleAccess
	    }) : null]
	  }));
	});
	SvgIcon.muiName = 'SvgIcon';
	var SvgIcon$1 = SvgIcon;

	function createSvgIcon(path, displayName) {
	  function Component(props, ref) {
	    return /*#__PURE__*/jsxRuntime.exports.jsx(SvgIcon$1, _extends({
	      "data-testid": `${displayName}Icon`,
	      ref: ref
	    }, props, {
	      children: path
	    }));
	  }
	  Component.muiName = SvgIcon$1.muiName;
	  return /*#__PURE__*/react.exports.memo( /*#__PURE__*/react.exports.forwardRef(Component));
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  _setPrototypeOf(subClass, superClass);
	}

	var config = {
	  disabled: false
	};

	var TransitionGroupContext = React.createContext(null);

	var forceReflow = function forceReflow(node) {
	  return node.scrollTop;
	};

	var UNMOUNTED = 'unmounted';
	var EXITED = 'exited';
	var ENTERING = 'entering';
	var ENTERED = 'entered';
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 1 },
	 *   entered:  { opacity: 1 },
	 *   exiting:  { opacity: 0 },
	 *   exited:  { opacity: 0 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	var Transition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }

	    return null;
	  } // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	  ;

	  var _proto = Transition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();

	      if (nextStatus === ENTERING) {
	        if (this.props.unmountOnExit || this.props.mountOnEnter) {
	          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
	          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
	          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

	          if (node) forceReflow(node);
	        }

	        this.performEnter(mounting);
	      } else {
	        this.performExit();
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context ? this.context.isMounting : mounting;

	    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
	        maybeNode = _ref2[0],
	        maybeAppearing = _ref2[1];

	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter || config.disabled) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(maybeNode);
	      });
	      return;
	    }

	    this.props.onEnter(maybeNode, maybeAppearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(maybeNode, maybeAppearing);

	      _this2.onTransitionEnd(enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(maybeNode, maybeAppearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit() {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts();
	    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

	    if (!exit || config.disabled) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(maybeNode);
	      });
	      return;
	    }

	    this.props.onExit(maybeNode);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(maybeNode);

	      _this3.onTransitionEnd(timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(maybeNode);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
	    this.setNextCallback(handler);
	    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
	          maybeNode = _ref3[0],
	          maybeNextCallback = _ref3[1];

	      this.props.addEndListener(maybeNode, maybeNextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children;
	        _this$props.in;
	        _this$props.mountOnEnter;
	        _this$props.unmountOnExit;
	        _this$props.appear;
	        _this$props.enter;
	        _this$props.exit;
	        _this$props.timeout;
	        _this$props.addEndListener;
	        _this$props.onEnter;
	        _this$props.onEntering;
	        _this$props.onEntered;
	        _this$props.onExit;
	        _this$props.onExiting;
	        _this$props.onExited;
	        _this$props.nodeRef;
	        var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

	    return (
	      /*#__PURE__*/
	      // allows for nested Transitions
	      React.createElement(TransitionGroupContext.Provider, {
	        value: null
	      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
	    );
	  };

	  return Transition;
	}(React.Component);

	Transition.contextType = TransitionGroupContext;
	Transition.propTypes = {}; // Name the function so it is clearer in the documentation

	function noop$1() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop$1,
	  onEntering: noop$1,
	  onEntered: noop$1,
	  onExit: noop$1,
	  onExiting: noop$1,
	  onExited: noop$1
	};
	Transition.UNMOUNTED = UNMOUNTED;
	Transition.EXITED = EXITED;
	Transition.ENTERING = ENTERING;
	Transition.ENTERED = ENTERED;
	Transition.EXITING = EXITING;
	var Transition$1 = Transition;

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */

	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && react.exports.isValidElement(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) react.exports.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */

	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return react.exports.cloneElement(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!react.exports.isValidElement(child)) return;
	    var hasPrev = (key in prevChildMapping);
	    var hasNext = (key in nextChildMapping);
	    var prevChild = prevChildMapping[key];
	    var isLeaving = react.exports.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = react.exports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = react.exports.cloneElement(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && react.exports.isValidElement(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = react.exports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	/**
	 * The `<TransitionGroup>` component manages a set of transition components
	 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	 * components, `<TransitionGroup>` is a state machine for managing the mounting
	 * and unmounting of components over time.
	 *
	 * Consider the example below. As items are removed or added to the TodoList the
	 * `in` prop is toggled automatically by the `<TransitionGroup>`.
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual transition
	 * component. This means you can mix and match animations across different list
	 * items.
	 */

	var TransitionGroup = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  } // node is `undefined` when user provided `nodeRef` prop
	  ;

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = getChildMapping(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

	    var contextValue = this.state.contextValue;
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	        value: contextValue
	      }, children);
	    }

	    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	      value: contextValue
	    }, /*#__PURE__*/React.createElement(Component, props, children));
	  };

	  return TransitionGroup;
	}(React.Component);

	TransitionGroup.propTypes = {};
	TransitionGroup.defaultProps = defaultProps;
	var TransitionGroup$1 = TransitionGroup;

	const reflow = node => node.scrollTop;
	function getTransitionProps(props, options) {
	  var _style$transitionDura, _style$transitionTimi;
	  const {
	    timeout,
	    easing,
	    style = {}
	  } = props;
	  return {
	    duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
	    easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
	    delay: style.transitionDelay
	  };
	}

	function getPaperUtilityClass(slot) {
	  return generateUtilityClass('MuiPaper', slot);
	}
	generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);

	const _excluded$1w = ["className", "component", "elevation", "square", "variant"];
	const useUtilityClasses$18 = ownerState => {
	  const {
	    square,
	    elevation,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
	  };
	  return composeClasses(slots, getPaperUtilityClass, classes);
	};
	const PaperRoot = styled$1('div', {
	  name: 'MuiPaper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$vars$overlays;
	  return _extends({
	    backgroundColor: (theme.vars || theme).palette.background.paper,
	    color: (theme.vars || theme).palette.text.primary,
	    transition: theme.transitions.create('box-shadow')
	  }, !ownerState.square && {
	    borderRadius: theme.shape.borderRadius
	  }, ownerState.variant === 'outlined' && {
	    border: `1px solid ${(theme.vars || theme).palette.divider}`
	  }, ownerState.variant === 'elevation' && _extends({
	    boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
	  }, !theme.vars && theme.palette.mode === 'dark' && {
	    backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))}, ${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))})`
	  }, theme.vars && {
	    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
	  }));
	});
	const Paper = /*#__PURE__*/react.exports.forwardRef(function Paper(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPaper'
	  });
	  const {
	      className,
	      component = 'div',
	      elevation = 1,
	      square = false,
	      variant = 'elevation'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1w);
	  const ownerState = _extends({}, props, {
	    component,
	    elevation,
	    square,
	    variant
	  });
	  const classes = useUtilityClasses$18(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(PaperRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other));
	});
	var Paper$1 = Paper;

	function Ripple(props) {
	  const {
	    className,
	    classes,
	    pulsate = false,
	    rippleX,
	    rippleY,
	    rippleSize,
	    in: inProp,
	    onExited,
	    timeout
	  } = props;
	  const [leaving, setLeaving] = react.exports.useState(false);
	  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
	  const rippleStyles = {
	    width: rippleSize,
	    height: rippleSize,
	    top: -(rippleSize / 2) + rippleY,
	    left: -(rippleSize / 2) + rippleX
	  };
	  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
	  if (!inProp && !leaving) {
	    setLeaving(true);
	  }
	  react.exports.useEffect(() => {
	    if (!inProp && onExited != null) {
	      // react-transition-group#onExited
	      const timeoutId = setTimeout(onExited, timeout);
	      return () => {
	        clearTimeout(timeoutId);
	      };
	    }
	    return undefined;
	  }, [onExited, inProp, timeout]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	    className: rippleClassName,
	    style: rippleStyles,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	      className: childClassName
	    })
	  });
	}

	const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
	var touchRippleClasses$1 = touchRippleClasses;

	const _excluded$1v = ["center", "classes", "className"];
	let _$2 = t => t,
	  _t$2,
	  _t2$2,
	  _t3$2,
	  _t4$2;
	const DURATION = 550;
	const DELAY_RIPPLE = 80;
	const enterKeyframe = keyframes(_t$2 || (_t$2 = _$2`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
	const exitKeyframe = keyframes(_t2$2 || (_t2$2 = _$2`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
	const pulsateKeyframe = keyframes(_t3$2 || (_t3$2 = _$2`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
	const TouchRippleRoot = styled$1('span', {
	  name: 'MuiTouchRipple',
	  slot: 'Root'
	})({
	  overflow: 'hidden',
	  pointerEvents: 'none',
	  position: 'absolute',
	  zIndex: 0,
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0,
	  borderRadius: 'inherit'
	});

	// This `styled()` function invokes keyframes. `styled-components` only supports keyframes
	// in string templates. Do not convert these styles in JS object as it will break.
	const TouchRippleRipple = styled$1(Ripple, {
	  name: 'MuiTouchRipple',
	  slot: 'Ripple'
	})(_t4$2 || (_t4$2 = _$2`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
	  theme
	}) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
	  theme
	}) => theme.transitions.easing.easeInOut);

	/**
	 * @ignore - internal component.
	 *
	 * TODO v5: Make private
	 */
	const TouchRipple = /*#__PURE__*/react.exports.forwardRef(function TouchRipple(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTouchRipple'
	  });
	  const {
	      center: centerProp = false,
	      classes = {},
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1v);
	  const [ripples, setRipples] = react.exports.useState([]);
	  const nextKey = react.exports.useRef(0);
	  const rippleCallback = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    if (rippleCallback.current) {
	      rippleCallback.current();
	      rippleCallback.current = null;
	    }
	  }, [ripples]);

	  // Used to filter out mouse emulated events on mobile.
	  const ignoringMouseDown = react.exports.useRef(false);
	  // We use a timer in order to only show the ripples for touch "click" like events.
	  // We don't want to display the ripple for touch scroll events.
	  const startTimer = react.exports.useRef(null);

	  // This is the hook called once the previous timeout is ready.
	  const startTimerCommit = react.exports.useRef(null);
	  const container = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(startTimer.current);
	    };
	  }, []);
	  const startCommit = react.exports.useCallback(params => {
	    const {
	      pulsate,
	      rippleX,
	      rippleY,
	      rippleSize,
	      cb
	    } = params;
	    setRipples(oldRipples => [...oldRipples, /*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRipple, {
	      classes: {
	        ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
	        rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
	        ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
	        child: clsx(classes.child, touchRippleClasses$1.child),
	        childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
	        childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
	      },
	      timeout: DURATION,
	      pulsate: pulsate,
	      rippleX: rippleX,
	      rippleY: rippleY,
	      rippleSize: rippleSize
	    }, nextKey.current)]);
	    nextKey.current += 1;
	    rippleCallback.current = cb;
	  }, [classes]);
	  const start = react.exports.useCallback((event = {}, options = {}, cb = () => {}) => {
	    const {
	      pulsate = false,
	      center = centerProp || options.pulsate,
	      fakeElement = false // For test purposes
	    } = options;
	    if ((event == null ? void 0 : event.type) === 'mousedown' && ignoringMouseDown.current) {
	      ignoringMouseDown.current = false;
	      return;
	    }
	    if ((event == null ? void 0 : event.type) === 'touchstart') {
	      ignoringMouseDown.current = true;
	    }
	    const element = fakeElement ? null : container.current;
	    const rect = element ? element.getBoundingClientRect() : {
	      width: 0,
	      height: 0,
	      left: 0,
	      top: 0
	    };

	    // Get the size of the ripple
	    let rippleX;
	    let rippleY;
	    let rippleSize;
	    if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
	      rippleX = Math.round(rect.width / 2);
	      rippleY = Math.round(rect.height / 2);
	    } else {
	      const {
	        clientX,
	        clientY
	      } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
	      rippleX = Math.round(clientX - rect.left);
	      rippleY = Math.round(clientY - rect.top);
	    }
	    if (center) {
	      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);

	      // For some reason the animation is broken on Mobile Chrome if the size is even.
	      if (rippleSize % 2 === 0) {
	        rippleSize += 1;
	      }
	    } else {
	      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
	      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
	      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
	    }

	    // Touche devices
	    if (event != null && event.touches) {
	      // check that this isn't another touchstart due to multitouch
	      // otherwise we will only clear a single timer when unmounting while two
	      // are running
	      if (startTimerCommit.current === null) {
	        // Prepare the ripple effect.
	        startTimerCommit.current = () => {
	          startCommit({
	            pulsate,
	            rippleX,
	            rippleY,
	            rippleSize,
	            cb
	          });
	        };
	        // Delay the execution of the ripple effect.
	        startTimer.current = setTimeout(() => {
	          if (startTimerCommit.current) {
	            startTimerCommit.current();
	            startTimerCommit.current = null;
	          }
	        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
	      }
	    } else {
	      startCommit({
	        pulsate,
	        rippleX,
	        rippleY,
	        rippleSize,
	        cb
	      });
	    }
	  }, [centerProp, startCommit]);
	  const pulsate = react.exports.useCallback(() => {
	    start({}, {
	      pulsate: true
	    });
	  }, [start]);
	  const stop = react.exports.useCallback((event, cb) => {
	    clearTimeout(startTimer.current);

	    // The touch interaction occurs too quickly.
	    // We still want to show ripple effect.
	    if ((event == null ? void 0 : event.type) === 'touchend' && startTimerCommit.current) {
	      startTimerCommit.current();
	      startTimerCommit.current = null;
	      startTimer.current = setTimeout(() => {
	        stop(event, cb);
	      });
	      return;
	    }
	    startTimerCommit.current = null;
	    setRipples(oldRipples => {
	      if (oldRipples.length > 0) {
	        return oldRipples.slice(1);
	      }
	      return oldRipples;
	    });
	    rippleCallback.current = cb;
	  }, []);
	  react.exports.useImperativeHandle(ref, () => ({
	    pulsate,
	    start,
	    stop
	  }), [pulsate, start, stop]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TouchRippleRoot, _extends({
	    className: clsx(touchRippleClasses$1.root, classes.root, className),
	    ref: container
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionGroup$1, {
	      component: null,
	      exit: true,
	      children: ripples
	    })
	  }));
	});
	var TouchRipple$1 = TouchRipple;

	function getButtonBaseUtilityClass(slot) {
	  return generateUtilityClass('MuiButtonBase', slot);
	}
	const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
	var buttonBaseClasses$1 = buttonBaseClasses;

	const _excluded$1u = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
	const useUtilityClasses$17 = ownerState => {
	  const {
	    disabled,
	    focusVisible,
	    focusVisibleClassName,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
	  };
	  const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
	  if (focusVisible && focusVisibleClassName) {
	    composedClasses.root += ` ${focusVisibleClassName}`;
	  }
	  return composedClasses;
	};
	const ButtonBaseRoot = styled$1('button', {
	  name: 'MuiButtonBase',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'inline-flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  position: 'relative',
	  boxSizing: 'border-box',
	  WebkitTapHighlightColor: 'transparent',
	  backgroundColor: 'transparent',
	  // Reset default value
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0,
	  border: 0,
	  margin: 0,
	  // Remove the margin in Safari
	  borderRadius: 0,
	  padding: 0,
	  // Remove the padding in Firefox
	  cursor: 'pointer',
	  userSelect: 'none',
	  verticalAlign: 'middle',
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  textDecoration: 'none',
	  // So we take precedent over the style of a native <a /> element.
	  color: 'inherit',
	  '&::-moz-focus-inner': {
	    borderStyle: 'none' // Remove Firefox dotted outline.
	  },

	  [`&.${buttonBaseClasses$1.disabled}`]: {
	    pointerEvents: 'none',
	    // Disable link interactions
	    cursor: 'default'
	  },
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	});

	/**
	 * `ButtonBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating a button.
	 * It contains a load of style reset and some focus/ripple logic.
	 */
	const ButtonBase = /*#__PURE__*/react.exports.forwardRef(function ButtonBase(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiButtonBase'
	  });
	  const {
	      action,
	      centerRipple = false,
	      children,
	      className,
	      component = 'button',
	      disabled = false,
	      disableRipple = false,
	      disableTouchRipple = false,
	      focusRipple = false,
	      LinkComponent = 'a',
	      onBlur,
	      onClick,
	      onContextMenu,
	      onDragLeave,
	      onFocus,
	      onFocusVisible,
	      onKeyDown,
	      onKeyUp,
	      onMouseDown,
	      onMouseLeave,
	      onMouseUp,
	      onTouchEnd,
	      onTouchMove,
	      onTouchStart,
	      tabIndex = 0,
	      TouchRippleProps,
	      touchRippleRef,
	      type
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1u);
	  const buttonRef = react.exports.useRef(null);
	  const rippleRef = react.exports.useRef(null);
	  const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
	  const {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = react.exports.useState(false);
	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }
	  react.exports.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      buttonRef.current.focus();
	    }
	  }), []);
	  const [mountedState, setMountedState] = react.exports.useState(false);
	  react.exports.useEffect(() => {
	    setMountedState(true);
	  }, []);
	  const enableTouchRipple = mountedState && !disableRipple && !disabled;
	  react.exports.useEffect(() => {
	    if (focusVisible && focusRipple && !disableRipple && mountedState) {
	      rippleRef.current.pulsate();
	    }
	  }, [disableRipple, focusRipple, focusVisible, mountedState]);
	  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
	    return useEventCallback(event => {
	      if (eventCallback) {
	        eventCallback(event);
	      }
	      const ignore = skipRippleAction;
	      if (!ignore && rippleRef.current) {
	        rippleRef.current[rippleAction](event);
	      }
	      return true;
	    });
	  }
	  const handleMouseDown = useRippleHandler('start', onMouseDown);
	  const handleContextMenu = useRippleHandler('stop', onContextMenu);
	  const handleDragLeave = useRippleHandler('stop', onDragLeave);
	  const handleMouseUp = useRippleHandler('stop', onMouseUp);
	  const handleMouseLeave = useRippleHandler('stop', event => {
	    if (focusVisible) {
	      event.preventDefault();
	    }
	    if (onMouseLeave) {
	      onMouseLeave(event);
	    }
	  });
	  const handleTouchStart = useRippleHandler('start', onTouchStart);
	  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
	  const handleTouchMove = useRippleHandler('stop', onTouchMove);
	  const handleBlur = useRippleHandler('stop', event => {
	    handleBlurVisible(event);
	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }
	    if (onBlur) {
	      onBlur(event);
	    }
	  }, false);
	  const handleFocus = useEventCallback(event => {
	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!buttonRef.current) {
	      buttonRef.current = event.currentTarget;
	    }
	    handleFocusVisible(event);
	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);
	      if (onFocusVisible) {
	        onFocusVisible(event);
	      }
	    }
	    if (onFocus) {
	      onFocus(event);
	    }
	  });
	  const isNonNativeButton = () => {
	    const button = buttonRef.current;
	    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
	  };

	  /**
	   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
	   */
	  const keydownRef = react.exports.useRef(false);
	  const handleKeyDown = useEventCallback(event => {
	    // Check if key is already down to avoid repeats being counted as multiple activations
	    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
	      keydownRef.current = true;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.start(event);
	      });
	    }
	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
	      event.preventDefault();
	    }
	    if (onKeyDown) {
	      onKeyDown(event);
	    }

	    // Keyboard accessibility for non interactive elements
	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
	      event.preventDefault();
	      if (onClick) {
	        onClick(event);
	      }
	    }
	  });
	  const handleKeyUp = useEventCallback(event => {
	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
	    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
	      keydownRef.current = false;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.pulsate(event);
	      });
	    }
	    if (onKeyUp) {
	      onKeyUp(event);
	    }

	    // Keyboard accessibility for non interactive elements
	    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
	      onClick(event);
	    }
	  });
	  let ComponentProp = component;
	  if (ComponentProp === 'button' && (other.href || other.to)) {
	    ComponentProp = LinkComponent;
	  }
	  const buttonProps = {};
	  if (ComponentProp === 'button') {
	    buttonProps.type = type === undefined ? 'button' : type;
	    buttonProps.disabled = disabled;
	  } else {
	    if (!other.href && !other.to) {
	      buttonProps.role = 'button';
	    }
	    if (disabled) {
	      buttonProps['aria-disabled'] = disabled;
	    }
	  }
	  const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
	  const ownerState = _extends({}, props, {
	    centerRipple,
	    component,
	    disabled,
	    disableRipple,
	    disableTouchRipple,
	    focusRipple,
	    tabIndex,
	    focusVisible
	  });
	  const classes = useUtilityClasses$17(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonBaseRoot, _extends({
	    as: ComponentProp,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    onBlur: handleBlur,
	    onClick: onClick,
	    onContextMenu: handleContextMenu,
	    onFocus: handleFocus,
	    onKeyDown: handleKeyDown,
	    onKeyUp: handleKeyUp,
	    onMouseDown: handleMouseDown,
	    onMouseLeave: handleMouseLeave,
	    onMouseUp: handleMouseUp,
	    onDragLeave: handleDragLeave,
	    onTouchEnd: handleTouchEnd,
	    onTouchMove: handleTouchMove,
	    onTouchStart: handleTouchStart,
	    ref: handleRef,
	    tabIndex: disabled ? -1 : tabIndex,
	    type: type
	  }, buttonProps, other, {
	    children: [children, enableTouchRipple ?
	    /*#__PURE__*/
	    /* TouchRipple is only needed client-side, x2 boost on the server. */
	    jsxRuntime.exports.jsx(TouchRipple$1, _extends({
	      ref: handleRippleRef,
	      center: centerRipple
	    }, TouchRippleProps)) : null]
	  }));
	});
	var ButtonBase$1 = ButtonBase;

	function getIconButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiIconButton', slot);
	}
	const iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
	var iconButtonClasses$1 = iconButtonClasses;

	const _excluded$1t = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
	const useUtilityClasses$16 = ownerState => {
	  const {
	    classes,
	    disabled,
	    color,
	    edge,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getIconButtonUtilityClass, classes);
	};
	const IconButtonRoot = styled$1(ButtonBase$1, {
	  name: 'MuiIconButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  textAlign: 'center',
	  flex: '0 0 auto',
	  fontSize: theme.typography.pxToRem(24),
	  padding: 8,
	  borderRadius: '50%',
	  overflow: 'visible',
	  // Explicitly set the default value to solve a bug on IE11.
	  color: (theme.vars || theme).palette.action.active,
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  })
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}), ({
	  theme,
	  ownerState
	}) => {
	  var _palette;
	  const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
	  return _extends({}, ownerState.color === 'inherit' && {
	    color: 'inherit'
	  }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && _extends({
	    color: palette == null ? void 0 : palette.main
	  }, !ownerState.disableRipple && {
	    '&:hover': _extends({}, palette && {
	      backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette.main, theme.palette.action.hoverOpacity)
	    }, {
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    })
	  }), ownerState.size === 'small' && {
	    padding: 5,
	    fontSize: theme.typography.pxToRem(18)
	  }, ownerState.size === 'large' && {
	    padding: 12,
	    fontSize: theme.typography.pxToRem(28)
	  }, {
	    [`&.${iconButtonClasses$1.disabled}`]: {
	      backgroundColor: 'transparent',
	      color: (theme.vars || theme).palette.action.disabled
	    }
	  });
	});

	/**
	 * Refer to the [Icons](/material-ui/icons/) section of the documentation
	 * regarding the available icon options.
	 */
	const IconButton = /*#__PURE__*/react.exports.forwardRef(function IconButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiIconButton'
	  });
	  const {
	      edge = false,
	      children,
	      className,
	      color = 'default',
	      disabled = false,
	      disableFocusRipple = false,
	      size = 'medium'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1t);
	  const ownerState = _extends({}, props, {
	    edge,
	    color,
	    disabled,
	    disableFocusRipple,
	    size
	  });
	  const classes = useUtilityClasses$16(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(IconButtonRoot, _extends({
	    className: clsx(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: children
	  }));
	});
	var IconButton$1 = IconButton;

	var ClearIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
	}), 'Close');

	function getTypographyUtilityClass(slot) {
	  return generateUtilityClass('MuiTypography', slot);
	}
	generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

	const _excluded$1s = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
	const useUtilityClasses$15 = ownerState => {
	  const {
	    align,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
	  };
	  return composeClasses(slots, getTypographyUtilityClass, classes);
	};
	const TypographyRoot = styled$1('span', {
	  name: 'MuiTypography',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  margin: 0
	}, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
	  textAlign: ownerState.align
	}, ownerState.noWrap && {
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  whiteSpace: 'nowrap'
	}, ownerState.gutterBottom && {
	  marginBottom: '0.35em'
	}, ownerState.paragraph && {
	  marginBottom: 16
	}));
	const defaultVariantMapping = {
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  subtitle1: 'h6',
	  subtitle2: 'h6',
	  body1: 'p',
	  body2: 'p',
	  inherit: 'p'
	};

	// TODO v6: deprecate these color values in v5.x and remove the transformation in v6
	const colorTransformations = {
	  primary: 'primary.main',
	  textPrimary: 'text.primary',
	  secondary: 'secondary.main',
	  textSecondary: 'text.secondary',
	  error: 'error.main'
	};
	const transformDeprecatedColors = color => {
	  return colorTransformations[color] || color;
	};
	const Typography = /*#__PURE__*/react.exports.forwardRef(function Typography(inProps, ref) {
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiTypography'
	  });
	  const color = transformDeprecatedColors(themeProps.color);
	  const props = extendSxProp(_extends({}, themeProps, {
	    color
	  }));
	  const {
	      align = 'inherit',
	      className,
	      component,
	      gutterBottom = false,
	      noWrap = false,
	      paragraph = false,
	      variant = 'body1',
	      variantMapping = defaultVariantMapping
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1s);
	  const ownerState = _extends({}, props, {
	    align,
	    color,
	    className,
	    component,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    variantMapping
	  });
	  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
	  const classes = useUtilityClasses$15(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TypographyRoot, _extends({
	    as: Component,
	    ref: ref,
	    ownerState: ownerState,
	    className: clsx(classes.root, className)
	  }, other));
	});
	var Typography$1 = Typography;

	const _excluded$1r = ["components", "componentsProps", "slots", "slotProps"];
	const PopperRoot = styled$1(PopperUnstyled$1, {
	  name: 'MuiPopper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});

	/**
	 *
	 * Demos:
	 *
	 * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)
	 * - [Menu](https://mui.com/material-ui/react-menu/)
	 * - [Popper](https://mui.com/material-ui/react-popper/)
	 *
	 * API:
	 *
	 * - [Popper API](https://mui.com/material-ui/api/popper/)
	 */
	const Popper = /*#__PURE__*/react.exports.forwardRef(function Popper(inProps, ref) {
	  var _slots$root;
	  const theme = useTheme$2();
	  const _useThemeProps = useThemeProps({
	      props: inProps,
	      name: 'MuiPopper'
	    }),
	    {
	      components,
	      componentsProps,
	      slots,
	      slotProps
	    } = _useThemeProps,
	    other = _objectWithoutPropertiesLoose(_useThemeProps, _excluded$1r);
	  const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(PopperRoot, _extends({
	    direction: theme == null ? void 0 : theme.direction,
	    slots: {
	      root: RootComponent
	    },
	    slotProps: slotProps != null ? slotProps : componentsProps
	  }, other, {
	    ref: ref
	  }));
	});
	var MUIPopper = Popper;

	function getListSubheaderUtilityClass(slot) {
	  return generateUtilityClass('MuiListSubheader', slot);
	}
	generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);

	const _excluded$1q = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
	const useUtilityClasses$14 = ownerState => {
	  const {
	    classes,
	    color,
	    disableGutters,
	    inset,
	    disableSticky
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']
	  };
	  return composeClasses(slots, getListSubheaderUtilityClass, classes);
	};
	const ListSubheaderRoot = styled$1('li', {
	  name: 'MuiListSubheader',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  boxSizing: 'border-box',
	  lineHeight: '48px',
	  listStyle: 'none',
	  color: (theme.vars || theme).palette.text.secondary,
	  fontFamily: theme.typography.fontFamily,
	  fontWeight: theme.typography.fontWeightMedium,
	  fontSize: theme.typography.pxToRem(14)
	}, ownerState.color === 'primary' && {
	  color: (theme.vars || theme).palette.primary.main
	}, ownerState.color === 'inherit' && {
	  color: 'inherit'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.inset && {
	  paddingLeft: 72
	}, !ownerState.disableSticky && {
	  position: 'sticky',
	  top: 0,
	  zIndex: 1,
	  backgroundColor: (theme.vars || theme).palette.background.paper
	}));
	const ListSubheader = /*#__PURE__*/react.exports.forwardRef(function ListSubheader(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListSubheader'
	  });
	  const {
	      className,
	      color = 'default',
	      component = 'li',
	      disableGutters = false,
	      disableSticky = false,
	      inset = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1q);
	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disableGutters,
	    disableSticky,
	    inset
	  });
	  const classes = useUtilityClasses$14(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListSubheaderRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	var ListSubheader$1 = ListSubheader;

	var CancelIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
	}), 'Cancel');

	function getChipUtilityClass(slot) {
	  return generateUtilityClass('MuiChip', slot);
	}
	const chipClasses = generateUtilityClasses('MuiChip', ['root', 'sizeSmall', 'sizeMedium', 'colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'disabled', 'clickable', 'clickableColorPrimary', 'clickableColorSecondary', 'deletable', 'deletableColorPrimary', 'deletableColorSecondary', 'outlined', 'filled', 'outlinedPrimary', 'outlinedSecondary', 'filledPrimary', 'filledSecondary', 'avatar', 'avatarSmall', 'avatarMedium', 'avatarColorPrimary', 'avatarColorSecondary', 'icon', 'iconSmall', 'iconMedium', 'iconColorPrimary', 'iconColorSecondary', 'label', 'labelSmall', 'labelMedium', 'deleteIcon', 'deleteIconSmall', 'deleteIconMedium', 'deleteIconColorPrimary', 'deleteIconColorSecondary', 'deleteIconOutlinedColorPrimary', 'deleteIconOutlinedColorSecondary', 'deleteIconFilledColorPrimary', 'deleteIconFilledColorSecondary', 'focusVisible']);
	var chipClasses$1 = chipClasses;

	const _excluded$1p = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant"];
	const useUtilityClasses$13 = ownerState => {
	  const {
	    classes,
	    disabled,
	    size,
	    color,
	    iconColor,
	    onDelete,
	    clickable,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, disabled && 'disabled', `size${capitalize(size)}`, `color${capitalize(color)}`, clickable && 'clickable', clickable && `clickableColor${capitalize(color)}`, onDelete && 'deletable', onDelete && `deletableColor${capitalize(color)}`, `${variant}${capitalize(color)}`],
	    label: ['label', `label${capitalize(size)}`],
	    avatar: ['avatar', `avatar${capitalize(size)}`, `avatarColor${capitalize(color)}`],
	    icon: ['icon', `icon${capitalize(size)}`, `iconColor${capitalize(iconColor)}`],
	    deleteIcon: ['deleteIcon', `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color)}`, `deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
	  };
	  return composeClasses(slots, getChipUtilityClass, classes);
	};
	const ChipRoot = styled$1('div', {
	  name: 'MuiChip',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      color,
	      iconColor,
	      clickable,
	      onDelete,
	      size,
	      variant
	    } = ownerState;
	    return [{
	      [`& .${chipClasses$1.avatar}`]: styles.avatar
	    }, {
	      [`& .${chipClasses$1.avatar}`]: styles[`avatar${capitalize(size)}`]
	    }, {
	      [`& .${chipClasses$1.avatar}`]: styles[`avatarColor${capitalize(color)}`]
	    }, {
	      [`& .${chipClasses$1.icon}`]: styles.icon
	    }, {
	      [`& .${chipClasses$1.icon}`]: styles[`icon${capitalize(size)}`]
	    }, {
	      [`& .${chipClasses$1.icon}`]: styles[`iconColor${capitalize(iconColor)}`]
	    }, {
	      [`& .${chipClasses$1.deleteIcon}`]: styles.deleteIcon
	    }, {
	      [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIcon${capitalize(size)}`]
	    }, {
	      [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIconColor${capitalize(color)}`]
	    }, {
	      [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
	    }, styles.root, styles[`size${capitalize(size)}`], styles[`color${capitalize(color)}`], clickable && styles.clickable, clickable && color !== 'default' && styles[`clickableColor${capitalize(color)})`], onDelete && styles.deletable, onDelete && color !== 'default' && styles[`deletableColor${capitalize(color)}`], styles[variant], styles[`${variant}${capitalize(color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const deleteIconColor = alpha(theme.palette.text.primary, 0.26);
	  const textColor = theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300];
	  return _extends({
	    maxWidth: '100%',
	    fontFamily: theme.typography.fontFamily,
	    fontSize: theme.typography.pxToRem(13),
	    display: 'inline-flex',
	    alignItems: 'center',
	    justifyContent: 'center',
	    height: 32,
	    color: (theme.vars || theme).palette.text.primary,
	    backgroundColor: (theme.vars || theme).palette.action.selected,
	    borderRadius: 32 / 2,
	    whiteSpace: 'nowrap',
	    transition: theme.transitions.create(['background-color', 'box-shadow']),
	    // label will inherit this from root, then `clickable` class overrides this for both
	    cursor: 'default',
	    // We disable the focus ring for mouse, touch and keyboard users.
	    outline: 0,
	    textDecoration: 'none',
	    border: 0,
	    // Remove `button` border
	    padding: 0,
	    // Remove `button` padding
	    verticalAlign: 'middle',
	    boxSizing: 'border-box',
	    [`&.${chipClasses$1.disabled}`]: {
	      opacity: (theme.vars || theme).palette.action.disabledOpacity,
	      pointerEvents: 'none'
	    },
	    [`& .${chipClasses$1.avatar}`]: {
	      marginLeft: 5,
	      marginRight: -6,
	      width: 24,
	      height: 24,
	      color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
	      fontSize: theme.typography.pxToRem(12)
	    },
	    [`& .${chipClasses$1.avatarColorPrimary}`]: {
	      color: (theme.vars || theme).palette.primary.contrastText,
	      backgroundColor: (theme.vars || theme).palette.primary.dark
	    },
	    [`& .${chipClasses$1.avatarColorSecondary}`]: {
	      color: (theme.vars || theme).palette.secondary.contrastText,
	      backgroundColor: (theme.vars || theme).palette.secondary.dark
	    },
	    [`& .${chipClasses$1.avatarSmall}`]: {
	      marginLeft: 4,
	      marginRight: -4,
	      width: 18,
	      height: 18,
	      fontSize: theme.typography.pxToRem(10)
	    },
	    [`& .${chipClasses$1.icon}`]: _extends({
	      marginLeft: 5,
	      marginRight: -6
	    }, ownerState.size === 'small' && {
	      fontSize: 18,
	      marginLeft: 4,
	      marginRight: -4
	    }, ownerState.iconColor === ownerState.color && _extends({
	      color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
	    }, ownerState.color !== 'default' && {
	      color: 'inherit'
	    })),
	    [`& .${chipClasses$1.deleteIcon}`]: _extends({
	      WebkitTapHighlightColor: 'transparent',
	      color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : deleteIconColor,
	      fontSize: 22,
	      cursor: 'pointer',
	      margin: '0 5px 0 -6px',
	      '&:hover': {
	        color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(deleteIconColor, 0.4)
	      }
	    }, ownerState.size === 'small' && {
	      fontSize: 16,
	      marginRight: 4,
	      marginLeft: -4
	    }, ownerState.color !== 'default' && {
	      color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
	      '&:hover, &:active': {
	        color: (theme.vars || theme).palette[ownerState.color].contrastText
	      }
	    })
	  }, ownerState.size === 'small' && {
	    height: 24
	  }, ownerState.color !== 'default' && {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	    color: (theme.vars || theme).palette[ownerState.color].contrastText
	  }, ownerState.onDelete && {
	    [`&.${chipClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity + theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  }, ownerState.onDelete && ownerState.color !== 'default' && {
	    [`&.${chipClasses$1.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
	    }
	  });
	}, ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.clickable && {
	  userSelect: 'none',
	  WebkitTapHighlightColor: 'transparent',
	  cursor: 'pointer',
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity + theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
	  },
	  [`&.${chipClasses$1.focusVisible}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity + theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	  },
	  '&:active': {
	    boxShadow: (theme.vars || theme).shadows[1]
	  }
	}, ownerState.clickable && ownerState.color !== 'default' && {
	  [`&:hover, &.${chipClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.variant === 'outlined' && {
	  backgroundColor: 'transparent',
	  border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[700]}`,
	  [`&.${chipClasses$1.clickable}:hover`]: {
	    backgroundColor: (theme.vars || theme).palette.action.hover
	  },
	  [`&.${chipClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`& .${chipClasses$1.avatar}`]: {
	    marginLeft: 4
	  },
	  [`& .${chipClasses$1.avatarSmall}`]: {
	    marginLeft: 2
	  },
	  [`& .${chipClasses$1.icon}`]: {
	    marginLeft: 4
	  },
	  [`& .${chipClasses$1.iconSmall}`]: {
	    marginLeft: 2
	  },
	  [`& .${chipClasses$1.deleteIcon}`]: {
	    marginRight: 5
	  },
	  [`& .${chipClasses$1.deleteIconSmall}`]: {
	    marginRight: 3
	  }
	}, ownerState.variant === 'outlined' && ownerState.color !== 'default' && {
	  color: (theme.vars || theme).palette[ownerState.color].main,
	  border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
	  [`&.${chipClasses$1.clickable}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
	  },
	  [`&.${chipClasses$1.focusVisible}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
	  },
	  [`& .${chipClasses$1.deleteIcon}`]: {
	    color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
	    '&:hover, &:active': {
	      color: (theme.vars || theme).palette[ownerState.color].main
	    }
	  }
	}));
	const ChipLabel = styled$1('span', {
	  name: 'MuiChip',
	  slot: 'Label',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      size
	    } = ownerState;
	    return [styles.label, styles[`label${capitalize(size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  paddingLeft: 12,
	  paddingRight: 12,
	  whiteSpace: 'nowrap'
	}, ownerState.size === 'small' && {
	  paddingLeft: 8,
	  paddingRight: 8
	}));
	function isDeleteKeyboardEvent(keyboardEvent) {
	  return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';
	}

	/**
	 * Chips represent complex entities in small blocks, such as a contact.
	 */
	const Chip = /*#__PURE__*/react.exports.forwardRef(function Chip(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiChip'
	  });
	  const {
	      avatar: avatarProp,
	      className,
	      clickable: clickableProp,
	      color = 'default',
	      component: ComponentProp,
	      deleteIcon: deleteIconProp,
	      disabled = false,
	      icon: iconProp,
	      label,
	      onClick,
	      onDelete,
	      onKeyDown,
	      onKeyUp,
	      size = 'medium',
	      variant = 'filled'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1p);
	  const chipRef = react.exports.useRef(null);
	  const handleRef = useForkRef(chipRef, ref);
	  const handleDeleteIconClick = event => {
	    // Stop the event from bubbling up to the `Chip`
	    event.stopPropagation();
	    if (onDelete) {
	      onDelete(event);
	    }
	  };
	  const handleKeyDown = event => {
	    // Ignore events from children of `Chip`.
	    if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
	      // Will be handled in keyUp, otherwise some browsers
	      // might init navigation
	      event.preventDefault();
	    }
	    if (onKeyDown) {
	      onKeyDown(event);
	    }
	  };
	  const handleKeyUp = event => {
	    // Ignore events from children of `Chip`.
	    if (event.currentTarget === event.target) {
	      if (onDelete && isDeleteKeyboardEvent(event)) {
	        onDelete(event);
	      } else if (event.key === 'Escape' && chipRef.current) {
	        chipRef.current.blur();
	      }
	    }
	    if (onKeyUp) {
	      onKeyUp(event);
	    }
	  };
	  const clickable = clickableProp !== false && onClick ? true : clickableProp;
	  const component = clickable || onDelete ? ButtonBase$1 : ComponentProp || 'div';
	  const ownerState = _extends({}, props, {
	    component,
	    disabled,
	    size,
	    color,
	    iconColor: /*#__PURE__*/react.exports.isValidElement(iconProp) ? iconProp.props.color || color : color,
	    onDelete: !!onDelete,
	    clickable,
	    variant
	  });
	  const classes = useUtilityClasses$13(ownerState);
	  const moreProps = component === ButtonBase$1 ? _extends({
	    component: ComponentProp || 'div',
	    focusVisibleClassName: classes.focusVisible
	  }, onDelete && {
	    disableRipple: true
	  }) : {};
	  let deleteIcon = null;
	  if (onDelete) {
	    deleteIcon = deleteIconProp && /*#__PURE__*/react.exports.isValidElement(deleteIconProp) ? /*#__PURE__*/react.exports.cloneElement(deleteIconProp, {
	      className: clsx(deleteIconProp.props.className, classes.deleteIcon),
	      onClick: handleDeleteIconClick
	    }) : /*#__PURE__*/jsxRuntime.exports.jsx(CancelIcon, {
	      className: clsx(classes.deleteIcon),
	      onClick: handleDeleteIconClick
	    });
	  }
	  let avatar = null;
	  if (avatarProp && /*#__PURE__*/react.exports.isValidElement(avatarProp)) {
	    avatar = /*#__PURE__*/react.exports.cloneElement(avatarProp, {
	      className: clsx(classes.avatar, avatarProp.props.className)
	    });
	  }
	  let icon = null;
	  if (iconProp && /*#__PURE__*/react.exports.isValidElement(iconProp)) {
	    icon = /*#__PURE__*/react.exports.cloneElement(iconProp, {
	      className: clsx(classes.icon, iconProp.props.className)
	    });
	  }
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ChipRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    disabled: clickable && disabled ? true : undefined,
	    onClick: onClick,
	    onKeyDown: handleKeyDown,
	    onKeyUp: handleKeyUp,
	    ref: handleRef,
	    ownerState: ownerState
	  }, moreProps, other, {
	    children: [avatar || icon, /*#__PURE__*/jsxRuntime.exports.jsx(ChipLabel, {
	      className: clsx(classes.label),
	      ownerState: ownerState,
	      children: label
	    }), deleteIcon]
	  }));
	});
	var Chip$1 = Chip;

	function formControlState({
	  props,
	  states,
	  muiFormControl
	}) {
	  return states.reduce((acc, state) => {
	    acc[state] = props[state];
	    if (muiFormControl) {
	      if (typeof props[state] === 'undefined') {
	        acc[state] = muiFormControl[state];
	      }
	    }
	    return acc;
	  }, {});
	}

	/**
	 * @ignore - internal component.
	 */
	const FormControlContext = /*#__PURE__*/react.exports.createContext();
	var FormControlContext$1 = FormControlContext;

	function useFormControl() {
	  return react.exports.useContext(FormControlContext$1);
	}

	function GlobalStyles(props) {
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles$1, _extends({}, props, {
	    defaultTheme: defaultTheme$1
	  }));
	}

	// Supports determination of isControlled().
	// Controlled input accepts its current value as a prop.
	//
	// @see https://facebook.github.io/react/docs/forms.html#controlled-components
	// @param value
	// @returns {boolean} true if string (including '') or number (including zero)
	function hasValue(value) {
	  return value != null && !(Array.isArray(value) && value.length === 0);
	}

	// Determine if field is empty or filled.
	// Response determines if label is presented above field or as placeholder.
	//
	// @param obj
	// @param SSR
	// @returns {boolean} False when not present or empty string.
	//                    True when any number or string with length.
	function isFilled(obj, SSR = false) {
	  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
	}

	// Determine if an Input is adorned on start.
	// It's corresponding to the left with LTR.
	//
	// @param obj
	// @returns {boolean} False when no adornments.
	//                    True when adorned at the start.
	function isAdornedStart(obj) {
	  return obj.startAdornment;
	}

	function getInputBaseUtilityClass(slot) {
	  return generateUtilityClass('MuiInputBase', slot);
	}
	const inputBaseClasses = generateUtilityClasses('MuiInputBase', ['root', 'formControl', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'colorSecondary', 'fullWidth', 'hiddenLabel', 'readOnly', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch', 'inputAdornedStart', 'inputAdornedEnd', 'inputHiddenLabel']);
	var inputBaseClasses$1 = inputBaseClasses;

	const _excluded$1o = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
	const rootOverridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === 'small' && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
	};
	const inputOverridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.input, ownerState.size === 'small' && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === 'search' && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
	};
	const useUtilityClasses$12 = ownerState => {
	  const {
	    classes,
	    color,
	    disabled,
	    error,
	    endAdornment,
	    focused,
	    formControl,
	    fullWidth,
	    hiddenLabel,
	    multiline,
	    readOnly,
	    size,
	    startAdornment,
	    type
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', fullWidth && 'fullWidth', focused && 'focused', formControl && 'formControl', size === 'small' && 'sizeSmall', multiline && 'multiline', startAdornment && 'adornedStart', endAdornment && 'adornedEnd', hiddenLabel && 'hiddenLabel', readOnly && 'readOnly'],
	    input: ['input', disabled && 'disabled', type === 'search' && 'inputTypeSearch', multiline && 'inputMultiline', size === 'small' && 'inputSizeSmall', hiddenLabel && 'inputHiddenLabel', startAdornment && 'inputAdornedStart', endAdornment && 'inputAdornedEnd', readOnly && 'readOnly']
	  };
	  return composeClasses(slots, getInputBaseUtilityClass, classes);
	};
	const InputBaseRoot = styled$1('div', {
	  name: 'MuiInputBase',
	  slot: 'Root',
	  overridesResolver: rootOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body1, {
	  color: (theme.vars || theme).palette.text.primary,
	  lineHeight: '1.4375em',
	  // 23px
	  boxSizing: 'border-box',
	  // Prevent padding issue with fullWidth.
	  position: 'relative',
	  cursor: 'text',
	  display: 'inline-flex',
	  alignItems: 'center',
	  [`&.${inputBaseClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled,
	    cursor: 'default'
	  }
	}, ownerState.multiline && _extends({
	  padding: '4px 0 5px'
	}, ownerState.size === 'small' && {
	  paddingTop: 1
	}), ownerState.fullWidth && {
	  width: '100%'
	}));
	const InputBaseComponent = styled$1('input', {
	  name: 'MuiInputBase',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => {
	  const light = theme.palette.mode === 'light';
	  const placeholder = _extends({
	    color: 'currentColor'
	  }, theme.vars ? {
	    opacity: theme.vars.opacity.inputPlaceholder
	  } : {
	    opacity: light ? 0.42 : 0.5
	  }, {
	    transition: theme.transitions.create('opacity', {
	      duration: theme.transitions.duration.shorter
	    })
	  });
	  const placeholderHidden = {
	    opacity: '0 !important'
	  };
	  const placeholderVisible = theme.vars ? {
	    opacity: theme.vars.opacity.inputPlaceholder
	  } : {
	    opacity: light ? 0.42 : 0.5
	  };
	  return _extends({
	    font: 'inherit',
	    letterSpacing: 'inherit',
	    color: 'currentColor',
	    padding: '4px 0 5px',
	    border: 0,
	    boxSizing: 'content-box',
	    background: 'none',
	    height: '1.4375em',
	    // Reset 23pxthe native input line-height
	    margin: 0,
	    // Reset for Safari
	    WebkitTapHighlightColor: 'transparent',
	    display: 'block',
	    // Make the flex item shrink with Firefox
	    minWidth: 0,
	    width: '100%',
	    // Fix IE11 width issue
	    animationName: 'mui-auto-fill-cancel',
	    animationDuration: '10ms',
	    '&::-webkit-input-placeholder': placeholder,
	    '&::-moz-placeholder': placeholder,
	    // Firefox 19+
	    '&:-ms-input-placeholder': placeholder,
	    // IE11
	    '&::-ms-input-placeholder': placeholder,
	    // Edge
	    '&:focus': {
	      outline: 0
	    },
	    // Reset Firefox invalid required input style
	    '&:invalid': {
	      boxShadow: 'none'
	    },
	    '&::-webkit-search-decoration': {
	      // Remove the padding when type=search.
	      WebkitAppearance: 'none'
	    },
	    // Show and hide the placeholder logic
	    [`label[data-shrink=false] + .${inputBaseClasses$1.formControl} &`]: {
	      '&::-webkit-input-placeholder': placeholderHidden,
	      '&::-moz-placeholder': placeholderHidden,
	      // Firefox 19+
	      '&:-ms-input-placeholder': placeholderHidden,
	      // IE11
	      '&::-ms-input-placeholder': placeholderHidden,
	      // Edge
	      '&:focus::-webkit-input-placeholder': placeholderVisible,
	      '&:focus::-moz-placeholder': placeholderVisible,
	      // Firefox 19+
	      '&:focus:-ms-input-placeholder': placeholderVisible,
	      // IE11
	      '&:focus::-ms-input-placeholder': placeholderVisible // Edge
	    },

	    [`&.${inputBaseClasses$1.disabled}`]: {
	      opacity: 1,
	      // Reset iOS opacity
	      WebkitTextFillColor: (theme.vars || theme).palette.text.disabled // Fix opacity Safari bug
	    },

	    '&:-webkit-autofill': {
	      animationDuration: '5000s',
	      animationName: 'mui-auto-fill'
	    }
	  }, ownerState.size === 'small' && {
	    paddingTop: 1
	  }, ownerState.multiline && {
	    height: 'auto',
	    resize: 'none',
	    padding: 0,
	    paddingTop: 0
	  }, ownerState.type === 'search' && {
	    // Improve type search style.
	    MozAppearance: 'textfield'
	  });
	});
	const inputGlobalStyles = /*#__PURE__*/jsxRuntime.exports.jsx(GlobalStyles, {
	  styles: {
	    '@keyframes mui-auto-fill': {
	      from: {
	        display: 'block'
	      }
	    },
	    '@keyframes mui-auto-fill-cancel': {
	      from: {
	        display: 'block'
	      }
	    }
	  }
	});

	/**
	 * `InputBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating an input.
	 * It contains a load of style reset and some state logic.
	 */
	const InputBase = /*#__PURE__*/react.exports.forwardRef(function InputBase(inProps, ref) {
	  var _slotProps$input;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiInputBase'
	  });
	  const {
	      'aria-describedby': ariaDescribedby,
	      autoComplete,
	      autoFocus,
	      className,
	      components = {},
	      componentsProps = {},
	      defaultValue,
	      disabled,
	      disableInjectingGlobalStyles,
	      endAdornment,
	      fullWidth = false,
	      id,
	      inputComponent = 'input',
	      inputProps: inputPropsProp = {},
	      inputRef: inputRefProp,
	      maxRows,
	      minRows,
	      multiline = false,
	      name,
	      onBlur,
	      onChange,
	      onClick,
	      onFocus,
	      onKeyDown,
	      onKeyUp,
	      placeholder,
	      readOnly,
	      renderSuffix,
	      rows,
	      slotProps = {},
	      slots = {},
	      startAdornment,
	      type = 'text',
	      value: valueProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1o);
	  const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
	  const {
	    current: isControlled
	  } = react.exports.useRef(value != null);
	  const inputRef = react.exports.useRef();
	  const handleInputRefWarning = react.exports.useCallback(instance => {
	  }, []);
	  const handleInputRef = useForkRef(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
	  const [focused, setFocused] = react.exports.useState(false);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['color', 'disabled', 'error', 'hiddenLabel', 'size', 'required', 'filled']
	  });
	  fcs.focused = muiFormControl ? muiFormControl.focused : focused;

	  // The blur won't fire when the disabled state is set on a focused input.
	  // We need to book keep the focused state manually.
	  react.exports.useEffect(() => {
	    if (!muiFormControl && disabled && focused) {
	      setFocused(false);
	      if (onBlur) {
	        onBlur();
	      }
	    }
	  }, [muiFormControl, disabled, focused, onBlur]);
	  const onFilled = muiFormControl && muiFormControl.onFilled;
	  const onEmpty = muiFormControl && muiFormControl.onEmpty;
	  const checkDirty = react.exports.useCallback(obj => {
	    if (isFilled(obj)) {
	      if (onFilled) {
	        onFilled();
	      }
	    } else if (onEmpty) {
	      onEmpty();
	    }
	  }, [onFilled, onEmpty]);
	  useEnhancedEffect$1(() => {
	    if (isControlled) {
	      checkDirty({
	        value
	      });
	    }
	  }, [value, checkDirty, isControlled]);
	  const handleFocus = event => {
	    // Fix a bug with IE11 where the focus/blur events are triggered
	    // while the component is disabled.
	    if (fcs.disabled) {
	      event.stopPropagation();
	      return;
	    }
	    if (onFocus) {
	      onFocus(event);
	    }
	    if (inputPropsProp.onFocus) {
	      inputPropsProp.onFocus(event);
	    }
	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    } else {
	      setFocused(true);
	    }
	  };
	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }
	    if (inputPropsProp.onBlur) {
	      inputPropsProp.onBlur(event);
	    }
	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    } else {
	      setFocused(false);
	    }
	  };
	  const handleChange = (event, ...args) => {
	    if (!isControlled) {
	      const element = event.target || inputRef.current;
	      if (element == null) {
	        throw new Error(formatMuiErrorMessage(1));
	      }
	      checkDirty({
	        value: element.value
	      });
	    }
	    if (inputPropsProp.onChange) {
	      inputPropsProp.onChange(event, ...args);
	    }

	    // Perform in the willUpdate
	    if (onChange) {
	      onChange(event, ...args);
	    }
	  };

	  // Check the input state on mount, in case it was filled by the user
	  // or auto filled by the browser before the hydration (for SSR).
	  react.exports.useEffect(() => {
	    checkDirty(inputRef.current);
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  const handleClick = event => {
	    if (inputRef.current && event.currentTarget === event.target) {
	      inputRef.current.focus();
	    }
	    if (onClick) {
	      onClick(event);
	    }
	  };
	  let InputComponent = inputComponent;
	  let inputProps = inputPropsProp;
	  if (multiline && InputComponent === 'input') {
	    if (rows) {
	      inputProps = _extends({
	        type: undefined,
	        minRows: rows,
	        maxRows: rows
	      }, inputProps);
	    } else {
	      inputProps = _extends({
	        type: undefined,
	        maxRows,
	        minRows
	      }, inputProps);
	    }
	    InputComponent = TextareaAutosize$1;
	  }
	  const handleAutoFill = event => {
	    // Provide a fake value as Chrome might not let you access it for security reasons.
	    checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
	      value: 'x'
	    });
	  };
	  react.exports.useEffect(() => {
	    if (muiFormControl) {
	      muiFormControl.setAdornedStart(Boolean(startAdornment));
	    }
	  }, [muiFormControl, startAdornment]);
	  const ownerState = _extends({}, props, {
	    color: fcs.color || 'primary',
	    disabled: fcs.disabled,
	    endAdornment,
	    error: fcs.error,
	    focused: fcs.focused,
	    formControl: muiFormControl,
	    fullWidth,
	    hiddenLabel: fcs.hiddenLabel,
	    multiline,
	    size: fcs.size,
	    startAdornment,
	    type
	  });
	  const classes = useUtilityClasses$12(ownerState);
	  const Root = slots.root || components.Root || InputBaseRoot;
	  const rootProps = slotProps.root || componentsProps.root || {};
	  const Input = slots.input || components.Input || InputBaseComponent;
	  inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [!disableInjectingGlobalStyles && inputGlobalStyles, /*#__PURE__*/jsxRuntime.exports.jsxs(Root, _extends({}, rootProps, !isHostComponent(Root) && {
	      ownerState: _extends({}, ownerState, rootProps.ownerState)
	    }, {
	      ref: ref,
	      onClick: handleClick
	    }, other, {
	      className: clsx(classes.root, rootProps.className, className),
	      children: [startAdornment, /*#__PURE__*/jsxRuntime.exports.jsx(FormControlContext$1.Provider, {
	        value: null,
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(Input, _extends({
	          ownerState: ownerState,
	          "aria-invalid": fcs.error,
	          "aria-describedby": ariaDescribedby,
	          autoComplete: autoComplete,
	          autoFocus: autoFocus,
	          defaultValue: defaultValue,
	          disabled: fcs.disabled,
	          id: id,
	          onAnimationStart: handleAutoFill,
	          name: name,
	          placeholder: placeholder,
	          readOnly: readOnly,
	          required: fcs.required,
	          rows: rows,
	          value: value,
	          onKeyDown: onKeyDown,
	          onKeyUp: onKeyUp,
	          type: type
	        }, inputProps, !isHostComponent(Input) && {
	          as: InputComponent,
	          ownerState: _extends({}, ownerState, inputProps.ownerState)
	        }, {
	          ref: handleInputRef,
	          className: clsx(classes.input, inputProps.className),
	          onBlur: handleBlur,
	          onChange: handleChange,
	          onFocus: handleFocus
	        }))
	      }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
	        startAdornment
	      })) : null]
	    }))]
	  });
	});
	var InputBase$1 = InputBase;

	function getInputUtilityClass(slot) {
	  return generateUtilityClass('MuiInput', slot);
	}
	const inputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiInput', ['root', 'underline', 'input']));
	var inputClasses$1 = inputClasses;

	function getOutlinedInputUtilityClass(slot) {
	  return generateUtilityClass('MuiOutlinedInput', slot);
	}
	const outlinedInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiOutlinedInput', ['root', 'notchedOutline', 'input']));
	var outlinedInputClasses$1 = outlinedInputClasses;

	function getFilledInputUtilityClass(slot) {
	  return generateUtilityClass('MuiFilledInput', slot);
	}
	const filledInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiFilledInput', ['root', 'underline', 'input']));
	var filledInputClasses$1 = filledInputClasses;

	var ArrowDropDownIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M7 10l5 5 5-5z"
	}), 'ArrowDropDown');

	function getAutocompleteUtilityClass(slot) {
	  return generateUtilityClass('MuiAutocomplete', slot);
	}
	const autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);
	var autocompleteClasses$1 = autocompleteClasses;

	var _ClearIcon, _ArrowDropDownIcon;
	const _excluded$1n = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
	const useUtilityClasses$11 = ownerState => {
	  const {
	    classes,
	    disablePortal,
	    focused,
	    fullWidth,
	    hasClearIcon,
	    hasPopupIcon,
	    inputFocused,
	    popupOpen,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],
	    inputRoot: ['inputRoot'],
	    input: ['input', inputFocused && 'inputFocused'],
	    tag: ['tag', `tagSize${capitalize(size)}`],
	    endAdornment: ['endAdornment'],
	    clearIndicator: ['clearIndicator'],
	    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],
	    popper: ['popper', disablePortal && 'popperDisablePortal'],
	    paper: ['paper'],
	    listbox: ['listbox'],
	    loading: ['loading'],
	    noOptions: ['noOptions'],
	    option: ['option'],
	    groupLabel: ['groupLabel'],
	    groupUl: ['groupUl']
	  };
	  return composeClasses(slots, getAutocompleteUtilityClass, classes);
	};
	const AutocompleteRoot = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      fullWidth,
	      hasClearIcon,
	      hasPopupIcon,
	      inputFocused,
	      size
	    } = ownerState;
	    return [{
	      [`& .${autocompleteClasses$1.tag}`]: styles.tag
	    }, {
	      [`& .${autocompleteClasses$1.tag}`]: styles[`tagSize${capitalize(size)}`]
	    }, {
	      [`& .${autocompleteClasses$1.inputRoot}`]: styles.inputRoot
	    }, {
	      [`& .${autocompleteClasses$1.input}`]: styles.input
	    }, {
	      [`& .${autocompleteClasses$1.input}`]: inputFocused && styles.inputFocused
	    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];
	  }
	})(({
	  ownerState
	}) => _extends({
	  [`&.${autocompleteClasses$1.focused} .${autocompleteClasses$1.clearIndicator}`]: {
	    visibility: 'visible'
	  },
	  /* Avoid double tap issue on iOS */
	  '@media (pointer: fine)': {
	    [`&:hover .${autocompleteClasses$1.clearIndicator}`]: {
	      visibility: 'visible'
	    }
	  }
	}, ownerState.fullWidth && {
	  width: '100%'
	}, {
	  [`& .${autocompleteClasses$1.tag}`]: _extends({
	    margin: 3,
	    maxWidth: 'calc(100% - 6px)'
	  }, ownerState.size === 'small' && {
	    margin: 2,
	    maxWidth: 'calc(100% - 4px)'
	  }),
	  [`& .${autocompleteClasses$1.inputRoot}`]: {
	    flexWrap: 'wrap',
	    [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 26 + 4
	    },
	    [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 52 + 4
	    },
	    [`& .${autocompleteClasses$1.input}`]: {
	      width: 0,
	      minWidth: 30
	    }
	  },
	  [`& .${inputClasses$1.root}`]: {
	    paddingBottom: 1,
	    '& .MuiInput-input': {
	      padding: '4px 4px 4px 0px'
	    }
	  },
	  [`& .${inputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
	    [`& .${inputClasses$1.input}`]: {
	      padding: '2px 4px 3px 0'
	    }
	  },
	  [`& .${outlinedInputClasses$1.root}`]: {
	    padding: 9,
	    [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 26 + 4 + 9
	    },
	    [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 52 + 4 + 9
	    },
	    [`& .${autocompleteClasses$1.input}`]: {
	      padding: '7.5px 4px 7.5px 6px'
	    },
	    [`& .${autocompleteClasses$1.endAdornment}`]: {
	      right: 9
	    }
	  },
	  [`& .${outlinedInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
	    // Don't specify paddingRight, as it overrides the default value set when there is only
	    // one of the popup or clear icon as the specificity is equal so the latter one wins
	    paddingTop: 6,
	    paddingBottom: 6,
	    paddingLeft: 6,
	    [`& .${autocompleteClasses$1.input}`]: {
	      padding: '2.5px 4px 2.5px 6px'
	    }
	  },
	  [`& .${filledInputClasses$1.root}`]: {
	    paddingTop: 19,
	    paddingLeft: 8,
	    [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 26 + 4 + 9
	    },
	    [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 52 + 4 + 9
	    },
	    [`& .${filledInputClasses$1.input}`]: {
	      padding: '7px 4px'
	    },
	    [`& .${autocompleteClasses$1.endAdornment}`]: {
	      right: 9
	    }
	  },
	  [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
	    paddingBottom: 1,
	    [`& .${filledInputClasses$1.input}`]: {
	      padding: '2.5px 4px'
	    }
	  },
	  [`& .${inputBaseClasses$1.hiddenLabel}`]: {
	    paddingTop: 8
	  },
	  [`& .${autocompleteClasses$1.input}`]: _extends({
	    flexGrow: 1,
	    textOverflow: 'ellipsis',
	    opacity: 0
	  }, ownerState.inputFocused && {
	    opacity: 1
	  })
	}));
	const AutocompleteEndAdornment = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'EndAdornment',
	  overridesResolver: (props, styles) => styles.endAdornment
	})({
	  // We use a position absolute to support wrapping tags.
	  position: 'absolute',
	  right: 0,
	  top: 'calc(50% - 14px)' // Center vertically
	});

	const AutocompleteClearIndicator = styled$1(IconButton$1, {
	  name: 'MuiAutocomplete',
	  slot: 'ClearIndicator',
	  overridesResolver: (props, styles) => styles.clearIndicator
	})({
	  marginRight: -2,
	  padding: 4,
	  visibility: 'hidden'
	});
	const AutocompletePopupIndicator = styled$1(IconButton$1, {
	  name: 'MuiAutocomplete',
	  slot: 'PopupIndicator',
	  overridesResolver: ({
	    ownerState
	  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)
	})(({
	  ownerState
	}) => _extends({
	  padding: 2,
	  marginRight: -2
	}, ownerState.popupOpen && {
	  transform: 'rotate(180deg)'
	}));
	const AutocompletePopper = styled$1(MUIPopper, {
	  name: 'MuiAutocomplete',
	  slot: 'Popper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${autocompleteClasses$1.option}`]: styles.option
	    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  zIndex: (theme.vars || theme).zIndex.modal
	}, ownerState.disablePortal && {
	  position: 'absolute'
	}));
	const AutocompletePaper = styled$1(Paper$1, {
	  name: 'MuiAutocomplete',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})(({
	  theme
	}) => _extends({}, theme.typography.body1, {
	  overflow: 'auto'
	}));
	const AutocompleteLoading = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'Loading',
	  overridesResolver: (props, styles) => styles.loading
	})(({
	  theme
	}) => ({
	  color: (theme.vars || theme).palette.text.secondary,
	  padding: '14px 16px'
	}));
	const AutocompleteNoOptions = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'NoOptions',
	  overridesResolver: (props, styles) => styles.noOptions
	})(({
	  theme
	}) => ({
	  color: (theme.vars || theme).palette.text.secondary,
	  padding: '14px 16px'
	}));
	const AutocompleteListbox = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'Listbox',
	  overridesResolver: (props, styles) => styles.listbox
	})(({
	  theme
	}) => ({
	  listStyle: 'none',
	  margin: 0,
	  padding: '8px 0',
	  maxHeight: '40vh',
	  overflow: 'auto',
	  position: 'relative',
	  [`& .${autocompleteClasses$1.option}`]: {
	    minHeight: 48,
	    display: 'flex',
	    overflow: 'hidden',
	    justifyContent: 'flex-start',
	    alignItems: 'center',
	    cursor: 'pointer',
	    paddingTop: 6,
	    boxSizing: 'border-box',
	    outline: '0',
	    WebkitTapHighlightColor: 'transparent',
	    paddingBottom: 6,
	    paddingLeft: 16,
	    paddingRight: 16,
	    [theme.breakpoints.up('sm')]: {
	      minHeight: 'auto'
	    },
	    [`&.${autocompleteClasses$1.focused}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.hover,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    '&[aria-disabled="true"]': {
	      opacity: (theme.vars || theme).palette.action.disabledOpacity,
	      pointerEvents: 'none'
	    },
	    [`&.${autocompleteClasses$1.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.focus
	    },
	    '&[aria-selected="true"]': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	      [`&.${autocompleteClasses$1.focused}`]: {
	        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: (theme.vars || theme).palette.action.selected
	        }
	      },
	      [`&.${autocompleteClasses$1.focusVisible}`]: {
	        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	      }
	    }
	  }
	}));
	const AutocompleteGroupLabel = styled$1(ListSubheader$1, {
	  name: 'MuiAutocomplete',
	  slot: 'GroupLabel',
	  overridesResolver: (props, styles) => styles.groupLabel
	})(({
	  theme
	}) => ({
	  backgroundColor: (theme.vars || theme).palette.background.paper,
	  top: -8
	}));
	const AutocompleteGroupUl = styled$1('ul', {
	  name: 'MuiAutocomplete',
	  slot: 'GroupUl',
	  overridesResolver: (props, styles) => styles.groupUl
	})({
	  padding: 0,
	  [`& .${autocompleteClasses$1.option}`]: {
	    paddingLeft: 24
	  }
	});
	const Autocomplete = /*#__PURE__*/react.exports.forwardRef(function Autocomplete(inProps, ref) {
	  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAutocomplete'
	  });
	  /* eslint-disable @typescript-eslint/no-unused-vars */
	  const {
	      autoComplete = false,
	      autoHighlight = false,
	      autoSelect = false,
	      blurOnSelect = false,
	      ChipProps,
	      className,
	      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/jsxRuntime.exports.jsx(ClearIcon, {
	        fontSize: "small"
	      })),
	      clearOnBlur = !props.freeSolo,
	      clearOnEscape = false,
	      clearText = 'Clear',
	      closeText = 'Close',
	      componentsProps = {},
	      defaultValue = props.multiple ? [] : null,
	      disableClearable = false,
	      disableCloseOnSelect = false,
	      disabled = false,
	      disabledItemsFocusable = false,
	      disableListWrap = false,
	      disablePortal = false,
	      filterSelectedOptions = false,
	      forcePopupIcon = 'auto',
	      freeSolo = false,
	      fullWidth = false,
	      getLimitTagsText = more => `+${more}`,
	      getOptionLabel = option => {
	        var _option$label;
	        return (_option$label = option.label) != null ? _option$label : option;
	      },
	      groupBy,
	      handleHomeEndKeys = !props.freeSolo,
	      includeInputInList = false,
	      limitTags = -1,
	      ListboxComponent = 'ul',
	      ListboxProps,
	      loading = false,
	      loadingText = 'Loading…',
	      multiple = false,
	      noOptionsText = 'No options',
	      openOnFocus = false,
	      openText = 'Open',
	      PaperComponent = Paper$1,
	      PopperComponent = MUIPopper,
	      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/jsxRuntime.exports.jsx(ArrowDropDownIcon, {})),
	      readOnly = false,
	      renderGroup: renderGroupProp,
	      renderInput,
	      renderOption: renderOptionProp,
	      renderTags,
	      selectOnFocus = !props.freeSolo,
	      size = 'medium',
	      slotProps = {}
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1n);
	  /* eslint-enable @typescript-eslint/no-unused-vars */

	  const {
	    getRootProps,
	    getInputProps,
	    getInputLabelProps,
	    getPopupIndicatorProps,
	    getClearProps,
	    getTagProps,
	    getListboxProps,
	    getOptionProps,
	    value,
	    dirty,
	    id,
	    popupOpen,
	    focused,
	    focusedTag,
	    anchorEl,
	    setAnchorEl,
	    inputValue,
	    groupedOptions
	  } = useAutocomplete(_extends({}, props, {
	    componentName: 'Autocomplete'
	  }));
	  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
	  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;

	  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.
	  const ownerState = _extends({}, props, {
	    disablePortal,
	    focused,
	    fullWidth,
	    hasClearIcon,
	    hasPopupIcon,
	    inputFocused: focusedTag === -1,
	    popupOpen,
	    size
	  });
	  const classes = useUtilityClasses$11(ownerState);
	  let startAdornment;
	  if (multiple && value.length > 0) {
	    const getCustomizedTagProps = params => _extends({
	      className: classes.tag,
	      disabled
	    }, getTagProps(params));
	    if (renderTags) {
	      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
	    } else {
	      startAdornment = value.map((option, index) => /*#__PURE__*/jsxRuntime.exports.jsx(Chip$1, _extends({
	        label: getOptionLabel(option),
	        size: size
	      }, getCustomizedTagProps({
	        index
	      }), ChipProps)));
	    }
	  }
	  if (limitTags > -1 && Array.isArray(startAdornment)) {
	    const more = startAdornment.length - limitTags;
	    if (!focused && more > 0) {
	      startAdornment = startAdornment.splice(0, limitTags);
	      startAdornment.push( /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        className: classes.tag,
	        children: getLimitTagsText(more)
	      }, startAdornment.length));
	    }
	  }
	  const defaultRenderGroup = params => /*#__PURE__*/jsxRuntime.exports.jsxs("li", {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteGroupLabel, {
	      className: classes.groupLabel,
	      ownerState: ownerState,
	      component: "div",
	      children: params.group
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteGroupUl, {
	      className: classes.groupUl,
	      ownerState: ownerState,
	      children: params.children
	    })]
	  }, params.key);
	  const renderGroup = renderGroupProp || defaultRenderGroup;
	  const defaultRenderOption = (props2, option) => /*#__PURE__*/jsxRuntime.exports.jsx("li", _extends({}, props2, {
	    children: getOptionLabel(option)
	  }));
	  const renderOption = renderOptionProp || defaultRenderOption;
	  const renderListOption = (option, index) => {
	    const optionProps = getOptionProps({
	      option,
	      index
	    });
	    return renderOption(_extends({}, optionProps, {
	      className: classes.option
	    }), option, {
	      selected: optionProps['aria-selected'],
	      inputValue
	    });
	  };
	  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
	  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
	  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
	  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteRoot, _extends({
	      ref: ref,
	      className: clsx(classes.root, className),
	      ownerState: ownerState
	    }, getRootProps(other), {
	      children: renderInput({
	        id,
	        disabled,
	        fullWidth: true,
	        size: size === 'small' ? 'small' : undefined,
	        InputLabelProps: getInputLabelProps(),
	        InputProps: _extends({
	          ref: setAnchorEl,
	          className: classes.inputRoot,
	          startAdornment
	        }, (hasClearIcon || hasPopupIcon) && {
	          endAdornment: /*#__PURE__*/jsxRuntime.exports.jsxs(AutocompleteEndAdornment, {
	            className: classes.endAdornment,
	            ownerState: ownerState,
	            children: [hasClearIcon ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {
	              "aria-label": clearText,
	              title: clearText,
	              ownerState: ownerState
	            }, clearIndicatorSlotProps, {
	              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
	              children: clearIcon
	            })) : null, hasPopupIcon ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
	              disabled: disabled,
	              "aria-label": popupOpen ? closeText : openText,
	              title: popupOpen ? closeText : openText,
	              ownerState: ownerState
	            }, popupIndicatorSlotProps, {
	              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
	              children: popupIcon
	            })) : null]
	          })
	        }),
	        inputProps: _extends({
	          className: classes.input,
	          disabled,
	          readOnly
	        }, getInputProps())
	      })
	    })), anchorEl ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompletePopper, _extends({
	      as: PopperComponent,
	      disablePortal: disablePortal,
	      style: {
	        width: anchorEl ? anchorEl.clientWidth : null
	      },
	      ownerState: ownerState,
	      role: "presentation",
	      anchorEl: anchorEl,
	      open: popupOpen
	    }, popperSlotProps, {
	      className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
	      children: /*#__PURE__*/jsxRuntime.exports.jsxs(AutocompletePaper, _extends({
	        ownerState: ownerState,
	        as: PaperComponent
	      }, paperSlotProps, {
	        className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
	        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteLoading, {
	          className: classes.loading,
	          ownerState: ownerState,
	          children: loadingText
	        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteNoOptions, {
	          className: classes.noOptions,
	          ownerState: ownerState,
	          role: "presentation",
	          onMouseDown: event => {
	            // Prevent input blur when interacting with the "no options" content
	            event.preventDefault();
	          },
	          children: noOptionsText
	        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/jsxRuntime.exports.jsx(AutocompleteListbox, _extends({
	          as: ListboxComponent,
	          className: classes.listbox,
	          ownerState: ownerState
	        }, getListboxProps(), ListboxProps, {
	          children: groupedOptions.map((option, index) => {
	            if (groupBy) {
	              return renderGroup({
	                key: option.key,
	                group: option.group,
	                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
	              });
	            }
	            return renderListOption(option, index);
	          })
	        })) : null]
	      }))
	    })) : null]
	  });
	});
	var Autocomplete$1 = Autocomplete;

	const _excluded$1m = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
	const styles$1 = {
	  entering: {
	    opacity: 1
	  },
	  entered: {
	    opacity: 1
	  }
	};

	/**
	 * The Fade transition is used by the [Modal](/material-ui/react-modal/) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */
	const Fade = /*#__PURE__*/react.exports.forwardRef(function Fade(props, ref) {
	  const theme = useTheme();
	  const defaultTimeout = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };
	  const {
	      addEndListener,
	      appear = true,
	      children,
	      easing,
	      in: inProp,
	      onEnter,
	      onEntered,
	      onEntering,
	      onExit,
	      onExited,
	      onExiting,
	      style,
	      timeout = defaultTimeout,
	      // eslint-disable-next-line react/prop-types
	      TransitionComponent = Transition$1
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1m);
	  const nodeRef = react.exports.useRef(null);
	  const handleRef = useForkRef(nodeRef, children.ref, ref);
	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current;

	      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };
	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    reflow(node); // So the animation always start from the start.

	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);
	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);
	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);
	  const handleAddEndListener = next => {
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef ,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/react.exports.cloneElement(children, _extends({
	        style: _extends({
	          opacity: 0,
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles$1[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	var Fade$1 = Fade;

	function getBackdropUtilityClass(slot) {
	  return generateUtilityClass('MuiBackdrop', slot);
	}
	generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);

	const _excluded$1l = ["children", "component", "components", "componentsProps", "className", "invisible", "open", "slotProps", "slots", "transitionDuration", "TransitionComponent"];
	const useUtilityClasses$10 = ownerState => {
	  const {
	    classes,
	    invisible
	  } = ownerState;
	  const slots = {
	    root: ['root', invisible && 'invisible']
	  };
	  return composeClasses(slots, getBackdropUtilityClass, classes);
	};
	const BackdropRoot = styled$1('div', {
	  name: 'MuiBackdrop',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.invisible && styles.invisible];
	  }
	})(({
	  ownerState
	}) => _extends({
	  position: 'fixed',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0,
	  backgroundColor: 'rgba(0, 0, 0, 0.5)',
	  WebkitTapHighlightColor: 'transparent'
	}, ownerState.invisible && {
	  backgroundColor: 'transparent'
	}));
	const Backdrop = /*#__PURE__*/react.exports.forwardRef(function Backdrop(inProps, ref) {
	  var _slotProps$root, _ref, _slots$root;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBackdrop'
	  });
	  const {
	      children,
	      component = 'div',
	      components = {},
	      componentsProps = {},
	      className,
	      invisible = false,
	      open,
	      slotProps = {},
	      slots = {},
	      transitionDuration,
	      // eslint-disable-next-line react/prop-types
	      TransitionComponent = Fade$1
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1l);
	  const ownerState = _extends({}, props, {
	    component,
	    invisible
	  });
	  const classes = useUtilityClasses$10(ownerState);
	  const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    in: open,
	    timeout: transitionDuration
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(BackdropRoot, _extends({
	      "aria-hidden": true
	    }, rootSlotProps, {
	      as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
	      className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
	      ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
	      classes: classes,
	      ref: ref,
	      children: children
	    }))
	  }));
	});
	var Backdrop$1 = Backdrop;

	const shouldSpreadAdditionalProps = Slot => {
	  return !Slot || !isHostComponent(Slot);
	};
	var shouldSpreadAdditionalProps$1 = shouldSpreadAdditionalProps;

	function getBadgeUtilityClass(slot) {
	  return generateUtilityClass('MuiBadge', slot);
	}
	const badgeClasses = generateUtilityClasses('MuiBadge', ['root', 'badge', 'dot', 'standard', 'anchorOriginTopRight', 'anchorOriginBottomRight', 'anchorOriginTopLeft', 'anchorOriginBottomLeft', 'invisible', 'colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'overlapRectangular', 'overlapCircular',
	// TODO: v6 remove the overlap value from these class keys
	'anchorOriginTopLeftCircular', 'anchorOriginTopLeftRectangular', 'anchorOriginTopRightCircular', 'anchorOriginTopRightRectangular', 'anchorOriginBottomLeftCircular', 'anchorOriginBottomLeftRectangular', 'anchorOriginBottomRightCircular', 'anchorOriginBottomRightRectangular']);
	var badgeClasses$1 = badgeClasses;

	const _excluded$1k = ["anchorOrigin", "className", "component", "components", "componentsProps", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
	const RADIUS_STANDARD = 10;
	const RADIUS_DOT = 4;
	const useUtilityClasses$$ = ownerState => {
	  const {
	    color,
	    anchorOrigin,
	    invisible,
	    overlap,
	    variant,
	    classes = {}
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    badge: ['badge', variant, invisible && 'invisible', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, `overlap${capitalize(overlap)}`, color !== 'default' && `color${capitalize(color)}`]
	  };
	  return composeClasses(slots, getBadgeUtilityClass, classes);
	};
	const BadgeRoot = styled$1('span', {
	  name: 'MuiBadge',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  position: 'relative',
	  display: 'inline-flex',
	  // For correct alignment with the text.
	  verticalAlign: 'middle',
	  flexShrink: 0
	});
	const BadgeBadge = styled$1('span', {
	  name: 'MuiBadge',
	  slot: 'Badge',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.badge, styles[ownerState.variant], styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}${capitalize(ownerState.overlap)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.invisible && styles.invisible];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexDirection: 'row',
	  flexWrap: 'wrap',
	  justifyContent: 'center',
	  alignContent: 'center',
	  alignItems: 'center',
	  position: 'absolute',
	  boxSizing: 'border-box',
	  fontFamily: theme.typography.fontFamily,
	  fontWeight: theme.typography.fontWeightMedium,
	  fontSize: theme.typography.pxToRem(12),
	  minWidth: RADIUS_STANDARD * 2,
	  lineHeight: 1,
	  padding: '0 6px',
	  height: RADIUS_STANDARD * 2,
	  borderRadius: RADIUS_STANDARD,
	  zIndex: 1,
	  // Render the badge on top of potential ripples.
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeInOut,
	    duration: theme.transitions.duration.enteringScreen
	  })
	}, ownerState.color !== 'default' && {
	  backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	  color: (theme.vars || theme).palette[ownerState.color].contrastText
	}, ownerState.variant === 'dot' && {
	  borderRadius: RADIUS_DOT,
	  height: RADIUS_DOT * 2,
	  minWidth: RADIUS_DOT * 2,
	  padding: 0
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
	  top: 0,
	  right: 0,
	  transform: 'scale(1) translate(50%, -50%)',
	  transformOrigin: '100% 0%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular' && {
	  bottom: 0,
	  right: 0,
	  transform: 'scale(1) translate(50%, 50%)',
	  transformOrigin: '100% 100%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
	  top: 0,
	  left: 0,
	  transform: 'scale(1) translate(-50%, -50%)',
	  transformOrigin: '0% 0%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(-50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular' && {
	  bottom: 0,
	  left: 0,
	  transform: 'scale(1) translate(-50%, 50%)',
	  transformOrigin: '0% 100%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(-50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
	  top: '14%',
	  right: '14%',
	  transform: 'scale(1) translate(50%, -50%)',
	  transformOrigin: '100% 0%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular' && {
	  bottom: '14%',
	  right: '14%',
	  transform: 'scale(1) translate(50%, 50%)',
	  transformOrigin: '100% 100%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(50%, 50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
	  top: '14%',
	  left: '14%',
	  transform: 'scale(1) translate(-50%, -50%)',
	  transformOrigin: '0% 0%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(-50%, -50%)'
	  }
	}, ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular' && {
	  bottom: '14%',
	  left: '14%',
	  transform: 'scale(1) translate(-50%, 50%)',
	  transformOrigin: '0% 100%',
	  [`&.${badgeClasses$1.invisible}`]: {
	    transform: 'scale(0) translate(-50%, 50%)'
	  }
	}, ownerState.invisible && {
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeInOut,
	    duration: theme.transitions.duration.leavingScreen
	  })
	}));
	const Badge = /*#__PURE__*/react.exports.forwardRef(function Badge(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBadge'
	  });
	  const {
	      anchorOrigin: anchorOriginProp = {
	        vertical: 'top',
	        horizontal: 'right'
	      },
	      className,
	      component = 'span',
	      components = {},
	      componentsProps = {},
	      overlap: overlapProp = 'rectangular',
	      color: colorProp = 'default',
	      invisible: invisibleProp = false,
	      max,
	      badgeContent: badgeContentProp,
	      slots,
	      slotProps,
	      showZero = false,
	      variant: variantProp = 'standard'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1k);
	  const prevProps = usePreviousProps$1({
	    anchorOrigin: anchorOriginProp,
	    color: colorProp,
	    overlap: overlapProp,
	    variant: variantProp
	  });
	  let invisible = invisibleProp;
	  if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {
	    invisible = true;
	  }
	  const {
	    color = colorProp,
	    overlap = overlapProp,
	    anchorOrigin = anchorOriginProp,
	    variant = variantProp
	  } = invisible ? prevProps : props;
	  const ownerState = _extends({}, props, {
	    anchorOrigin,
	    invisible,
	    color,
	    overlap,
	    variant
	  });
	  const classes = useUtilityClasses$$(ownerState);
	  let displayValue;
	  if (variant !== 'dot') {
	    displayValue = badgeContentProp && Number(badgeContentProp) > max ? `${max}+` : badgeContentProp;
	  }

	  // support both `slots` and `components` for backward compatibility
	  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;
	  const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;
	  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(BadgeUnstyled$1, _extends({
	    invisible: invisibleProp,
	    badgeContent: displayValue,
	    showZero: showZero,
	    max: max
	  }, other, {
	    slots: {
	      root: RootSlot,
	      badge: BadgeSlot
	    },
	    className: clsx(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className),
	    slotProps: {
	      root: _extends({}, rootSlotProps, shouldSpreadAdditionalProps$1(RootSlot) && {
	        as: component,
	        ownerState: _extends({}, rootSlotProps == null ? void 0 : rootSlotProps.ownerState, {
	          anchorOrigin,
	          color,
	          overlap,
	          variant
	        })
	      }),
	      badge: _extends({}, badgeSlotProps, {
	        className: clsx(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
	      }, shouldSpreadAdditionalProps$1(BadgeSlot) && {
	        ownerState: _extends({}, badgeSlotProps == null ? void 0 : badgeSlotProps.ownerState, {
	          anchorOrigin,
	          color,
	          overlap,
	          variant
	        })
	      })
	    },
	    ref: ref
	  }));
	});
	var Badge$1 = Badge;

	function getButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiButton', slot);
	}
	const buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'textSuccess', 'textError', 'textInfo', 'textWarning', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'outlinedSuccess', 'outlinedError', 'outlinedInfo', 'outlinedWarning', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'containedSuccess', 'containedError', 'containedInfo', 'containedWarning', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
	var buttonClasses$1 = buttonClasses;

	/**
	 * @ignore - internal component.
	 */
	const ButtonGroupContext = /*#__PURE__*/react.exports.createContext({});
	var ButtonGroupContext$1 = ButtonGroupContext;

	const _excluded$1j = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
	const useUtilityClasses$_ = ownerState => {
	  const {
	    color,
	    disableElevation,
	    fullWidth,
	    size,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `${variant}${capitalize(color)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
	    label: ['label'],
	    startIcon: ['startIcon', `iconSize${capitalize(size)}`],
	    endIcon: ['endIcon', `iconSize${capitalize(size)}`]
	  };
	  const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const commonIconStyles = ownerState => _extends({}, ownerState.size === 'small' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 18
	  }
	}, ownerState.size === 'medium' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 20
	  }
	}, ownerState.size === 'large' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 22
	  }
	});
	const ButtonRoot = styled$1(ButtonBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color)}`], styles[`size${capitalize(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$palette$getCon, _theme$palette;
	  return _extends({}, theme.typography.button, {
	    minWidth: 64,
	    padding: '6px 16px',
	    borderRadius: (theme.vars || theme).shape.borderRadius,
	    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
	      duration: theme.transitions.duration.short
	    }),
	    '&:hover': _extends({
	      textDecoration: 'none',
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	      border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    }, ownerState.variant === 'contained' && {
	      backgroundColor: (theme.vars || theme).palette.grey.A100,
	      boxShadow: (theme.vars || theme).shadows[4],
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        boxShadow: (theme.vars || theme).shadows[2],
	        backgroundColor: (theme.vars || theme).palette.grey[300]
	      }
	    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	      }
	    }),
	    '&:active': _extends({}, ownerState.variant === 'contained' && {
	      boxShadow: (theme.vars || theme).shadows[8]
	    }),
	    [`&.${buttonClasses$1.focusVisible}`]: _extends({}, ownerState.variant === 'contained' && {
	      boxShadow: (theme.vars || theme).shadows[6]
	    }),
	    [`&.${buttonClasses$1.disabled}`]: _extends({
	      color: (theme.vars || theme).palette.action.disabled
	    }, ownerState.variant === 'outlined' && {
	      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
	    }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
	      border: `1px solid ${(theme.vars || theme).palette.action.disabled}`
	    }, ownerState.variant === 'contained' && {
	      color: (theme.vars || theme).palette.action.disabled,
	      boxShadow: (theme.vars || theme).shadows[0],
	      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
	    })
	  }, ownerState.variant === 'text' && {
	    padding: '6px 8px'
	  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  }, ownerState.variant === 'outlined' && {
	    padding: '5px 15px',
	    border: '1px solid currentColor'
	  }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	    color: (theme.vars || theme).palette[ownerState.color].main,
	    border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
	  }, ownerState.variant === 'contained' && {
	    color: theme.vars ?
	    // this is safe because grey does not change between default light/dark mode
	    theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
	    backgroundColor: (theme.vars || theme).palette.grey[300],
	    boxShadow: (theme.vars || theme).shadows[2]
	  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	    color: (theme.vars || theme).palette[ownerState.color].contrastText,
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	  }, ownerState.color === 'inherit' && {
	    color: 'inherit',
	    borderColor: 'currentColor'
	  }, ownerState.size === 'small' && ownerState.variant === 'text' && {
	    padding: '4px 5px',
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && ownerState.variant === 'text' && {
	    padding: '8px 11px',
	    fontSize: theme.typography.pxToRem(15)
	  }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
	    padding: '3px 9px',
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
	    padding: '7px 21px',
	    fontSize: theme.typography.pxToRem(15)
	  }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
	    padding: '4px 10px',
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
	    padding: '8px 22px',
	    fontSize: theme.typography.pxToRem(15)
	  }, ownerState.fullWidth && {
	    width: '100%'
	  });
	}, ({
	  ownerState
	}) => ownerState.disableElevation && {
	  boxShadow: 'none',
	  '&:hover': {
	    boxShadow: 'none'
	  },
	  [`&.${buttonClasses$1.focusVisible}`]: {
	    boxShadow: 'none'
	  },
	  '&:active': {
	    boxShadow: 'none'
	  },
	  [`&.${buttonClasses$1.disabled}`]: {
	    boxShadow: 'none'
	  }
	});
	const ButtonStartIcon = styled$1('span', {
	  name: 'MuiButton',
	  slot: 'StartIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.startIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inherit',
	  marginRight: 8,
	  marginLeft: -4
	}, ownerState.size === 'small' && {
	  marginLeft: -2
	}, commonIconStyles(ownerState)));
	const ButtonEndIcon = styled$1('span', {
	  name: 'MuiButton',
	  slot: 'EndIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.endIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inherit',
	  marginRight: -4,
	  marginLeft: 8
	}, ownerState.size === 'small' && {
	  marginRight: -2
	}, commonIconStyles(ownerState)));
	const Button = /*#__PURE__*/react.exports.forwardRef(function Button(inProps, ref) {
	  // props priority: `inProps` > `contextProps` > `themeDefaultProps`
	  const contextProps = react.exports.useContext(ButtonGroupContext$1);
	  const resolvedProps = resolveProps(contextProps, inProps);
	  const props = useThemeProps({
	    props: resolvedProps,
	    name: 'MuiButton'
	  });
	  const {
	      children,
	      color = 'primary',
	      component = 'button',
	      className,
	      disabled = false,
	      disableElevation = false,
	      disableFocusRipple = false,
	      endIcon: endIconProp,
	      focusVisibleClassName,
	      fullWidth = false,
	      size = 'medium',
	      startIcon: startIconProp,
	      type,
	      variant = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1j);
	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disabled,
	    disableElevation,
	    disableFocusRipple,
	    fullWidth,
	    size,
	    type,
	    variant
	  });
	  const classes = useUtilityClasses$_(ownerState);
	  const startIcon = startIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonStartIcon, {
	    className: classes.startIcon,
	    ownerState: ownerState,
	    children: startIconProp
	  });
	  const endIcon = endIconProp && /*#__PURE__*/jsxRuntime.exports.jsx(ButtonEndIcon, {
	    className: classes.endIcon,
	    ownerState: ownerState,
	    children: endIconProp
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(ButtonRoot, _extends({
	    ownerState: ownerState,
	    className: clsx(contextProps.className, classes.root, className),
	    component: component,
	    disabled: disabled,
	    focusRipple: !disableFocusRipple,
	    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes,
	    children: [startIcon, children, endIcon]
	  }));
	});
	var MUIButton = Button;

	function getSwitchBaseUtilityClass(slot) {
	  return generateUtilityClass('PrivateSwitchBase', slot);
	}
	generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);

	const _excluded$1i = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
	const useUtilityClasses$Z = ownerState => {
	  const {
	    classes,
	    checked,
	    disabled,
	    edge
	  } = ownerState;
	  const slots = {
	    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],
	    input: ['input']
	  };
	  return composeClasses(slots, getSwitchBaseUtilityClass, classes);
	};
	const SwitchBaseRoot = styled$1(ButtonBase$1)(({
	  ownerState
	}) => _extends({
	  padding: 9,
	  borderRadius: '50%'
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}));
	const SwitchBaseInput = styled$1('input')({
	  cursor: 'inherit',
	  position: 'absolute',
	  opacity: 0,
	  width: '100%',
	  height: '100%',
	  top: 0,
	  left: 0,
	  margin: 0,
	  padding: 0,
	  zIndex: 1
	});

	/**
	 * @ignore - internal component.
	 */
	const SwitchBase = /*#__PURE__*/react.exports.forwardRef(function SwitchBase(props, ref) {
	  const {
	      autoFocus,
	      checked: checkedProp,
	      checkedIcon,
	      className,
	      defaultChecked,
	      disabled: disabledProp,
	      disableFocusRipple = false,
	      edge = false,
	      icon,
	      id,
	      inputProps,
	      inputRef,
	      name,
	      onBlur,
	      onChange,
	      onFocus,
	      readOnly,
	      required,
	      tabIndex,
	      type,
	      value
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1i);
	  const [checked, setCheckedState] = useControlled({
	    controlled: checkedProp,
	    default: Boolean(defaultChecked),
	    name: 'SwitchBase',
	    state: 'checked'
	  });
	  const muiFormControl = useFormControl();
	  const handleFocus = event => {
	    if (onFocus) {
	      onFocus(event);
	    }
	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    }
	  };
	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }
	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    }
	  };
	  const handleInputChange = event => {
	    // Workaround for https://github.com/facebook/react/issues/9023
	    if (event.nativeEvent.defaultPrevented) {
	      return;
	    }
	    const newChecked = event.target.checked;
	    setCheckedState(newChecked);
	    if (onChange) {
	      // TODO v6: remove the second argument.
	      onChange(event, newChecked);
	    }
	  };
	  let disabled = disabledProp;
	  if (muiFormControl) {
	    if (typeof disabled === 'undefined') {
	      disabled = muiFormControl.disabled;
	    }
	  }
	  const hasLabelFor = type === 'checkbox' || type === 'radio';
	  const ownerState = _extends({}, props, {
	    checked,
	    disabled,
	    disableFocusRipple,
	    edge
	  });
	  const classes = useUtilityClasses$Z(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SwitchBaseRoot, _extends({
	    component: "span",
	    className: clsx(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    tabIndex: null,
	    role: undefined,
	    onFocus: handleFocus,
	    onBlur: handleBlur,
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(SwitchBaseInput, _extends({
	      autoFocus: autoFocus,
	      checked: checkedProp,
	      defaultChecked: defaultChecked,
	      className: classes.input,
	      disabled: disabled,
	      id: hasLabelFor && id,
	      name: name,
	      onChange: handleInputChange,
	      readOnly: readOnly,
	      ref: inputRef,
	      required: required,
	      ownerState: ownerState,
	      tabIndex: tabIndex,
	      type: type
	    }, type === 'checkbox' && value === undefined ? {} : {
	      value
	    }, inputProps)), checked ? checkedIcon : icon]
	  }));
	});
	var SwitchBase$1 = SwitchBase;

	var CheckBoxOutlineBlankIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
	}), 'CheckBoxOutlineBlank');

	var CheckBoxIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
	}), 'CheckBox');

	var IndeterminateCheckBoxIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
	}), 'IndeterminateCheckBox');

	function getCheckboxUtilityClass(slot) {
	  return generateUtilityClass('MuiCheckbox', slot);
	}
	const checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary']);
	var checkboxClasses$1 = checkboxClasses;

	const _excluded$1h = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
	const useUtilityClasses$Y = ownerState => {
	  const {
	    classes,
	    indeterminate,
	    color
	  } = ownerState;
	  const slots = {
	    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]
	  };
	  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const CheckboxRoot = styled$1(SwitchBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiCheckbox',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${checkboxClasses$1.checked}, &.${checkboxClasses$1.indeterminate}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  },
	  [`&.${checkboxClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.action.disabled
	  }
	}));
	const defaultCheckedIcon = /*#__PURE__*/jsxRuntime.exports.jsx(CheckBoxIcon, {});
	const defaultIcon = /*#__PURE__*/jsxRuntime.exports.jsx(CheckBoxOutlineBlankIcon, {});
	const defaultIndeterminateIcon = /*#__PURE__*/jsxRuntime.exports.jsx(IndeterminateCheckBoxIcon, {});
	const Checkbox = /*#__PURE__*/react.exports.forwardRef(function Checkbox(inProps, ref) {
	  var _icon$props$fontSize, _indeterminateIcon$pr;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCheckbox'
	  });
	  const {
	      checkedIcon = defaultCheckedIcon,
	      color = 'primary',
	      icon: iconProp = defaultIcon,
	      indeterminate = false,
	      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
	      inputProps,
	      size = 'medium',
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1h);
	  const icon = indeterminate ? indeterminateIconProp : iconProp;
	  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
	  const ownerState = _extends({}, props, {
	    color,
	    indeterminate,
	    size
	  });
	  const classes = useUtilityClasses$Y(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(CheckboxRoot, _extends({
	    type: "checkbox",
	    inputProps: _extends({
	      'data-indeterminate': indeterminate
	    }, inputProps),
	    icon: /*#__PURE__*/react.exports.cloneElement(icon, {
	      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
	    }),
	    checkedIcon: /*#__PURE__*/react.exports.cloneElement(indeterminateIcon, {
	      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
	    }),
	    ownerState: ownerState,
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other, {
	    classes: classes
	  }));
	});
	var MUICheckbox = Checkbox;

	function getCircularProgressUtilityClass(slot) {
	  return generateUtilityClass('MuiCircularProgress', slot);
	}
	generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);

	const _excluded$1g = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
	let _$1 = t => t,
	  _t$1,
	  _t2$1,
	  _t3$1,
	  _t4$1;
	const SIZE = 44;
	const circularRotateKeyframe = keyframes(_t$1 || (_t$1 = _$1`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
	const circularDashKeyframe = keyframes(_t2$1 || (_t2$1 = _$1`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
	const useUtilityClasses$X = ownerState => {
	  const {
	    classes,
	    variant,
	    color,
	    disableShrink
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `color${capitalize(color)}`],
	    svg: ['svg'],
	    circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']
	  };
	  return composeClasses(slots, getCircularProgressUtilityClass, classes);
	};
	const CircularProgressRoot = styled$1('span', {
	  name: 'MuiCircularProgress',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  display: 'inline-block'
	}, ownerState.variant === 'determinate' && {
	  transition: theme.transitions.create('transform')
	}, ownerState.color !== 'inherit' && {
	  color: (theme.vars || theme).palette[ownerState.color].main
	}), ({
	  ownerState
	}) => ownerState.variant === 'indeterminate' && css(_t3$1 || (_t3$1 = _$1`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
	const CircularProgressSVG = styled$1('svg', {
	  name: 'MuiCircularProgress',
	  slot: 'Svg',
	  overridesResolver: (props, styles) => styles.svg
	})({
	  display: 'block' // Keeps the progress centered
	});

	const CircularProgressCircle = styled$1('circle', {
	  name: 'MuiCircularProgress',
	  slot: 'Circle',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  stroke: 'currentColor'
	}, ownerState.variant === 'determinate' && {
	  transition: theme.transitions.create('stroke-dashoffset')
	}, ownerState.variant === 'indeterminate' && {
	  // Some default value that looks fine waiting for the animation to kicks in.
	  strokeDasharray: '80px, 200px',
	  strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.
	}), ({
	  ownerState
	}) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink && css(_t4$1 || (_t4$1 = _$1`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));

	/**
	 * ## ARIA
	 *
	 * If the progress bar is describing the loading progress of a particular region of a page,
	 * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
	 * attribute to `true` on that region until it has finished loading.
	 */
	const CircularProgress = /*#__PURE__*/react.exports.forwardRef(function CircularProgress(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCircularProgress'
	  });
	  const {
	      className,
	      color = 'primary',
	      disableShrink = false,
	      size = 40,
	      style,
	      thickness = 3.6,
	      value = 0,
	      variant = 'indeterminate'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1g);
	  const ownerState = _extends({}, props, {
	    color,
	    disableShrink,
	    size,
	    thickness,
	    value,
	    variant
	  });
	  const classes = useUtilityClasses$X(ownerState);
	  const circleStyle = {};
	  const rootStyle = {};
	  const rootProps = {};
	  if (variant === 'determinate') {
	    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
	    circleStyle.strokeDasharray = circumference.toFixed(3);
	    rootProps['aria-valuenow'] = Math.round(value);
	    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
	    rootStyle.transform = 'rotate(-90deg)';
	  }
	  return /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgressRoot, _extends({
	    className: clsx(classes.root, className),
	    style: _extends({
	      width: size,
	      height: size
	    }, rootStyle, style),
	    ownerState: ownerState,
	    ref: ref,
	    role: "progressbar"
	  }, rootProps, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgressSVG, {
	      className: classes.svg,
	      ownerState: ownerState,
	      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgressCircle, {
	        className: classes.circle,
	        style: circleStyle,
	        ownerState: ownerState,
	        cx: SIZE,
	        cy: SIZE,
	        r: (SIZE - thickness) / 2,
	        fill: "none",
	        strokeWidth: thickness
	      })
	    })
	  }));
	});
	var CircularProgress$1 = CircularProgress;

	const _excluded$1f = ["BackdropComponent", "BackdropProps", "closeAfterTransition", "children", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "slotProps", "slots", "theme"];
	const extendUtilityClasses = ownerState => {
	  return ownerState.classes;
	};
	const ModalRoot = styled$1('div', {
	  name: 'MuiModal',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'fixed',
	  zIndex: (theme.vars || theme).zIndex.modal,
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0
	}, !ownerState.open && ownerState.exited && {
	  visibility: 'hidden'
	}));
	const ModalBackdrop = styled$1(Backdrop$1, {
	  name: 'MuiModal',
	  slot: 'Backdrop',
	  overridesResolver: (props, styles) => {
	    return styles.backdrop;
	  }
	})({
	  zIndex: -1
	});

	/**
	 * Modal is a lower-level construct that is leveraged by the following components:
	 *
	 * - [Dialog](/material-ui/api/dialog/)
	 * - [Drawer](/material-ui/api/drawer/)
	 * - [Menu](/material-ui/api/menu/)
	 * - [Popover](/material-ui/api/popover/)
	 *
	 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
	 * rather than directly using Modal.
	 *
	 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
	 */
	const Modal = /*#__PURE__*/react.exports.forwardRef(function Modal(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
	  const props = useThemeProps({
	    name: 'MuiModal',
	    props: inProps
	  });
	  const {
	      BackdropComponent = ModalBackdrop,
	      BackdropProps,
	      closeAfterTransition = false,
	      children,
	      component,
	      components = {},
	      componentsProps = {},
	      disableAutoFocus = false,
	      disableEnforceFocus = false,
	      disableEscapeKeyDown = false,
	      disablePortal = false,
	      disableRestoreFocus = false,
	      disableScrollLock = false,
	      hideBackdrop = false,
	      keepMounted = false,
	      slotProps,
	      slots,
	      // eslint-disable-next-line react/prop-types
	      theme
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1f);
	  const [exited, setExited] = react.exports.useState(true);
	  const commonProps = {
	    closeAfterTransition,
	    disableAutoFocus,
	    disableEnforceFocus,
	    disableEscapeKeyDown,
	    disablePortal,
	    disableRestoreFocus,
	    disableScrollLock,
	    hideBackdrop,
	    keepMounted
	  };
	  const ownerState = _extends({}, props, commonProps, {
	    exited
	  });
	  const classes = extendUtilityClasses(ownerState);
	  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
	  const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
	  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ModalUnstyled$1, _extends({
	    slots: {
	      root: RootSlot,
	      backdrop: BackdropSlot
	    },
	    slotProps: {
	      root: () => _extends({}, resolveComponentProps(rootSlotProps, ownerState), !isHostComponent(RootSlot) && {
	        as: component,
	        theme
	      }),
	      backdrop: () => _extends({}, BackdropProps, resolveComponentProps(backdropSlotProps, ownerState))
	    },
	    onTransitionEnter: () => setExited(false),
	    onTransitionExited: () => setExited(true),
	    ref: ref
	  }, other, {
	    classes: classes
	  }, commonProps, {
	    children: children
	  }));
	});
	var Modal$1 = Modal;

	const dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);
	var dividerClasses$1 = dividerClasses;

	const _excluded$1e = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
	const useUtilityClasses$W = ownerState => {
	  const {
	    classes,
	    disableUnderline
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableUnderline && 'underline'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const FilledInputRoot = styled$1(InputBaseRoot, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiFilledInput',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _palette;
	  const light = theme.palette.mode === 'light';
	  const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
	  const backgroundColor = light ? 'rgba(0, 0, 0, 0.06)' : 'rgba(255, 255, 255, 0.09)';
	  const hoverBackground = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.13)';
	  const disabledBackground = light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)';
	  return _extends({
	    position: 'relative',
	    backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor,
	    borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
	    borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
	    transition: theme.transitions.create('background-color', {
	      duration: theme.transitions.duration.shorter,
	      easing: theme.transitions.easing.easeOut
	    }),
	    '&:hover': {
	      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
	      }
	    },
	    [`&.${filledInputClasses$1.focused}`]: {
	      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
	    },
	    [`&.${filledInputClasses$1.disabled}`]: {
	      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
	    }
	  }, !ownerState.disableUnderline && {
	    '&:after': {
	      borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || 'primary']) == null ? void 0 : _palette.main}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '""',
	      position: 'absolute',
	      right: 0,
	      transform: 'scaleX(0)',
	      transition: theme.transitions.create('transform', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.
	    },

	    [`&.${filledInputClasses$1.focused}:after`]: {
	      // translateX(0) is a workaround for Safari transform scale bug
	      // See https://github.com/mui/material-ui/issues/31766
	      transform: 'scaleX(1) translateX(0)'
	    },
	    [`&.${filledInputClasses$1.error}:after`]: {
	      borderBottomColor: (theme.vars || theme).palette.error.main,
	      transform: 'scaleX(1)' // error is always underlined in red
	    },

	    '&:before': {
	      borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '"\\00a0"',
	      position: 'absolute',
	      right: 0,
	      transition: theme.transitions.create('border-bottom-color', {
	        duration: theme.transitions.duration.shorter
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.
	    },

	    [`&:hover:not(.${filledInputClasses$1.disabled}):before`]: {
	      borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
	    },
	    [`&.${filledInputClasses$1.disabled}:before`]: {
	      borderBottomStyle: 'dotted'
	    }
	  }, ownerState.startAdornment && {
	    paddingLeft: 12
	  }, ownerState.endAdornment && {
	    paddingRight: 12
	  }, ownerState.multiline && _extends({
	    padding: '25px 12px 8px'
	  }, ownerState.size === 'small' && {
	    paddingTop: 21,
	    paddingBottom: 4
	  }, ownerState.hiddenLabel && {
	    paddingTop: 16,
	    paddingBottom: 17
	  }));
	});
	const FilledInputInput = styled$1(InputBaseComponent, {
	  name: 'MuiFilledInput',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  paddingTop: 25,
	  paddingRight: 12,
	  paddingBottom: 8,
	  paddingLeft: 12
	}, !theme.vars && {
	  '&:-webkit-autofill': {
	    WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
	    WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
	    caretColor: theme.palette.mode === 'light' ? null : '#fff',
	    borderTopLeftRadius: 'inherit',
	    borderTopRightRadius: 'inherit'
	  }
	}, theme.vars && {
	  '&:-webkit-autofill': {
	    borderTopLeftRadius: 'inherit',
	    borderTopRightRadius: 'inherit'
	  },
	  [theme.getColorSchemeSelector('dark')]: {
	    '&:-webkit-autofill': {
	      WebkitBoxShadow: '0 0 0 100px #266798 inset',
	      WebkitTextFillColor: '#fff',
	      caretColor: '#fff'
	    }
	  }
	}, ownerState.size === 'small' && {
	  paddingTop: 21,
	  paddingBottom: 4
	}, ownerState.hiddenLabel && {
	  paddingTop: 16,
	  paddingBottom: 17
	}, ownerState.multiline && {
	  paddingTop: 0,
	  paddingBottom: 0,
	  paddingLeft: 0,
	  paddingRight: 0
	}, ownerState.startAdornment && {
	  paddingLeft: 0
	}, ownerState.endAdornment && {
	  paddingRight: 0
	}, ownerState.hiddenLabel && ownerState.size === 'small' && {
	  paddingTop: 8,
	  paddingBottom: 9
	}));
	const FilledInput = /*#__PURE__*/react.exports.forwardRef(function FilledInput(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$input;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFilledInput'
	  });
	  const {
	      components = {},
	      componentsProps: componentsPropsProp,
	      fullWidth = false,
	      // declare here to prevent spreading to DOM
	      inputComponent = 'input',
	      multiline = false,
	      slotProps,
	      slots = {},
	      type = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1e);
	  const ownerState = _extends({}, props, {
	    fullWidth,
	    inputComponent,
	    multiline,
	    type
	  });
	  const classes = useUtilityClasses$W(props);
	  const filledInputComponentsProps = {
	    root: {
	      ownerState
	    },
	    input: {
	      ownerState
	    }
	  };
	  const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
	  const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
	  const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(InputBase$1, _extends({
	    slots: {
	      root: RootSlot,
	      input: InputSlot
	    },
	    componentsProps: componentsProps,
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes
	  }));
	});
	FilledInput.muiName = 'Input';
	var FilledInput$1 = FilledInput;

	function getFormControlUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormControl', slot);
	}
	generateUtilityClasses('MuiFormControl', ['root', 'marginNone', 'marginNormal', 'marginDense', 'fullWidth', 'disabled']);

	const _excluded$1d = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
	const useUtilityClasses$V = ownerState => {
	  const {
	    classes,
	    margin,
	    fullWidth
	  } = ownerState;
	  const slots = {
	    root: ['root', margin !== 'none' && `margin${capitalize(margin)}`, fullWidth && 'fullWidth']
	  };
	  return composeClasses(slots, getFormControlUtilityClasses, classes);
	};
	const FormControlRoot = styled$1('div', {
	  name: 'MuiFormControl',
	  slot: 'Root',
	  overridesResolver: ({
	    ownerState
	  }, styles) => {
	    return _extends({}, styles.root, styles[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  flexDirection: 'column',
	  position: 'relative',
	  // Reset fieldset default style.
	  minWidth: 0,
	  padding: 0,
	  margin: 0,
	  border: 0,
	  verticalAlign: 'top'
	}, ownerState.margin === 'normal' && {
	  marginTop: 16,
	  marginBottom: 8
	}, ownerState.margin === 'dense' && {
	  marginTop: 8,
	  marginBottom: 4
	}, ownerState.fullWidth && {
	  width: '100%'
	}));

	/**
	 * Provides context such as filled/focused/error/required for form inputs.
	 * Relying on the context provides high flexibility and ensures that the state always stays
	 * consistent across the children of the `FormControl`.
	 * This context is used by the following components:
	 *
	 *  - FormLabel
	 *  - FormHelperText
	 *  - Input
	 *  - InputLabel
	 *
	 * You can find one composition example below and more going to [the demos](/material-ui/react-text-field/#components).
	 *
	 * ```jsx
	 * <FormControl>
	 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
	 *   <Input id="my-input" aria-describedby="my-helper-text" />
	 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
	 * </FormControl>
	 * ```
	 *
	 * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.
	 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
	 */
	const FormControl = /*#__PURE__*/react.exports.forwardRef(function FormControl(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormControl'
	  });
	  const {
	      children,
	      className,
	      color = 'primary',
	      component = 'div',
	      disabled = false,
	      error = false,
	      focused: visuallyFocused,
	      fullWidth = false,
	      hiddenLabel = false,
	      margin = 'none',
	      required = false,
	      size = 'medium',
	      variant = 'outlined'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1d);
	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disabled,
	    error,
	    fullWidth,
	    hiddenLabel,
	    margin,
	    required,
	    size,
	    variant
	  });
	  const classes = useUtilityClasses$V(ownerState);
	  const [adornedStart, setAdornedStart] = react.exports.useState(() => {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    let initialAdornedStart = false;
	    if (children) {
	      react.exports.Children.forEach(children, child => {
	        if (!isMuiElement(child, ['Input', 'Select'])) {
	          return;
	        }
	        const input = isMuiElement(child, ['Select']) ? child.props.input : child;
	        if (input && isAdornedStart(input.props)) {
	          initialAdornedStart = true;
	        }
	      });
	    }
	    return initialAdornedStart;
	  });
	  const [filled, setFilled] = react.exports.useState(() => {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    let initialFilled = false;
	    if (children) {
	      react.exports.Children.forEach(children, child => {
	        if (!isMuiElement(child, ['Input', 'Select'])) {
	          return;
	        }
	        if (isFilled(child.props, true)) {
	          initialFilled = true;
	        }
	      });
	    }
	    return initialFilled;
	  });
	  const [focusedState, setFocused] = react.exports.useState(false);
	  if (disabled && focusedState) {
	    setFocused(false);
	  }
	  const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
	  let registerEffect;
	  const childContext = react.exports.useMemo(() => {
	    return {
	      adornedStart,
	      setAdornedStart,
	      color,
	      disabled,
	      error,
	      filled,
	      focused,
	      fullWidth,
	      hiddenLabel,
	      size,
	      onBlur: () => {
	        setFocused(false);
	      },
	      onEmpty: () => {
	        setFilled(false);
	      },
	      onFilled: () => {
	        setFilled(true);
	      },
	      onFocus: () => {
	        setFocused(true);
	      },
	      registerEffect,
	      required,
	      variant
	    };
	  }, [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(FormControlContext$1.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(FormControlRoot, _extends({
	      as: component,
	      ownerState: ownerState,
	      className: clsx(classes.root, className),
	      ref: ref
	    }, other, {
	      children: children
	    }))
	  });
	});
	var MUIFormControl = FormControl;

	function getFormControlLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormControlLabel', slot);
	}
	const formControlLabelClasses = generateUtilityClasses('MuiFormControlLabel', ['root', 'labelPlacementStart', 'labelPlacementTop', 'labelPlacementBottom', 'disabled', 'label', 'error']);
	var formControlLabelClasses$1 = formControlLabelClasses;

	const _excluded$1c = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "slotProps", "value"];
	const useUtilityClasses$U = ownerState => {
	  const {
	    classes,
	    disabled,
	    labelPlacement,
	    error
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`, error && 'error'],
	    label: ['label', disabled && 'disabled']
	  };
	  return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
	};
	const FormControlLabelRoot = styled$1('label', {
	  name: 'MuiFormControlLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${formControlLabelClasses$1.label}`]: styles.label
	    }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  alignItems: 'center',
	  cursor: 'pointer',
	  // For correct alignment with the text.
	  verticalAlign: 'middle',
	  WebkitTapHighlightColor: 'transparent',
	  marginLeft: -11,
	  marginRight: 16,
	  // used for row presentation of radio/checkbox
	  [`&.${formControlLabelClasses$1.disabled}`]: {
	    cursor: 'default'
	  }
	}, ownerState.labelPlacement === 'start' && {
	  flexDirection: 'row-reverse',
	  marginLeft: 16,
	  // used for row presentation of radio/checkbox
	  marginRight: -11
	}, ownerState.labelPlacement === 'top' && {
	  flexDirection: 'column-reverse',
	  marginLeft: 16
	}, ownerState.labelPlacement === 'bottom' && {
	  flexDirection: 'column',
	  marginLeft: 16
	}, {
	  [`& .${formControlLabelClasses$1.label}`]: {
	    [`&.${formControlLabelClasses$1.disabled}`]: {
	      color: (theme.vars || theme).palette.text.disabled
	    }
	  }
	}));

	/**
	 * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.
	 * Use this component if you want to display an extra label.
	 */
	const FormControlLabel = /*#__PURE__*/react.exports.forwardRef(function FormControlLabel(inProps, ref) {
	  var _slotProps$typography;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormControlLabel'
	  });
	  const {
	      className,
	      componentsProps = {},
	      control,
	      disabled: disabledProp,
	      disableTypography,
	      label: labelProp,
	      labelPlacement = 'end',
	      slotProps = {}
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1c);
	  const muiFormControl = useFormControl();
	  let disabled = disabledProp;
	  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
	    disabled = control.props.disabled;
	  }
	  if (typeof disabled === 'undefined' && muiFormControl) {
	    disabled = muiFormControl.disabled;
	  }
	  const controlProps = {
	    disabled
	  };
	  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {
	    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
	      controlProps[key] = props[key];
	    }
	  });
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['error']
	  });
	  const ownerState = _extends({}, props, {
	    disabled,
	    labelPlacement,
	    error: fcs.error
	  });
	  const classes = useUtilityClasses$U(ownerState);
	  const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
	  let label = labelProp;
	  if (label != null && label.type !== Typography$1 && !disableTypography) {
	    label = /*#__PURE__*/jsxRuntime.exports.jsx(Typography$1, _extends({
	      component: "span"
	    }, typographySlotProps, {
	      className: clsx(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
	      children: label
	    }));
	  }
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(FormControlLabelRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/react.exports.cloneElement(control, controlProps), label]
	  }));
	});
	var FormControlLabel$1 = FormControlLabel;

	function getFormHelperTextUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormHelperText', slot);
	}
	const formHelperTextClasses = generateUtilityClasses('MuiFormHelperText', ['root', 'error', 'disabled', 'sizeSmall', 'sizeMedium', 'contained', 'focused', 'filled', 'required']);
	var formHelperTextClasses$1 = formHelperTextClasses;

	var _span$2;
	const _excluded$1b = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
	const useUtilityClasses$T = ownerState => {
	  const {
	    classes,
	    contained,
	    size,
	    disabled,
	    error,
	    filled,
	    focused,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', error && 'error', size && `size${capitalize(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']
	  };
	  return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
	};
	const FormHelperTextRoot = styled$1('p', {
	  name: 'MuiFormHelperText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.size && styles[`size${capitalize(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, theme.typography.caption, {
	  textAlign: 'left',
	  marginTop: 3,
	  marginRight: 0,
	  marginBottom: 0,
	  marginLeft: 0,
	  [`&.${formHelperTextClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  },
	  [`&.${formHelperTextClasses$1.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}, ownerState.size === 'small' && {
	  marginTop: 4
	}, ownerState.contained && {
	  marginLeft: 14,
	  marginRight: 14
	}));
	const FormHelperText = /*#__PURE__*/react.exports.forwardRef(function FormHelperText(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormHelperText'
	  });
	  const {
	      children,
	      className,
	      component = 'p'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1b);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['variant', 'size', 'disabled', 'error', 'filled', 'focused', 'required']
	  });
	  const ownerState = _extends({}, props, {
	    component,
	    contained: fcs.variant === 'filled' || fcs.variant === 'outlined',
	    variant: fcs.variant,
	    size: fcs.size,
	    disabled: fcs.disabled,
	    error: fcs.error,
	    filled: fcs.filled,
	    focused: fcs.focused,
	    required: fcs.required
	  });
	  const classes = useUtilityClasses$T(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(FormHelperTextRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: children === ' ' ? // notranslate needed while Google Translate will not fix zero-width space issue
	    _span$2 || (_span$2 = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	      className: "notranslate",
	      children: "\u200B"
	    })) : children
	  }));
	});
	var FormHelperText$1 = FormHelperText;

	function getFormLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormLabel', slot);
	}
	const formLabelClasses = generateUtilityClasses('MuiFormLabel', ['root', 'colorSecondary', 'focused', 'disabled', 'error', 'filled', 'required', 'asterisk']);
	var formLabelClasses$1 = formLabelClasses;

	const _excluded$1a = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
	const useUtilityClasses$S = ownerState => {
	  const {
	    classes,
	    color,
	    focused,
	    disabled,
	    error,
	    filled,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', filled && 'filled', focused && 'focused', required && 'required'],
	    asterisk: ['asterisk', error && 'error']
	  };
	  return composeClasses(slots, getFormLabelUtilityClasses, classes);
	};
	const FormLabelRoot = styled$1('label', {
	  name: 'MuiFormLabel',
	  slot: 'Root',
	  overridesResolver: ({
	    ownerState
	  }, styles) => {
	    return _extends({}, styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled);
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, theme.typography.body1, {
	  lineHeight: '1.4375em',
	  padding: 0,
	  position: 'relative',
	  [`&.${formLabelClasses$1.focused}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  },
	  [`&.${formLabelClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  },
	  [`&.${formLabelClasses$1.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const AsteriskComponent = styled$1('span', {
	  name: 'MuiFormLabel',
	  slot: 'Asterisk',
	  overridesResolver: (props, styles) => styles.asterisk
	})(({
	  theme
	}) => ({
	  [`&.${formLabelClasses$1.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const FormLabel = /*#__PURE__*/react.exports.forwardRef(function FormLabel(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormLabel'
	  });
	  const {
	      children,
	      className,
	      component = 'label'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1a);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
	  });
	  const ownerState = _extends({}, props, {
	    color: fcs.color || 'primary',
	    component,
	    disabled: fcs.disabled,
	    error: fcs.error,
	    filled: fcs.filled,
	    focused: fcs.focused,
	    required: fcs.required
	  });
	  const classes = useUtilityClasses$S(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(FormLabelRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: [children, fcs.required && /*#__PURE__*/jsxRuntime.exports.jsxs(AsteriskComponent, {
	      ownerState: ownerState,
	      "aria-hidden": true,
	      className: classes.asterisk,
	      children: ["\u2009", '*']
	    })]
	  }));
	});
	var FormLabel$1 = FormLabel;

	const _excluded$19 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
	function getScale(value) {
	  return `scale(${value}, ${value ** 2})`;
	}
	const styles = {
	  entering: {
	    opacity: 1,
	    transform: getScale(1)
	  },
	  entered: {
	    opacity: 1,
	    transform: 'none'
	  }
	};

	/*
	 TODO v6: remove
	 Conditionally apply a workaround for the CSS transition bug in Safari 15.4 / WebKit browsers.
	 */
	const isWebKit154 = typeof navigator !== 'undefined' && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);

	/**
	 * The Grow transition is used by the [Tooltip](/material-ui/react-tooltip/) and
	 * [Popover](/material-ui/react-popover/) components.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */
	const Grow = /*#__PURE__*/react.exports.forwardRef(function Grow(props, ref) {
	  const {
	      addEndListener,
	      appear = true,
	      children,
	      easing,
	      in: inProp,
	      onEnter,
	      onEntered,
	      onEntering,
	      onExit,
	      onExited,
	      onExiting,
	      style,
	      timeout = 'auto',
	      // eslint-disable-next-line react/prop-types
	      TransitionComponent = Transition$1
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$19);
	  const timer = react.exports.useRef();
	  const autoTimeout = react.exports.useRef();
	  const theme = useTheme();
	  const nodeRef = react.exports.useRef(null);
	  const handleRef = useForkRef(nodeRef, children.ref, ref);
	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current;

	      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };
	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    reflow(node); // So the animation always start from the start.

	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    let duration;
	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }
	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: isWebKit154 ? duration : duration * 0.666,
	      delay,
	      easing: transitionTimingFunction
	    })].join(',');
	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    let duration;
	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }
	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: isWebKit154 ? duration : duration * 0.666,
	      delay: isWebKit154 ? delay : delay || duration * 0.333,
	      easing: transitionTimingFunction
	    })].join(',');
	    node.style.opacity = 0;
	    node.style.transform = getScale(0.75);
	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);
	  const handleAddEndListener = next => {
	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTimeout.current || 0);
	    }
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/react.exports.cloneElement(children, _extends({
	        style: _extends({
	          opacity: 0,
	          transform: getScale(0.75),
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	Grow.muiSupportAuto = true;
	var Grow$1 = Grow;

	const _excluded$18 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
	const useUtilityClasses$R = ownerState => {
	  const {
	    classes,
	    disableUnderline
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableUnderline && 'underline'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const InputRoot = styled$1(InputBaseRoot, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiInput',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const light = theme.palette.mode === 'light';
	  let bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
	  if (theme.vars) {
	    bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
	  }
	  return _extends({
	    position: 'relative'
	  }, ownerState.formControl && {
	    'label + &': {
	      marginTop: 16
	    }
	  }, !ownerState.disableUnderline && {
	    '&:after': {
	      borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '""',
	      position: 'absolute',
	      right: 0,
	      transform: 'scaleX(0)',
	      transition: theme.transitions.create('transform', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.
	    },

	    [`&.${inputClasses$1.focused}:after`]: {
	      // translateX(0) is a workaround for Safari transform scale bug
	      // See https://github.com/mui/material-ui/issues/31766
	      transform: 'scaleX(1) translateX(0)'
	    },
	    [`&.${inputClasses$1.error}:after`]: {
	      borderBottomColor: (theme.vars || theme).palette.error.main,
	      transform: 'scaleX(1)' // error is always underlined in red
	    },

	    '&:before': {
	      borderBottom: `1px solid ${bottomLineColor}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '"\\00a0"',
	      position: 'absolute',
	      right: 0,
	      transition: theme.transitions.create('border-bottom-color', {
	        duration: theme.transitions.duration.shorter
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.
	    },

	    [`&:hover:not(.${inputClasses$1.disabled}):before`]: {
	      borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        borderBottom: `1px solid ${bottomLineColor}`
	      }
	    },
	    [`&.${inputClasses$1.disabled}:before`]: {
	      borderBottomStyle: 'dotted'
	    }
	  });
	});
	const InputInput = styled$1(InputBaseComponent, {
	  name: 'MuiInput',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})({});
	const Input = /*#__PURE__*/react.exports.forwardRef(function Input(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$input;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiInput'
	  });
	  const {
	      disableUnderline,
	      components = {},
	      componentsProps: componentsPropsProp,
	      fullWidth = false,
	      inputComponent = 'input',
	      multiline = false,
	      slotProps,
	      slots = {},
	      type = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$18);
	  const classes = useUtilityClasses$R(props);
	  const ownerState = {
	    disableUnderline
	  };
	  const inputComponentsProps = {
	    root: {
	      ownerState
	    }
	  };
	  const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
	  const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
	  const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(InputBase$1, _extends({
	    slots: {
	      root: RootSlot,
	      input: InputSlot
	    },
	    slotProps: componentsProps,
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes
	  }));
	});
	Input.muiName = 'Input';
	var Input$1 = Input;

	function getInputLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiInputLabel', slot);
	}
	generateUtilityClasses('MuiInputLabel', ['root', 'focused', 'disabled', 'error', 'required', 'asterisk', 'formControl', 'sizeSmall', 'shrink', 'animated', 'standard', 'filled', 'outlined']);

	const _excluded$17 = ["disableAnimation", "margin", "shrink", "variant", "className"];
	const useUtilityClasses$Q = ownerState => {
	  const {
	    classes,
	    formControl,
	    size,
	    shrink,
	    disableAnimation,
	    variant,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', formControl && 'formControl', !disableAnimation && 'animated', shrink && 'shrink', size === 'small' && 'sizeSmall', variant],
	    asterisk: [required && 'asterisk']
	  };
	  const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
	  return _extends({}, classes, composedClasses);
	};
	const InputLabelRoot = styled$1(FormLabel$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiInputLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${formLabelClasses$1.asterisk}`]: styles.asterisk
	    }, styles.root, ownerState.formControl && styles.formControl, ownerState.size === 'small' && styles.sizeSmall, ownerState.shrink && styles.shrink, !ownerState.disableAnimation && styles.animated, styles[ownerState.variant]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'block',
	  transformOrigin: 'top left',
	  whiteSpace: 'nowrap',
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  maxWidth: '100%'
	}, ownerState.formControl && {
	  position: 'absolute',
	  left: 0,
	  top: 0,
	  // slight alteration to spec spacing to match visual spec result
	  transform: 'translate(0, 20px) scale(1)'
	}, ownerState.size === 'small' && {
	  // Compensation for the `Input.inputSizeSmall` style.
	  transform: 'translate(0, 17px) scale(1)'
	}, ownerState.shrink && {
	  transform: 'translate(0, -1.5px) scale(0.75)',
	  transformOrigin: 'top left',
	  maxWidth: '133%'
	}, !ownerState.disableAnimation && {
	  transition: theme.transitions.create(['color', 'transform', 'max-width'], {
	    duration: theme.transitions.duration.shorter,
	    easing: theme.transitions.easing.easeOut
	  })
	}, ownerState.variant === 'filled' && _extends({
	  // Chrome's autofill feature gives the input field a yellow background.
	  // Since the input field is behind the label in the HTML tree,
	  // the input field is drawn last and hides the label with an opaque background color.
	  // zIndex: 1 will raise the label above opaque background-colors of input.
	  zIndex: 1,
	  pointerEvents: 'none',
	  transform: 'translate(12px, 16px) scale(1)',
	  maxWidth: 'calc(100% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(12px, 13px) scale(1)'
	}, ownerState.shrink && _extends({
	  userSelect: 'none',
	  pointerEvents: 'auto',
	  transform: 'translate(12px, 7px) scale(0.75)',
	  maxWidth: 'calc(133% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(12px, 4px) scale(0.75)'
	})), ownerState.variant === 'outlined' && _extends({
	  // see comment above on filled.zIndex
	  zIndex: 1,
	  pointerEvents: 'none',
	  transform: 'translate(14px, 16px) scale(1)',
	  maxWidth: 'calc(100% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(14px, 9px) scale(1)'
	}, ownerState.shrink && {
	  userSelect: 'none',
	  pointerEvents: 'auto',
	  maxWidth: 'calc(133% - 24px)',
	  transform: 'translate(14px, -9px) scale(0.75)'
	})));
	const InputLabel = /*#__PURE__*/react.exports.forwardRef(function InputLabel(inProps, ref) {
	  const props = useThemeProps({
	    name: 'MuiInputLabel',
	    props: inProps
	  });
	  const {
	      disableAnimation = false,
	      shrink: shrinkProp,
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$17);
	  const muiFormControl = useFormControl();
	  let shrink = shrinkProp;
	  if (typeof shrink === 'undefined' && muiFormControl) {
	    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
	  }
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['size', 'variant', 'required']
	  });
	  const ownerState = _extends({}, props, {
	    disableAnimation,
	    formControl: muiFormControl,
	    shrink,
	    size: fcs.size,
	    variant: fcs.variant,
	    required: fcs.required
	  });
	  const classes = useUtilityClasses$Q(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(InputLabelRoot, _extends({
	    "data-shrink": shrink,
	    ownerState: ownerState,
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other, {
	    classes: classes
	  }));
	});
	var InputLabel$1 = InputLabel;

	/**
	 * @ignore - internal component.
	 */
	const ListContext = /*#__PURE__*/react.exports.createContext({});
	var ListContext$1 = ListContext;

	function getListUtilityClass(slot) {
	  return generateUtilityClass('MuiList', slot);
	}
	generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);

	const _excluded$16 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
	const useUtilityClasses$P = ownerState => {
	  const {
	    classes,
	    disablePadding,
	    dense,
	    subheader
	  } = ownerState;
	  const slots = {
	    root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
	  };
	  return composeClasses(slots, getListUtilityClass, classes);
	};
	const ListRoot = styled$1('ul', {
	  name: 'MuiList',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
	  }
	})(({
	  ownerState
	}) => _extends({
	  listStyle: 'none',
	  margin: 0,
	  padding: 0,
	  position: 'relative'
	}, !ownerState.disablePadding && {
	  paddingTop: 8,
	  paddingBottom: 8
	}, ownerState.subheader && {
	  paddingTop: 0
	}));
	const List = /*#__PURE__*/react.exports.forwardRef(function List(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiList'
	  });
	  const {
	      children,
	      className,
	      component = 'ul',
	      dense = false,
	      disablePadding = false,
	      subheader
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$16);
	  const context = react.exports.useMemo(() => ({
	    dense
	  }), [dense]);
	  const ownerState = _extends({}, props, {
	    component,
	    dense,
	    disablePadding
	  });
	  const classes = useUtilityClasses$P(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext$1.Provider, {
	    value: context,
	    children: /*#__PURE__*/jsxRuntime.exports.jsxs(ListRoot, _extends({
	      as: component,
	      className: clsx(classes.root, className),
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      children: [subheader, children]
	    }))
	  });
	});
	var List$1 = List;

	const listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);
	var listItemIconClasses$1 = listItemIconClasses;

	const listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
	var listItemTextClasses$1 = listItemTextClasses;

	const _excluded$15 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
	function nextItem(list, item, disableListWrap) {
	  if (list === item) {
	    return list.firstChild;
	  }
	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }
	  return disableListWrap ? null : list.firstChild;
	}
	function previousItem(list, item, disableListWrap) {
	  if (list === item) {
	    return disableListWrap ? list.firstChild : list.lastChild;
	  }
	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }
	  return disableListWrap ? null : list.lastChild;
	}
	function textCriteriaMatches(nextFocus, textCriteria) {
	  if (textCriteria === undefined) {
	    return true;
	  }
	  let text = nextFocus.innerText;
	  if (text === undefined) {
	    // jsdom doesn't support innerText
	    text = nextFocus.textContent;
	  }
	  text = text.trim().toLowerCase();
	  if (text.length === 0) {
	    return false;
	  }
	  if (textCriteria.repeating) {
	    return text[0] === textCriteria.keys[0];
	  }
	  return text.indexOf(textCriteria.keys.join('')) === 0;
	}
	function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
	  while (nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return false;
	      }
	      wrappedOnce = true;
	    }

	    // Same logic as useAutocomplete.js
	    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
	    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus, disableListWrap);
	    } else {
	      nextFocus.focus();
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menubutton/.
	 * It's exposed to help customization of the [`Menu`](/material-ui/api/menu/) component if you
	 * use it separately you need to move focus into the component manually. Once
	 * the focus is placed inside the component it is fully keyboard accessible.
	 */
	const MenuList = /*#__PURE__*/react.exports.forwardRef(function MenuList(props, ref) {
	  const {
	      // private
	      // eslint-disable-next-line react/prop-types
	      actions,
	      autoFocus = false,
	      autoFocusItem = false,
	      children,
	      className,
	      disabledItemsFocusable = false,
	      disableListWrap = false,
	      onKeyDown,
	      variant = 'selectedMenu'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$15);
	  const listRef = react.exports.useRef(null);
	  const textCriteriaRef = react.exports.useRef({
	    keys: [],
	    repeating: true,
	    previousKeyMatched: true,
	    lastTime: null
	  });
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      listRef.current.focus();
	    }
	  }, [autoFocus]);
	  react.exports.useImperativeHandle(actions, () => ({
	    adjustStyleForScrollbar: (containerElement, theme) => {
	      // Let's ignore that piece of logic if users are already overriding the width
	      // of the menu.
	      const noExplicitWidth = !listRef.current.style.width;
	      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
	        const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
	        listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
	        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
	      }
	      return listRef.current;
	    }
	  }), []);
	  const handleKeyDown = event => {
	    const list = listRef.current;
	    const key = event.key;
	    /**
	     * @type {Element} - will always be defined since we are in a keydown handler
	     * attached to an element. A keydown event is either dispatched to the activeElement
	     * or document.body or document.documentElement. Only the first case will
	     * trigger this specific handler.
	     */
	    const currentFocus = ownerDocument(list).activeElement;
	    if (key === 'ArrowDown') {
	      // Prevent scroll of the page
	      event.preventDefault();
	      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
	    } else if (key === 'ArrowUp') {
	      event.preventDefault();
	      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
	    } else if (key === 'Home') {
	      event.preventDefault();
	      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
	    } else if (key === 'End') {
	      event.preventDefault();
	      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
	    } else if (key.length === 1) {
	      const criteria = textCriteriaRef.current;
	      const lowerKey = key.toLowerCase();
	      const currTime = performance.now();
	      if (criteria.keys.length > 0) {
	        // Reset
	        if (currTime - criteria.lastTime > 500) {
	          criteria.keys = [];
	          criteria.repeating = true;
	          criteria.previousKeyMatched = true;
	        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
	          criteria.repeating = false;
	        }
	      }
	      criteria.lastTime = currTime;
	      criteria.keys.push(lowerKey);
	      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
	      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
	        event.preventDefault();
	      } else {
	        criteria.previousKeyMatched = false;
	      }
	    }
	    if (onKeyDown) {
	      onKeyDown(event);
	    }
	  };
	  const handleRef = useForkRef(listRef, ref);

	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */
	  let activeItemIndex = -1;
	  // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback
	  react.exports.Children.forEach(children, (child, index) => {
	    if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	      return;
	    }
	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  const items = react.exports.Children.map(children, (child, index) => {
	    if (index === activeItemIndex) {
	      const newChildProps = {};
	      if (autoFocusItem) {
	        newChildProps.autoFocus = true;
	      }
	      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
	        newChildProps.tabIndex = 0;
	      }
	      return /*#__PURE__*/react.exports.cloneElement(child, newChildProps);
	    }
	    return child;
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(List$1, _extends({
	    role: "menu",
	    ref: handleRef,
	    className: className,
	    onKeyDown: handleKeyDown,
	    tabIndex: autoFocus ? 0 : -1
	  }, other, {
	    children: items
	  }));
	});
	var MenuList$1 = MenuList;

	function getPopoverUtilityClass(slot) {
	  return generateUtilityClass('MuiPopover', slot);
	}
	generateUtilityClasses('MuiPopover', ['root', 'paper']);

	const _excluded$14 = ["onEntering"],
	  _excluded2$6 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
	function getOffsetTop(rect, vertical) {
	  let offset = 0;
	  if (typeof vertical === 'number') {
	    offset = vertical;
	  } else if (vertical === 'center') {
	    offset = rect.height / 2;
	  } else if (vertical === 'bottom') {
	    offset = rect.height;
	  }
	  return offset;
	}
	function getOffsetLeft(rect, horizontal) {
	  let offset = 0;
	  if (typeof horizontal === 'number') {
	    offset = horizontal;
	  } else if (horizontal === 'center') {
	    offset = rect.width / 2;
	  } else if (horizontal === 'right') {
	    offset = rect.width;
	  }
	  return offset;
	}
	function getTransformOriginValue(transformOrigin) {
	  return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');
	}
	function resolveAnchorEl(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}
	const useUtilityClasses$O = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper']
	  };
	  return composeClasses(slots, getPopoverUtilityClass, classes);
	};
	const PopoverRoot = styled$1(Modal$1, {
	  name: 'MuiPopover',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const PopoverPaper = styled$1(Paper$1, {
	  name: 'MuiPopover',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  position: 'absolute',
	  overflowY: 'auto',
	  overflowX: 'hidden',
	  // So we see the popover when it's empty.
	  // It's most likely on issue on userland.
	  minWidth: 16,
	  minHeight: 16,
	  maxWidth: 'calc(100% - 32px)',
	  maxHeight: 'calc(100% - 32px)',
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Popover = /*#__PURE__*/react.exports.forwardRef(function Popover(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPopover'
	  });
	  const {
	      action,
	      anchorEl,
	      anchorOrigin = {
	        vertical: 'top',
	        horizontal: 'left'
	      },
	      anchorPosition,
	      anchorReference = 'anchorEl',
	      children,
	      className,
	      container: containerProp,
	      elevation = 8,
	      marginThreshold = 16,
	      open,
	      PaperProps = {},
	      transformOrigin = {
	        vertical: 'top',
	        horizontal: 'left'
	      },
	      TransitionComponent = Grow$1,
	      transitionDuration: transitionDurationProp = 'auto',
	      TransitionProps: {
	        onEntering
	      } = {}
	    } = props,
	    TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$14),
	    other = _objectWithoutPropertiesLoose(props, _excluded2$6);
	  const paperRef = react.exports.useRef();
	  const handlePaperRef = useForkRef(paperRef, PaperProps.ref);
	  const ownerState = _extends({}, props, {
	    anchorOrigin,
	    anchorReference,
	    elevation,
	    marginThreshold,
	    PaperProps,
	    transformOrigin,
	    TransitionComponent,
	    transitionDuration: transitionDurationProp,
	    TransitionProps
	  });
	  const classes = useUtilityClasses$O(ownerState);

	  // Returns the top/left offset of the position
	  // to attach to on the anchor element (or body if none is provided)
	  const getAnchorOffset = react.exports.useCallback(() => {
	    if (anchorReference === 'anchorPosition') {
	      return anchorPosition;
	    }
	    const resolvedAnchorEl = resolveAnchorEl(anchorEl);

	    // If an anchor element wasn't provided, just use the parent body element of this Popover
	    const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
	    const anchorRect = anchorElement.getBoundingClientRect();
	    return {
	      top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
	      left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
	    };
	  }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);

	  // Returns the base transform origin using the element
	  const getTransformOrigin = react.exports.useCallback(elemRect => {
	    return {
	      vertical: getOffsetTop(elemRect, transformOrigin.vertical),
	      horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
	    };
	  }, [transformOrigin.horizontal, transformOrigin.vertical]);
	  const getPositioningStyle = react.exports.useCallback(element => {
	    const elemRect = {
	      width: element.offsetWidth,
	      height: element.offsetHeight
	    };

	    // Get the transform origin point on the element itself
	    const elemTransformOrigin = getTransformOrigin(elemRect);
	    if (anchorReference === 'none') {
	      return {
	        top: null,
	        left: null,
	        transformOrigin: getTransformOriginValue(elemTransformOrigin)
	      };
	    }

	    // Get the offset of the anchoring element
	    const anchorOffset = getAnchorOffset();

	    // Calculate element positioning
	    let top = anchorOffset.top - elemTransformOrigin.vertical;
	    let left = anchorOffset.left - elemTransformOrigin.horizontal;
	    const bottom = top + elemRect.height;
	    const right = left + elemRect.width;

	    // Use the parent window of the anchorEl if provided
	    const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));

	    // Window thresholds taking required margin into account
	    const heightThreshold = containerWindow.innerHeight - marginThreshold;
	    const widthThreshold = containerWindow.innerWidth - marginThreshold;

	    // Check if the vertical axis needs shifting
	    if (top < marginThreshold) {
	      const diff = top - marginThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    } else if (bottom > heightThreshold) {
	      const diff = bottom - heightThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    }

	    // Check if the horizontal axis needs shifting
	    if (left < marginThreshold) {
	      const diff = left - marginThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    } else if (right > widthThreshold) {
	      const diff = right - widthThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    }
	    return {
	      top: `${Math.round(top)}px`,
	      left: `${Math.round(left)}px`,
	      transformOrigin: getTransformOriginValue(elemTransformOrigin)
	    };
	  }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
	  const [isPositioned, setIsPositioned] = react.exports.useState(open);
	  const setPositioningStyles = react.exports.useCallback(() => {
	    const element = paperRef.current;
	    if (!element) {
	      return;
	    }
	    const positioning = getPositioningStyle(element);
	    if (positioning.top !== null) {
	      element.style.top = positioning.top;
	    }
	    if (positioning.left !== null) {
	      element.style.left = positioning.left;
	    }
	    element.style.transformOrigin = positioning.transformOrigin;
	    setIsPositioned(true);
	  }, [getPositioningStyle]);
	  const handleEntering = (element, isAppearing) => {
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	    setPositioningStyles();
	  };
	  const handleExited = () => {
	    setIsPositioned(false);
	  };
	  react.exports.useEffect(() => {
	    if (open) {
	      setPositioningStyles();
	    }
	  });
	  react.exports.useImperativeHandle(action, () => open ? {
	    updatePosition: () => {
	      setPositioningStyles();
	    }
	  } : null, [open, setPositioningStyles]);
	  react.exports.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }
	    const handleResize = debounce$1(() => {
	      setPositioningStyles();
	    });
	    const containerWindow = ownerWindow(anchorEl);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [anchorEl, open, setPositioningStyles]);
	  let transitionDuration = transitionDurationProp;
	  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
	    transitionDuration = undefined;
	  }

	  // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container
	  const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(PopoverRoot, _extends({
	    BackdropProps: {
	      invisible: true
	    },
	    className: clsx(classes.root, className),
	    container: container,
	    open: open,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	      appear: true,
	      in: open,
	      onEntering: handleEntering,
	      onExited: handleExited,
	      timeout: transitionDuration
	    }, TransitionProps, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(PopoverPaper, _extends({
	        elevation: elevation
	      }, PaperProps, {
	        ref: handlePaperRef,
	        className: clsx(classes.paper, PaperProps.className)
	      }, isPositioned ? undefined : {
	        style: _extends({}, PaperProps.style, {
	          opacity: 0
	        })
	      }, {
	        ownerState: ownerState,
	        children: children
	      }))
	    }))
	  }));
	});
	var Popover$1 = Popover;

	function getMenuUtilityClass(slot) {
	  return generateUtilityClass('MuiMenu', slot);
	}
	generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);

	const _excluded$13 = ["onEntering"],
	  _excluded2$5 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
	const RTL_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'right'
	};
	const LTR_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'left'
	};
	const useUtilityClasses$N = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper'],
	    list: ['list']
	  };
	  return composeClasses(slots, getMenuUtilityClass, classes);
	};
	const MenuRoot = styled$1(Popover$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiMenu',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const MenuPaper = styled$1(Paper$1, {
	  name: 'MuiMenu',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  // specZ: The maximum height of a simple menu should be one or more rows less than the view
	  // height. This ensures a tapable area outside of the simple menu with which to dismiss
	  // the menu.
	  maxHeight: 'calc(100% - 96px)',
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch'
	});
	const MenuMenuList = styled$1(MenuList$1, {
	  name: 'MuiMenu',
	  slot: 'List',
	  overridesResolver: (props, styles) => styles.list
	})({
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Menu = /*#__PURE__*/react.exports.forwardRef(function Menu(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMenu'
	  });
	  const {
	      autoFocus = true,
	      children,
	      disableAutoFocusItem = false,
	      MenuListProps = {},
	      onClose,
	      open,
	      PaperProps = {},
	      PopoverClasses,
	      transitionDuration = 'auto',
	      TransitionProps: {
	        onEntering
	      } = {},
	      variant = 'selectedMenu'
	    } = props,
	    TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$13),
	    other = _objectWithoutPropertiesLoose(props, _excluded2$5);
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';
	  const ownerState = _extends({}, props, {
	    autoFocus,
	    disableAutoFocusItem,
	    MenuListProps,
	    onEntering,
	    PaperProps,
	    transitionDuration,
	    TransitionProps,
	    variant
	  });
	  const classes = useUtilityClasses$N(ownerState);
	  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
	  const menuListActionsRef = react.exports.useRef(null);
	  const handleEntering = (element, isAppearing) => {
	    if (menuListActionsRef.current) {
	      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
	    }
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	  };
	  const handleListKeyDown = event => {
	    if (event.key === 'Tab') {
	      event.preventDefault();
	      if (onClose) {
	        onClose(event, 'tabKeyDown');
	      }
	    }
	  };

	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */
	  let activeItemIndex = -1;
	  // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback
	  react.exports.Children.map(children, (child, index) => {
	    if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	      return;
	    }
	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(MenuRoot, _extends({
	    classes: PopoverClasses,
	    onClose: onClose,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: isRtl ? 'right' : 'left'
	    },
	    transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
	    PaperProps: _extends({
	      component: MenuPaper
	    }, PaperProps, {
	      classes: _extends({}, PaperProps.classes, {
	        root: classes.paper
	      })
	    }),
	    className: classes.root,
	    open: open,
	    ref: ref,
	    transitionDuration: transitionDuration,
	    TransitionProps: _extends({
	      onEntering: handleEntering
	    }, TransitionProps),
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuMenuList, _extends({
	      onKeyDown: handleListKeyDown,
	      actions: menuListActionsRef,
	      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
	      autoFocusItem: autoFocusItem,
	      variant: variant
	    }, MenuListProps, {
	      className: clsx(classes.list, MenuListProps.className),
	      children: children
	    }))
	  }));
	});
	var Menu$1 = Menu;

	function getMenuItemUtilityClass(slot) {
	  return generateUtilityClass('MuiMenuItem', slot);
	}
	const menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);
	var menuItemClasses$1 = menuItemClasses;

	const _excluded$12 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
	const overridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
	};
	const useUtilityClasses$M = ownerState => {
	  const {
	    disabled,
	    dense,
	    divider,
	    disableGutters,
	    selected,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']
	  };
	  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const MenuItemRoot = styled$1(ButtonBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiMenuItem',
	  slot: 'Root',
	  overridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body1, {
	  display: 'flex',
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  minHeight: 48,
	  paddingTop: 6,
	  paddingBottom: 6,
	  boxSizing: 'border-box',
	  whiteSpace: 'nowrap'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.divider && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
	  backgroundClip: 'padding-box'
	}, {
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${menuItemClasses$1.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${menuItemClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${menuItemClasses$1.selected}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  },
	  [`&.${menuItemClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${menuItemClasses$1.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  },
	  [`& + .${dividerClasses$1.root}`]: {
	    marginTop: theme.spacing(1),
	    marginBottom: theme.spacing(1)
	  },
	  [`& + .${dividerClasses$1.inset}`]: {
	    marginLeft: 52
	  },
	  [`& .${listItemTextClasses$1.root}`]: {
	    marginTop: 0,
	    marginBottom: 0
	  },
	  [`& .${listItemTextClasses$1.inset}`]: {
	    paddingLeft: 36
	  },
	  [`& .${listItemIconClasses$1.root}`]: {
	    minWidth: 36
	  }
	}, !ownerState.dense && {
	  [theme.breakpoints.up('sm')]: {
	    minHeight: 'auto'
	  }
	}, ownerState.dense && _extends({
	  minHeight: 32,
	  // https://m2.material.io/components/menus#specs > Dense
	  paddingTop: 4,
	  paddingBottom: 4
	}, theme.typography.body2, {
	  [`& .${listItemIconClasses$1.root} svg`]: {
	    fontSize: '1.25rem'
	  }
	})));
	const MenuItem = /*#__PURE__*/react.exports.forwardRef(function MenuItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMenuItem'
	  });
	  const {
	      autoFocus = false,
	      component = 'li',
	      dense = false,
	      divider = false,
	      disableGutters = false,
	      focusVisibleClassName,
	      role = 'menuitem',
	      tabIndex: tabIndexProp,
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$12);
	  const context = react.exports.useContext(ListContext$1);
	  const childContext = react.exports.useMemo(() => ({
	    dense: dense || context.dense || false,
	    disableGutters
	  }), [context.dense, dense, disableGutters]);
	  const menuItemRef = react.exports.useRef(null);
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      if (menuItemRef.current) {
	        menuItemRef.current.focus();
	      }
	    }
	  }, [autoFocus]);
	  const ownerState = _extends({}, props, {
	    dense: childContext.dense,
	    divider,
	    disableGutters
	  });
	  const classes = useUtilityClasses$M(props);
	  const handleRef = useForkRef(menuItemRef, ref);
	  let tabIndex;
	  if (!props.disabled) {
	    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
	  }
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ListContext$1.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuItemRoot, _extends({
	      ref: handleRef,
	      role: role,
	      tabIndex: tabIndex,
	      component: component,
	      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	      className: clsx(classes.root, className)
	    }, other, {
	      ownerState: ownerState,
	      classes: classes
	    }))
	  });
	});
	var MenuItem$1 = MenuItem;

	function getNativeSelectUtilityClasses(slot) {
	  return generateUtilityClass('MuiNativeSelect', slot);
	}
	const nativeSelectClasses = generateUtilityClasses('MuiNativeSelect', ['root', 'select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);
	var nativeSelectClasses$1 = nativeSelectClasses;

	const _excluded$11 = ["className", "disabled", "IconComponent", "inputRef", "variant"];
	const useUtilityClasses$L = ownerState => {
	  const {
	    classes,
	    variant,
	    disabled,
	    multiple,
	    open
	  } = ownerState;
	  const slots = {
	    select: ['select', variant, disabled && 'disabled', multiple && 'multiple'],
	    icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled']
	  };
	  return composeClasses(slots, getNativeSelectUtilityClasses, classes);
	};
	const nativeSelectSelectStyles = ({
	  ownerState,
	  theme
	}) => _extends({
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  // When interacting quickly, the text can end up selected.
	  // Native select can't be selected either.
	  userSelect: 'none',
	  borderRadius: 0,
	  // Reset
	  cursor: 'pointer',
	  '&:focus': _extends({}, theme.vars ? {
	    backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
	  } : {
	    backgroundColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
	  }, {
	    borderRadius: 0 // Reset Chrome style
	  }),

	  // Remove IE11 arrow
	  '&::-ms-expand': {
	    display: 'none'
	  },
	  [`&.${nativeSelectClasses$1.disabled}`]: {
	    cursor: 'default'
	  },
	  '&[multiple]': {
	    height: 'auto'
	  },
	  '&:not([multiple]) option, &:not([multiple]) optgroup': {
	    backgroundColor: (theme.vars || theme).palette.background.paper
	  },
	  // Bump specificity to allow extending custom inputs
	  '&&&': {
	    paddingRight: 24,
	    minWidth: 16 // So it doesn't collapse.
	  }
	}, ownerState.variant === 'filled' && {
	  '&&&': {
	    paddingRight: 32
	  }
	}, ownerState.variant === 'outlined' && {
	  borderRadius: (theme.vars || theme).shape.borderRadius,
	  '&:focus': {
	    borderRadius: (theme.vars || theme).shape.borderRadius // Reset the reset for Chrome style
	  },

	  '&&&': {
	    paddingRight: 32
	  }
	});
	const NativeSelectSelect = styled$1('select', {
	  name: 'MuiNativeSelect',
	  slot: 'Select',
	  shouldForwardProp: rootShouldForwardProp,
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.select, styles[ownerState.variant], {
	      [`&.${nativeSelectClasses$1.multiple}`]: styles.multiple
	    }];
	  }
	})(nativeSelectSelectStyles);
	const nativeSelectIconStyles = ({
	  ownerState,
	  theme
	}) => _extends({
	  // We use a position absolute over a flexbox in order to forward the pointer events
	  // to the input and to support wrapping tags..
	  position: 'absolute',
	  right: 0,
	  top: 'calc(50% - .5em)',
	  // Center vertically, height is 1em
	  pointerEvents: 'none',
	  // Don't block pointer events on the select under the icon.
	  color: (theme.vars || theme).palette.action.active,
	  [`&.${nativeSelectClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.action.disabled
	  }
	}, ownerState.open && {
	  transform: 'rotate(180deg)'
	}, ownerState.variant === 'filled' && {
	  right: 7
	}, ownerState.variant === 'outlined' && {
	  right: 7
	});
	const NativeSelectIcon = styled$1('svg', {
	  name: 'MuiNativeSelect',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
	  }
	})(nativeSelectIconStyles);

	/**
	 * @ignore - internal component.
	 */
	const NativeSelectInput = /*#__PURE__*/react.exports.forwardRef(function NativeSelectInput(props, ref) {
	  const {
	      className,
	      disabled,
	      IconComponent,
	      inputRef,
	      variant = 'standard'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$11);
	  const ownerState = _extends({}, props, {
	    disabled,
	    variant
	  });
	  const classes = useUtilityClasses$L(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(NativeSelectSelect, _extends({
	      ownerState: ownerState,
	      className: clsx(classes.select, className),
	      disabled: disabled,
	      ref: inputRef || ref
	    }, other)), props.multiple ? null : /*#__PURE__*/jsxRuntime.exports.jsx(NativeSelectIcon, {
	      as: IconComponent,
	      ownerState: ownerState,
	      className: classes.icon
	    })]
	  });
	});
	var NativeSelectInput$1 = NativeSelectInput;

	var _span$1;
	const _excluded$10 = ["children", "classes", "className", "label", "notched"];
	const NotchedOutlineRoot$1 = styled$1('fieldset')({
	  textAlign: 'left',
	  position: 'absolute',
	  bottom: 0,
	  right: 0,
	  top: -5,
	  left: 0,
	  margin: 0,
	  padding: '0 8px',
	  pointerEvents: 'none',
	  borderRadius: 'inherit',
	  borderStyle: 'solid',
	  borderWidth: 1,
	  overflow: 'hidden',
	  minWidth: '0%'
	});
	const NotchedOutlineLegend = styled$1('legend')(({
	  ownerState,
	  theme
	}) => _extends({
	  float: 'unset',
	  // Fix conflict with bootstrap
	  width: 'auto',
	  // Fix conflict with bootstrap
	  overflow: 'hidden'
	}, !ownerState.withLabel && {
	  padding: 0,
	  lineHeight: '11px',
	  // sync with `height` in `legend` styles
	  transition: theme.transitions.create('width', {
	    duration: 150,
	    easing: theme.transitions.easing.easeOut
	  })
	}, ownerState.withLabel && _extends({
	  display: 'block',
	  // Fix conflict with normalize.css and sanitize.css
	  padding: 0,
	  height: 11,
	  // sync with `lineHeight` in `legend` styles
	  fontSize: '0.75em',
	  visibility: 'hidden',
	  maxWidth: 0.01,
	  transition: theme.transitions.create('max-width', {
	    duration: 50,
	    easing: theme.transitions.easing.easeOut
	  }),
	  whiteSpace: 'nowrap',
	  '& > span': {
	    paddingLeft: 5,
	    paddingRight: 5,
	    display: 'inline-block',
	    opacity: 0,
	    visibility: 'visible'
	  }
	}, ownerState.notched && {
	  maxWidth: '100%',
	  transition: theme.transitions.create('max-width', {
	    duration: 100,
	    easing: theme.transitions.easing.easeOut,
	    delay: 50
	  })
	})));

	/**
	 * @ignore - internal component.
	 */
	function NotchedOutline(props) {
	  const {
	      className,
	      label,
	      notched
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$10);
	  const withLabel = label != null && label !== '';
	  const ownerState = _extends({}, props, {
	    notched,
	    withLabel
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(NotchedOutlineRoot$1, _extends({
	    "aria-hidden": true,
	    className: className,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(NotchedOutlineLegend, {
	      ownerState: ownerState,
	      children: withLabel ? /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        children: label
	      }) : // notranslate needed while Google Translate will not fix zero-width space issue
	      _span$1 || (_span$1 = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        className: "notranslate",
	        children: "\u200B"
	      }))
	    })
	  }));
	}

	const _excluded$$ = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
	const useUtilityClasses$K = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    notchedOutline: ['notchedOutline'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const OutlinedInputRoot = styled$1(InputBaseRoot, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiOutlinedInput',
	  slot: 'Root',
	  overridesResolver: rootOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
	  return _extends({
	    position: 'relative',
	    borderRadius: (theme.vars || theme).shape.borderRadius,
	    [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette.text.primary
	    },
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
	        borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
	      }
	    },
	    [`&.${outlinedInputClasses$1.focused} .${outlinedInputClasses$1.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette[ownerState.color].main,
	      borderWidth: 2
	    },
	    [`&.${outlinedInputClasses$1.error} .${outlinedInputClasses$1.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette.error.main
	    },
	    [`&.${outlinedInputClasses$1.disabled} .${outlinedInputClasses$1.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette.action.disabled
	    }
	  }, ownerState.startAdornment && {
	    paddingLeft: 14
	  }, ownerState.endAdornment && {
	    paddingRight: 14
	  }, ownerState.multiline && _extends({
	    padding: '16.5px 14px'
	  }, ownerState.size === 'small' && {
	    padding: '8.5px 14px'
	  }));
	});
	const NotchedOutlineRoot = styled$1(NotchedOutline, {
	  name: 'MuiOutlinedInput',
	  slot: 'NotchedOutline',
	  overridesResolver: (props, styles) => styles.notchedOutline
	})(({
	  theme
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
	  return {
	    borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
	  };
	});
	const OutlinedInputInput = styled$1(InputBaseComponent, {
	  name: 'MuiOutlinedInput',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  padding: '16.5px 14px'
	}, !theme.vars && {
	  '&:-webkit-autofill': {
	    WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
	    WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
	    caretColor: theme.palette.mode === 'light' ? null : '#fff',
	    borderRadius: 'inherit'
	  }
	}, theme.vars && {
	  '&:-webkit-autofill': {
	    borderRadius: 'inherit'
	  },
	  [theme.getColorSchemeSelector('dark')]: {
	    '&:-webkit-autofill': {
	      WebkitBoxShadow: '0 0 0 100px #266798 inset',
	      WebkitTextFillColor: '#fff',
	      caretColor: '#fff'
	    }
	  }
	}, ownerState.size === 'small' && {
	  padding: '8.5px 14px'
	}, ownerState.multiline && {
	  padding: 0
	}, ownerState.startAdornment && {
	  paddingLeft: 0
	}, ownerState.endAdornment && {
	  paddingRight: 0
	}));
	const OutlinedInput = /*#__PURE__*/react.exports.forwardRef(function OutlinedInput(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiOutlinedInput'
	  });
	  const {
	      components = {},
	      fullWidth = false,
	      inputComponent = 'input',
	      label,
	      multiline = false,
	      notched,
	      slots = {},
	      type = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$$);
	  const classes = useUtilityClasses$K(props);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['required']
	  });
	  const ownerState = _extends({}, props, {
	    color: fcs.color || 'primary',
	    disabled: fcs.disabled,
	    error: fcs.error,
	    focused: fcs.focused,
	    formControl: muiFormControl,
	    fullWidth,
	    hiddenLabel: fcs.hiddenLabel,
	    multiline,
	    size: fcs.size,
	    type
	  });
	  const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
	  const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(InputBase$1, _extends({
	    slots: {
	      root: RootSlot,
	      input: InputSlot
	    },
	    renderSuffix: state => /*#__PURE__*/jsxRuntime.exports.jsx(NotchedOutlineRoot, {
	      ownerState: ownerState,
	      className: classes.notchedOutline,
	      label: label != null && label !== '' && fcs.required ? _React$Fragment || (_React$Fragment = /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	        children: [label, "\xA0", '*']
	      })) : label,
	      notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
	    }),
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: _extends({}, classes, {
	      notchedOutline: null
	    })
	  }));
	});
	OutlinedInput.muiName = 'Input';
	var OutlinedInput$1 = OutlinedInput;

	var FirstPageIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
	}), 'FirstPage');

	var LastPageIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
	}), 'LastPage');

	function getSelectUtilityClasses(slot) {
	  return generateUtilityClass('MuiSelect', slot);
	}
	const selectClasses = generateUtilityClasses('MuiSelect', ['select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'focused', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput']);
	var selectClasses$1 = selectClasses;

	var _span;
	const _excluded$_ = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
	const SelectSelect = styled$1('div', {
	  name: 'MuiSelect',
	  slot: 'Select',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [
	    // Win specificity over the input base
	    {
	      [`&.${selectClasses$1.select}`]: styles.select
	    }, {
	      [`&.${selectClasses$1.select}`]: styles[ownerState.variant]
	    }, {
	      [`&.${selectClasses$1.multiple}`]: styles.multiple
	    }];
	  }
	})(nativeSelectSelectStyles, {
	  // Win specificity over the input base
	  [`&.${selectClasses$1.select}`]: {
	    height: 'auto',
	    // Resets for multiple select with chips
	    minHeight: '1.4375em',
	    // Required for select\text-field height consistency
	    textOverflow: 'ellipsis',
	    whiteSpace: 'nowrap',
	    overflow: 'hidden'
	  }
	});
	const SelectIcon = styled$1('svg', {
	  name: 'MuiSelect',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
	  }
	})(nativeSelectIconStyles);
	const SelectNativeInput = styled$1('input', {
	  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'classes',
	  name: 'MuiSelect',
	  slot: 'NativeInput',
	  overridesResolver: (props, styles) => styles.nativeInput
	})({
	  bottom: 0,
	  left: 0,
	  position: 'absolute',
	  opacity: 0,
	  pointerEvents: 'none',
	  width: '100%',
	  boxSizing: 'border-box'
	});
	function areEqualValues(a, b) {
	  if (typeof b === 'object' && b !== null) {
	    return a === b;
	  }

	  // The value could be a number, the DOM will stringify it anyway.
	  return String(a) === String(b);
	}
	function isEmpty(display) {
	  return display == null || typeof display === 'string' && !display.trim();
	}
	const useUtilityClasses$J = ownerState => {
	  const {
	    classes,
	    variant,
	    disabled,
	    multiple,
	    open
	  } = ownerState;
	  const slots = {
	    select: ['select', variant, disabled && 'disabled', multiple && 'multiple'],
	    icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled'],
	    nativeInput: ['nativeInput']
	  };
	  return composeClasses(slots, getSelectUtilityClasses, classes);
	};

	/**
	 * @ignore - internal component.
	 */
	const SelectInput = /*#__PURE__*/react.exports.forwardRef(function SelectInput(props, ref) {
	  const {
	      'aria-describedby': ariaDescribedby,
	      'aria-label': ariaLabel,
	      autoFocus,
	      autoWidth,
	      children,
	      className,
	      defaultOpen,
	      defaultValue,
	      disabled,
	      displayEmpty,
	      IconComponent,
	      inputRef: inputRefProp,
	      labelId,
	      MenuProps = {},
	      multiple,
	      name,
	      onBlur,
	      onChange,
	      onClose,
	      onFocus,
	      onOpen,
	      open: openProp,
	      readOnly,
	      renderValue,
	      SelectDisplayProps = {},
	      tabIndex: tabIndexProp,
	      value: valueProp,
	      variant = 'standard'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$_);
	  const [value, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'Select'
	  });
	  const [openState, setOpenState] = useControlled({
	    controlled: openProp,
	    default: defaultOpen,
	    name: 'Select'
	  });
	  const inputRef = react.exports.useRef(null);
	  const displayRef = react.exports.useRef(null);
	  const [displayNode, setDisplayNode] = react.exports.useState(null);
	  const {
	    current: isOpenControlled
	  } = react.exports.useRef(openProp != null);
	  const [menuMinWidthState, setMenuMinWidthState] = react.exports.useState();
	  const handleRef = useForkRef(ref, inputRefProp);
	  const handleDisplayRef = react.exports.useCallback(node => {
	    displayRef.current = node;
	    if (node) {
	      setDisplayNode(node);
	    }
	  }, []);
	  react.exports.useImperativeHandle(handleRef, () => ({
	    focus: () => {
	      displayRef.current.focus();
	    },
	    node: inputRef.current,
	    value
	  }), [value]);

	  // Resize menu on `defaultOpen` automatic toggle.
	  react.exports.useEffect(() => {
	    if (defaultOpen && openState && displayNode && !isOpenControlled) {
	      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
	      displayRef.current.focus();
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [displayNode, autoWidth]);
	  // `isOpenControlled` is ignored because the component should never switch between controlled and uncontrolled modes.
	  // `defaultOpen` and `openState` are ignored to avoid unnecessary callbacks.
	  react.exports.useEffect(() => {
	    if (autoFocus) {
	      displayRef.current.focus();
	    }
	  }, [autoFocus]);
	  react.exports.useEffect(() => {
	    if (!labelId) {
	      return undefined;
	    }
	    const label = ownerDocument(displayRef.current).getElementById(labelId);
	    if (label) {
	      const handler = () => {
	        if (getSelection().isCollapsed) {
	          displayRef.current.focus();
	        }
	      };
	      label.addEventListener('click', handler);
	      return () => {
	        label.removeEventListener('click', handler);
	      };
	    }
	    return undefined;
	  }, [labelId]);
	  const update = (open, event) => {
	    if (open) {
	      if (onOpen) {
	        onOpen(event);
	      }
	    } else if (onClose) {
	      onClose(event);
	    }
	    if (!isOpenControlled) {
	      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
	      setOpenState(open);
	    }
	  };
	  const handleMouseDown = event => {
	    // Ignore everything but left-click
	    if (event.button !== 0) {
	      return;
	    }
	    // Hijack the default focus behavior.
	    event.preventDefault();
	    displayRef.current.focus();
	    update(true, event);
	  };
	  const handleClose = event => {
	    update(false, event);
	  };
	  const childrenArray = react.exports.Children.toArray(children);

	  // Support autofill.
	  const handleChange = event => {
	    const index = childrenArray.map(child => child.props.value).indexOf(event.target.value);
	    if (index === -1) {
	      return;
	    }
	    const child = childrenArray[index];
	    setValueState(child.props.value);
	    if (onChange) {
	      onChange(event, child);
	    }
	  };
	  const handleItemClick = child => event => {
	    let newValue;

	    // We use the tabindex attribute to signal the available options.
	    if (!event.currentTarget.hasAttribute('tabindex')) {
	      return;
	    }
	    if (multiple) {
	      newValue = Array.isArray(value) ? value.slice() : [];
	      const itemIndex = value.indexOf(child.props.value);
	      if (itemIndex === -1) {
	        newValue.push(child.props.value);
	      } else {
	        newValue.splice(itemIndex, 1);
	      }
	    } else {
	      newValue = child.props.value;
	    }
	    if (child.props.onClick) {
	      child.props.onClick(event);
	    }
	    if (value !== newValue) {
	      setValueState(newValue);
	      if (onChange) {
	        // Redefine target to allow name and value to be read.
	        // This allows seamless integration with the most popular form libraries.
	        // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
	        // Clone the event to not override `target` of the original event.
	        const nativeEvent = event.nativeEvent || event;
	        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	        Object.defineProperty(clonedEvent, 'target', {
	          writable: true,
	          value: {
	            value: newValue,
	            name
	          }
	        });
	        onChange(clonedEvent, child);
	      }
	    }
	    if (!multiple) {
	      update(false, event);
	    }
	  };
	  const handleKeyDown = event => {
	    if (!readOnly) {
	      const validKeys = [' ', 'ArrowUp', 'ArrowDown',
	      // The native select doesn't respond to enter on macOS, but it's recommended by
	      // https://www.w3.org/WAI/ARIA/apg/example-index/combobox/combobox-select-only.html
	      'Enter'];
	      if (validKeys.indexOf(event.key) !== -1) {
	        event.preventDefault();
	        update(true, event);
	      }
	    }
	  };
	  const open = displayNode !== null && openState;
	  const handleBlur = event => {
	    // if open event.stopImmediatePropagation
	    if (!open && onBlur) {
	      // Preact support, target is read only property on a native event.
	      Object.defineProperty(event, 'target', {
	        writable: true,
	        value: {
	          value,
	          name
	        }
	      });
	      onBlur(event);
	    }
	  };
	  delete other['aria-invalid'];
	  let display;
	  let displaySingle;
	  const displayMultiple = [];
	  let computeDisplay = false;

	  // No need to display any value if the field is empty.
	  if (isFilled({
	    value
	  }) || displayEmpty) {
	    if (renderValue) {
	      display = renderValue(value);
	    } else {
	      computeDisplay = true;
	    }
	  }
	  const items = childrenArray.map((child, index, arr) => {
	    if (! /*#__PURE__*/react.exports.isValidElement(child)) {
	      return null;
	    }
	    let selected;
	    if (multiple) {
	      if (!Array.isArray(value)) {
	        throw new Error(formatMuiErrorMessage(2));
	      }
	      selected = value.some(v => areEqualValues(v, child.props.value));
	      if (selected && computeDisplay) {
	        displayMultiple.push(child.props.children);
	      }
	    } else {
	      selected = areEqualValues(value, child.props.value);
	      if (selected && computeDisplay) {
	        displaySingle = child.props.children;
	      }
	    }
	    if (child.props.value === undefined) {
	      return /*#__PURE__*/react.exports.cloneElement(child, {
	        'aria-readonly': true,
	        role: 'option'
	      });
	    }
	    const isFirstSelectableElement = () => {
	      if (value) {
	        return selected;
	      }
	      const firstSelectableElement = arr.find(item => item.props.value !== undefined && item.props.disabled !== true);
	      if (child === firstSelectableElement) {
	        return true;
	      }
	      return selected;
	    };
	    return /*#__PURE__*/react.exports.cloneElement(child, {
	      'aria-selected': selected ? 'true' : 'false',
	      onClick: handleItemClick(child),
	      onKeyUp: event => {
	        if (event.key === ' ') {
	          // otherwise our MenuItems dispatches a click event
	          // it's not behavior of the native <option> and causes
	          // the select to close immediately since we open on space keydown
	          event.preventDefault();
	        }
	        if (child.props.onKeyUp) {
	          child.props.onKeyUp(event);
	        }
	      },
	      role: 'option',
	      selected: arr[0].props.value === undefined || arr[0].props.disabled === true ? isFirstSelectableElement() : selected,
	      value: undefined,
	      // The value is most likely not a valid HTML attribute.
	      'data-value': child.props.value // Instead, we provide it as a data attribute.
	    });
	  });
	  if (computeDisplay) {
	    if (multiple) {
	      if (displayMultiple.length === 0) {
	        display = null;
	      } else {
	        display = displayMultiple.reduce((output, child, index) => {
	          output.push(child);
	          if (index < displayMultiple.length - 1) {
	            output.push(', ');
	          }
	          return output;
	        }, []);
	      }
	    } else {
	      display = displaySingle;
	    }
	  }

	  // Avoid performing a layout computation in the render method.
	  let menuMinWidth = menuMinWidthState;
	  if (!autoWidth && isOpenControlled && displayNode) {
	    menuMinWidth = displayNode.clientWidth;
	  }
	  let tabIndex;
	  if (typeof tabIndexProp !== 'undefined') {
	    tabIndex = tabIndexProp;
	  } else {
	    tabIndex = disabled ? null : 0;
	  }
	  const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : undefined);
	  const ownerState = _extends({}, props, {
	    variant,
	    value,
	    open
	  });
	  const classes = useUtilityClasses$J(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(SelectSelect, _extends({
	      ref: handleDisplayRef,
	      tabIndex: tabIndex,
	      role: "button",
	      "aria-disabled": disabled ? 'true' : undefined,
	      "aria-expanded": open ? 'true' : 'false',
	      "aria-haspopup": "listbox",
	      "aria-label": ariaLabel,
	      "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
	      "aria-describedby": ariaDescribedby,
	      onKeyDown: handleKeyDown,
	      onMouseDown: disabled || readOnly ? null : handleMouseDown,
	      onBlur: handleBlur,
	      onFocus: onFocus
	    }, SelectDisplayProps, {
	      ownerState: ownerState,
	      className: clsx(SelectDisplayProps.className, classes.select, className)
	      // The id is required for proper a11y
	      ,
	      id: buttonId,
	      children: isEmpty(display) ? // notranslate needed while Google Translate will not fix zero-width space issue
	      _span || (_span = /*#__PURE__*/jsxRuntime.exports.jsx("span", {
	        className: "notranslate",
	        children: "\u200B"
	      })) : display
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(SelectNativeInput, _extends({
	      value: Array.isArray(value) ? value.join(',') : value,
	      name: name,
	      ref: inputRef,
	      "aria-hidden": true,
	      onChange: handleChange,
	      tabIndex: -1,
	      disabled: disabled,
	      className: classes.nativeInput,
	      autoFocus: autoFocus,
	      ownerState: ownerState
	    }, other)), /*#__PURE__*/jsxRuntime.exports.jsx(SelectIcon, {
	      as: IconComponent,
	      className: classes.icon,
	      ownerState: ownerState
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(Menu$1, _extends({
	      id: `menu-${name || ''}`,
	      anchorEl: displayNode,
	      open: open,
	      onClose: handleClose,
	      anchorOrigin: {
	        vertical: 'bottom',
	        horizontal: 'center'
	      },
	      transformOrigin: {
	        vertical: 'top',
	        horizontal: 'center'
	      }
	    }, MenuProps, {
	      MenuListProps: _extends({
	        'aria-labelledby': labelId,
	        role: 'listbox',
	        disableListWrap: true
	      }, MenuProps.MenuListProps),
	      PaperProps: _extends({}, MenuProps.PaperProps, {
	        style: _extends({
	          minWidth: menuMinWidth
	        }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
	      }),
	      children: items
	    }))]
	  });
	});
	var SelectInput$1 = SelectInput;

	var _StyledInput, _StyledFilledInput;
	const _excluded$Z = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
	const useUtilityClasses$I = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  return classes;
	};
	const styledRootConfig = {
	  name: 'MuiSelect',
	  overridesResolver: (props, styles) => styles.root,
	  shouldForwardProp: prop => rootShouldForwardProp(prop) && prop !== 'variant',
	  slot: 'Root'
	};
	const StyledInput = styled$1(Input$1, styledRootConfig)('');
	const StyledOutlinedInput = styled$1(OutlinedInput$1, styledRootConfig)('');
	const StyledFilledInput = styled$1(FilledInput$1, styledRootConfig)('');
	const Select = /*#__PURE__*/react.exports.forwardRef(function Select(inProps, ref) {
	  const props = useThemeProps({
	    name: 'MuiSelect',
	    props: inProps
	  });
	  const {
	      autoWidth = false,
	      children,
	      classes: classesProp = {},
	      className,
	      defaultOpen = false,
	      displayEmpty = false,
	      IconComponent = ArrowDropDownIcon,
	      id,
	      input,
	      inputProps,
	      label,
	      labelId,
	      MenuProps,
	      multiple = false,
	      native = false,
	      onClose,
	      onOpen,
	      open,
	      renderValue,
	      SelectDisplayProps,
	      variant: variantProp = 'outlined'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$Z);
	  const inputComponent = native ? NativeSelectInput$1 : SelectInput$1;
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['variant']
	  });
	  const variant = fcs.variant || variantProp;
	  const InputComponent = input || {
	    standard: _StyledInput || (_StyledInput = /*#__PURE__*/jsxRuntime.exports.jsx(StyledInput, {})),
	    outlined: /*#__PURE__*/jsxRuntime.exports.jsx(StyledOutlinedInput, {
	      label: label
	    }),
	    filled: _StyledFilledInput || (_StyledFilledInput = /*#__PURE__*/jsxRuntime.exports.jsx(StyledFilledInput, {}))
	  }[variant];
	  const ownerState = _extends({}, props, {
	    variant,
	    classes: classesProp
	  });
	  const classes = useUtilityClasses$I(ownerState);
	  const inputComponentRef = useForkRef(ref, InputComponent.ref);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(react.exports.Fragment, {
	    children: /*#__PURE__*/react.exports.cloneElement(InputComponent, _extends({
	      // Most of the logic is implemented in `SelectInput`.
	      // The `Select` component is a simple API wrapper to expose something better to play with.
	      inputComponent,
	      inputProps: _extends({
	        children,
	        IconComponent,
	        variant,
	        type: undefined,
	        // We render a select. We can ignore the type provided by the `Input`.
	        multiple
	      }, native ? {
	        id
	      } : {
	        autoWidth,
	        defaultOpen,
	        displayEmpty,
	        labelId,
	        MenuProps,
	        onClose,
	        onOpen,
	        open,
	        renderValue,
	        SelectDisplayProps: _extends({
	          id
	        }, SelectDisplayProps)
	      }, inputProps, {
	        classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
	      }, input ? input.props.inputProps : {})
	    }, multiple && native && variant === 'outlined' ? {
	      notched: true
	    } : {}, {
	      ref: inputComponentRef,
	      className: clsx(InputComponent.props.className, className)
	    }, !input && {
	      variant
	    }, other))
	  });
	});
	Select.muiName = 'Select';
	var MUISelect = Select;

	function getSkeletonUtilityClass(slot) {
	  return generateUtilityClass('MuiSkeleton', slot);
	}
	generateUtilityClasses('MuiSkeleton', ['root', 'text', 'rectangular', 'rounded', 'circular', 'pulse', 'wave', 'withChildren', 'fitContent', 'heightAuto']);

	const _excluded$Y = ["animation", "className", "component", "height", "style", "variant", "width"];
	let _ = t => t,
	  _t,
	  _t2,
	  _t3,
	  _t4;
	const useUtilityClasses$H = ownerState => {
	  const {
	    classes,
	    variant,
	    animation,
	    hasChildren,
	    width,
	    height
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, animation, hasChildren && 'withChildren', hasChildren && !width && 'fitContent', hasChildren && !height && 'heightAuto']
	  };
	  return composeClasses(slots, getSkeletonUtilityClass, classes);
	};
	const pulseKeyframe = keyframes(_t || (_t = _`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
	const waveKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
	const SkeletonRoot = styled$1('span', {
	  name: 'MuiSkeleton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], ownerState.animation !== false && styles[ownerState.animation], ownerState.hasChildren && styles.withChildren, ownerState.hasChildren && !ownerState.width && styles.fitContent, ownerState.hasChildren && !ownerState.height && styles.heightAuto];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const radiusUnit = getUnit(theme.shape.borderRadius) || 'px';
	  const radiusValue = toUnitless(theme.shape.borderRadius);
	  return _extends({
	    display: 'block',
	    // Create a "on paper" color with sufficient contrast retaining the color
	    backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === 'light' ? 0.11 : 0.13),
	    height: '1.2em'
	  }, ownerState.variant === 'text' && {
	    marginTop: 0,
	    marginBottom: 0,
	    height: 'auto',
	    transformOrigin: '0 55%',
	    transform: 'scale(1, 0.60)',
	    borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
	    '&:empty:before': {
	      content: '"\\00a0"'
	    }
	  }, ownerState.variant === 'circular' && {
	    borderRadius: '50%'
	  }, ownerState.variant === 'rounded' && {
	    borderRadius: (theme.vars || theme).shape.borderRadius
	  }, ownerState.hasChildren && {
	    '& > *': {
	      visibility: 'hidden'
	    }
	  }, ownerState.hasChildren && !ownerState.width && {
	    maxWidth: 'fit-content'
	  }, ownerState.hasChildren && !ownerState.height && {
	    height: 'auto'
	  });
	}, ({
	  ownerState
	}) => ownerState.animation === 'pulse' && css(_t3 || (_t3 = _`
      animation: ${0} 1.5s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
	  ownerState,
	  theme
	}) => ownerState.animation === 'wave' && css(_t4 || (_t4 = _`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 1.6s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, (theme.vars || theme).palette.action.hover));
	const Skeleton = /*#__PURE__*/react.exports.forwardRef(function Skeleton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSkeleton'
	  });
	  const {
	      animation = 'pulse',
	      className,
	      component = 'span',
	      height,
	      style,
	      variant = 'text',
	      width
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$Y);
	  const ownerState = _extends({}, props, {
	    animation,
	    component,
	    variant,
	    hasChildren: Boolean(other.children)
	  });
	  const classes = useUtilityClasses$H(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(SkeletonRoot, _extends({
	    as: component,
	    ref: ref,
	    className: clsx(classes.root, className),
	    ownerState: ownerState
	  }, other, {
	    style: _extends({
	      width,
	      height
	    }, style)
	  }));
	});
	var Skeleton$1 = Skeleton;

	function getTooltipUtilityClass(slot) {
	  return generateUtilityClass('MuiTooltip', slot);
	}
	const tooltipClasses = generateUtilityClasses('MuiTooltip', ['popper', 'popperInteractive', 'popperArrow', 'popperClose', 'tooltip', 'tooltipArrow', 'touch', 'tooltipPlacementLeft', 'tooltipPlacementRight', 'tooltipPlacementTop', 'tooltipPlacementBottom', 'arrow']);
	var tooltipClasses$1 = tooltipClasses;

	const _excluded$X = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
	function round(value) {
	  return Math.round(value * 1e5) / 1e5;
	}
	const useUtilityClasses$G = ownerState => {
	  const {
	    classes,
	    disableInteractive,
	    arrow,
	    touch,
	    placement
	  } = ownerState;
	  const slots = {
	    popper: ['popper', !disableInteractive && 'popperInteractive', arrow && 'popperArrow'],
	    tooltip: ['tooltip', arrow && 'tooltipArrow', touch && 'touch', `tooltipPlacement${capitalize(placement.split('-')[0])}`],
	    arrow: ['arrow']
	  };
	  return composeClasses(slots, getTooltipUtilityClass, classes);
	};
	const TooltipPopper = styled$1(MUIPopper, {
	  name: 'MuiTooltip',
	  slot: 'Popper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.popper, !ownerState.disableInteractive && styles.popperInteractive, ownerState.arrow && styles.popperArrow, !ownerState.open && styles.popperClose];
	  }
	})(({
	  theme,
	  ownerState,
	  open
	}) => _extends({
	  zIndex: (theme.vars || theme).zIndex.tooltip,
	  pointerEvents: 'none'
	}, !ownerState.disableInteractive && {
	  pointerEvents: 'auto'
	}, !open && {
	  pointerEvents: 'none'
	}, ownerState.arrow && {
	  [`&[data-popper-placement*="bottom"] .${tooltipClasses$1.arrow}`]: {
	    top: 0,
	    marginTop: '-0.71em',
	    '&::before': {
	      transformOrigin: '0 100%'
	    }
	  },
	  [`&[data-popper-placement*="top"] .${tooltipClasses$1.arrow}`]: {
	    bottom: 0,
	    marginBottom: '-0.71em',
	    '&::before': {
	      transformOrigin: '100% 0'
	    }
	  },
	  [`&[data-popper-placement*="right"] .${tooltipClasses$1.arrow}`]: _extends({}, !ownerState.isRtl ? {
	    left: 0,
	    marginLeft: '-0.71em'
	  } : {
	    right: 0,
	    marginRight: '-0.71em'
	  }, {
	    height: '1em',
	    width: '0.71em',
	    '&::before': {
	      transformOrigin: '100% 100%'
	    }
	  }),
	  [`&[data-popper-placement*="left"] .${tooltipClasses$1.arrow}`]: _extends({}, !ownerState.isRtl ? {
	    right: 0,
	    marginRight: '-0.71em'
	  } : {
	    left: 0,
	    marginLeft: '-0.71em'
	  }, {
	    height: '1em',
	    width: '0.71em',
	    '&::before': {
	      transformOrigin: '0 0'
	    }
	  })
	}));
	const TooltipTooltip = styled$1('div', {
	  name: 'MuiTooltip',
	  slot: 'Tooltip',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.tooltip, ownerState.touch && styles.touch, ownerState.arrow && styles.tooltipArrow, styles[`tooltipPlacement${capitalize(ownerState.placement.split('-')[0])}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.92),
	  borderRadius: (theme.vars || theme).shape.borderRadius,
	  color: (theme.vars || theme).palette.common.white,
	  fontFamily: theme.typography.fontFamily,
	  padding: '4px 8px',
	  fontSize: theme.typography.pxToRem(11),
	  maxWidth: 300,
	  margin: 2,
	  wordWrap: 'break-word',
	  fontWeight: theme.typography.fontWeightMedium
	}, ownerState.arrow && {
	  position: 'relative',
	  margin: 0
	}, ownerState.touch && {
	  padding: '8px 16px',
	  fontSize: theme.typography.pxToRem(14),
	  lineHeight: `${round(16 / 14)}em`,
	  fontWeight: theme.typography.fontWeightRegular
	}, {
	  [`.${tooltipClasses$1.popper}[data-popper-placement*="left"] &`]: _extends({
	    transformOrigin: 'right center'
	  }, !ownerState.isRtl ? _extends({
	    marginRight: '14px'
	  }, ownerState.touch && {
	    marginRight: '24px'
	  }) : _extends({
	    marginLeft: '14px'
	  }, ownerState.touch && {
	    marginLeft: '24px'
	  })),
	  [`.${tooltipClasses$1.popper}[data-popper-placement*="right"] &`]: _extends({
	    transformOrigin: 'left center'
	  }, !ownerState.isRtl ? _extends({
	    marginLeft: '14px'
	  }, ownerState.touch && {
	    marginLeft: '24px'
	  }) : _extends({
	    marginRight: '14px'
	  }, ownerState.touch && {
	    marginRight: '24px'
	  })),
	  [`.${tooltipClasses$1.popper}[data-popper-placement*="top"] &`]: _extends({
	    transformOrigin: 'center bottom',
	    marginBottom: '14px'
	  }, ownerState.touch && {
	    marginBottom: '24px'
	  }),
	  [`.${tooltipClasses$1.popper}[data-popper-placement*="bottom"] &`]: _extends({
	    transformOrigin: 'center top',
	    marginTop: '14px'
	  }, ownerState.touch && {
	    marginTop: '24px'
	  })
	}));
	const TooltipArrow = styled$1('span', {
	  name: 'MuiTooltip',
	  slot: 'Arrow',
	  overridesResolver: (props, styles) => styles.arrow
	})(({
	  theme
	}) => ({
	  overflow: 'hidden',
	  position: 'absolute',
	  width: '1em',
	  height: '0.71em' /* = width / sqrt(2) = (length of the hypotenuse) */,
	  boxSizing: 'border-box',
	  color: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.9),
	  '&::before': {
	    content: '""',
	    margin: 'auto',
	    display: 'block',
	    width: '100%',
	    height: '100%',
	    backgroundColor: 'currentColor',
	    transform: 'rotate(45deg)'
	  }
	}));
	let hystersisOpen = false;
	let hystersisTimer = null;
	function composeEventHandler(handler, eventHandler) {
	  return event => {
	    if (eventHandler) {
	      eventHandler(event);
	    }
	    handler(event);
	  };
	}

	// TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.
	const Tooltip = /*#__PURE__*/react.exports.forwardRef(function Tooltip(inProps, ref) {
	  var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTooltip'
	  });
	  const {
	      arrow = false,
	      children,
	      components = {},
	      componentsProps = {},
	      describeChild = false,
	      disableFocusListener = false,
	      disableHoverListener = false,
	      disableInteractive: disableInteractiveProp = false,
	      disableTouchListener = false,
	      enterDelay = 100,
	      enterNextDelay = 0,
	      enterTouchDelay = 700,
	      followCursor = false,
	      id: idProp,
	      leaveDelay = 0,
	      leaveTouchDelay = 1500,
	      onClose,
	      onOpen,
	      open: openProp,
	      placement = 'bottom',
	      PopperComponent: PopperComponentProp,
	      PopperProps = {},
	      slotProps = {},
	      slots = {},
	      title,
	      TransitionComponent: TransitionComponentProp = Grow$1,
	      TransitionProps
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$X);
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';
	  const [childNode, setChildNode] = react.exports.useState();
	  const [arrowRef, setArrowRef] = react.exports.useState(null);
	  const ignoreNonTouchEvents = react.exports.useRef(false);
	  const disableInteractive = disableInteractiveProp || followCursor;
	  const closeTimer = react.exports.useRef();
	  const enterTimer = react.exports.useRef();
	  const leaveTimer = react.exports.useRef();
	  const touchTimer = react.exports.useRef();
	  const [openState, setOpenState] = useControlled({
	    controlled: openProp,
	    default: false,
	    name: 'Tooltip',
	    state: 'open'
	  });
	  let open = openState;
	  const id = useId(idProp);
	  const prevUserSelect = react.exports.useRef();
	  const stopTouchInteraction = react.exports.useCallback(() => {
	    if (prevUserSelect.current !== undefined) {
	      document.body.style.WebkitUserSelect = prevUserSelect.current;
	      prevUserSelect.current = undefined;
	    }
	    clearTimeout(touchTimer.current);
	  }, []);
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(closeTimer.current);
	      clearTimeout(enterTimer.current);
	      clearTimeout(leaveTimer.current);
	      stopTouchInteraction();
	    };
	  }, [stopTouchInteraction]);
	  const handleOpen = event => {
	    clearTimeout(hystersisTimer);
	    hystersisOpen = true;

	    // The mouseover event will trigger for every nested element in the tooltip.
	    // We can skip rerendering when the tooltip is already open.
	    // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.
	    setOpenState(true);
	    if (onOpen && !open) {
	      onOpen(event);
	    }
	  };
	  const handleClose = useEventCallback(
	  /**
	   * @param {React.SyntheticEvent | Event} event
	   */
	  event => {
	    clearTimeout(hystersisTimer);
	    hystersisTimer = setTimeout(() => {
	      hystersisOpen = false;
	    }, 800 + leaveDelay);
	    setOpenState(false);
	    if (onClose && open) {
	      onClose(event);
	    }
	    clearTimeout(closeTimer.current);
	    closeTimer.current = setTimeout(() => {
	      ignoreNonTouchEvents.current = false;
	    }, theme.transitions.duration.shortest);
	  });
	  const handleEnter = event => {
	    if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
	      return;
	    }

	    // Remove the title ahead of time.
	    // We don't want to wait for the next render commit.
	    // We would risk displaying two tooltips at the same time (native + this one).
	    if (childNode) {
	      childNode.removeAttribute('title');
	    }
	    clearTimeout(enterTimer.current);
	    clearTimeout(leaveTimer.current);
	    if (enterDelay || hystersisOpen && enterNextDelay) {
	      enterTimer.current = setTimeout(() => {
	        handleOpen(event);
	      }, hystersisOpen ? enterNextDelay : enterDelay);
	    } else {
	      handleOpen(event);
	    }
	  };
	  const handleLeave = event => {
	    clearTimeout(enterTimer.current);
	    clearTimeout(leaveTimer.current);
	    leaveTimer.current = setTimeout(() => {
	      handleClose(event);
	    }, leaveDelay);
	  };
	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).
	  // We just need to re-render the Tooltip if the focus-visible state changes.
	  const [, setChildIsFocusVisible] = react.exports.useState(false);
	  const handleBlur = event => {
	    handleBlurVisible(event);
	    if (isFocusVisibleRef.current === false) {
	      setChildIsFocusVisible(false);
	      handleLeave(event);
	    }
	  };
	  const handleFocus = event => {
	    // Workaround for https://github.com/facebook/react/issues/7769
	    // The autoFocus of React might trigger the event before the componentDidMount.
	    // We need to account for this eventuality.
	    if (!childNode) {
	      setChildNode(event.currentTarget);
	    }
	    handleFocusVisible(event);
	    if (isFocusVisibleRef.current === true) {
	      setChildIsFocusVisible(true);
	      handleEnter(event);
	    }
	  };
	  const detectTouchStart = event => {
	    ignoreNonTouchEvents.current = true;
	    const childrenProps = children.props;
	    if (childrenProps.onTouchStart) {
	      childrenProps.onTouchStart(event);
	    }
	  };
	  const handleMouseOver = handleEnter;
	  const handleMouseLeave = handleLeave;
	  const handleTouchStart = event => {
	    detectTouchStart(event);
	    clearTimeout(leaveTimer.current);
	    clearTimeout(closeTimer.current);
	    stopTouchInteraction();
	    prevUserSelect.current = document.body.style.WebkitUserSelect;
	    // Prevent iOS text selection on long-tap.
	    document.body.style.WebkitUserSelect = 'none';
	    touchTimer.current = setTimeout(() => {
	      document.body.style.WebkitUserSelect = prevUserSelect.current;
	      handleEnter(event);
	    }, enterTouchDelay);
	  };
	  const handleTouchEnd = event => {
	    if (children.props.onTouchEnd) {
	      children.props.onTouchEnd(event);
	    }
	    stopTouchInteraction();
	    clearTimeout(leaveTimer.current);
	    leaveTimer.current = setTimeout(() => {
	      handleClose(event);
	    }, leaveTouchDelay);
	  };
	  react.exports.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }

	    /**
	     * @param {KeyboardEvent} nativeEvent
	     */
	    function handleKeyDown(nativeEvent) {
	      // IE11, Edge (prior to using Bink?) use 'Esc'
	      if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
	        handleClose(nativeEvent);
	      }
	    }
	    document.addEventListener('keydown', handleKeyDown);
	    return () => {
	      document.removeEventListener('keydown', handleKeyDown);
	    };
	  }, [handleClose, open]);
	  const handleRef = useForkRef(children.ref, focusVisibleRef, setChildNode, ref);

	  // There is no point in displaying an empty tooltip.
	  if (!title && title !== 0) {
	    open = false;
	  }
	  const positionRef = react.exports.useRef({
	    x: 0,
	    y: 0
	  });
	  const popperRef = react.exports.useRef();
	  const handleMouseMove = event => {
	    const childrenProps = children.props;
	    if (childrenProps.onMouseMove) {
	      childrenProps.onMouseMove(event);
	    }
	    positionRef.current = {
	      x: event.clientX,
	      y: event.clientY
	    };
	    if (popperRef.current) {
	      popperRef.current.update();
	    }
	  };
	  const nameOrDescProps = {};
	  const titleIsString = typeof title === 'string';
	  if (describeChild) {
	    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
	    nameOrDescProps['aria-describedby'] = open ? id : null;
	  } else {
	    nameOrDescProps['aria-label'] = titleIsString ? title : null;
	    nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;
	  }
	  const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
	    className: clsx(other.className, children.props.className),
	    onTouchStart: detectTouchStart,
	    ref: handleRef
	  }, followCursor ? {
	    onMouseMove: handleMouseMove
	  } : {});
	  const interactiveWrapperListeners = {};
	  if (!disableTouchListener) {
	    childrenProps.onTouchStart = handleTouchStart;
	    childrenProps.onTouchEnd = handleTouchEnd;
	  }
	  if (!disableHoverListener) {
	    childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
	    childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
	    if (!disableInteractive) {
	      interactiveWrapperListeners.onMouseOver = handleMouseOver;
	      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
	    }
	  }
	  if (!disableFocusListener) {
	    childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
	    childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
	    if (!disableInteractive) {
	      interactiveWrapperListeners.onFocus = handleFocus;
	      interactiveWrapperListeners.onBlur = handleBlur;
	    }
	  }
	  const popperOptions = react.exports.useMemo(() => {
	    var _PopperProps$popperOp;
	    let tooltipModifiers = [{
	      name: 'arrow',
	      enabled: Boolean(arrowRef),
	      options: {
	        element: arrowRef,
	        padding: 4
	      }
	    }];
	    if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
	      tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
	    }
	    return _extends({}, PopperProps.popperOptions, {
	      modifiers: tooltipModifiers
	    });
	  }, [arrowRef, PopperProps]);
	  const ownerState = _extends({}, props, {
	    isRtl,
	    arrow,
	    disableInteractive,
	    placement,
	    PopperComponentProp,
	    touch: ignoreNonTouchEvents.current
	  });
	  const classes = useUtilityClasses$G(ownerState);
	  const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
	  const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : Grow$1;
	  const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
	  const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
	  const popperProps = appendOwnerState(PopperComponent, _extends({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
	    className: clsx(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
	  }), ownerState);
	  const transitionProps = appendOwnerState(TransitionComponent, _extends({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
	  const tooltipProps = appendOwnerState(TooltipComponent, _extends({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
	    className: clsx(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
	  }), ownerState);
	  const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
	    className: clsx(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
	  }), ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/react.exports.cloneElement(children, childrenProps), /*#__PURE__*/jsxRuntime.exports.jsx(PopperComponent, _extends({
	      as: PopperComponentProp != null ? PopperComponentProp : MUIPopper,
	      placement: placement,
	      anchorEl: followCursor ? {
	        getBoundingClientRect: () => ({
	          top: positionRef.current.y,
	          left: positionRef.current.x,
	          right: positionRef.current.x,
	          bottom: positionRef.current.y,
	          width: 0,
	          height: 0
	        })
	      } : childNode,
	      popperRef: popperRef,
	      open: childNode ? open : false,
	      id: id,
	      transition: true
	    }, interactiveWrapperListeners, popperProps, {
	      popperOptions: popperOptions,
	      children: ({
	        TransitionProps: TransitionPropsInner
	      }) => /*#__PURE__*/jsxRuntime.exports.jsx(TransitionComponent, _extends({
	        timeout: theme.transitions.duration.shorter
	      }, TransitionPropsInner, transitionProps, {
	        "data-foo": "bar",
	        children: /*#__PURE__*/jsxRuntime.exports.jsxs(TooltipComponent, _extends({}, tooltipProps, {
	          children: [title, arrow ? /*#__PURE__*/jsxRuntime.exports.jsx(ArrowComponent, _extends({}, tooltipArrowProps, {
	            ref: setArrowRef
	          })) : null]
	        }))
	      }))
	    }))]
	  });
	});
	var MUITooltip = Tooltip;

	function getSwitchUtilityClass(slot) {
	  return generateUtilityClass('MuiSwitch', slot);
	}
	const switchClasses = generateUtilityClasses('MuiSwitch', ['root', 'edgeStart', 'edgeEnd', 'switchBase', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium', 'checked', 'disabled', 'input', 'thumb', 'track']);
	var switchClasses$1 = switchClasses;

	const _excluded$W = ["className", "color", "edge", "size", "sx"];
	const useUtilityClasses$F = ownerState => {
	  const {
	    classes,
	    edge,
	    size,
	    color,
	    checked,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],
	    switchBase: ['switchBase', `color${capitalize(color)}`, checked && 'checked', disabled && 'disabled'],
	    thumb: ['thumb'],
	    track: ['track'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const SwitchRoot = styled$1('span', {
	  name: 'MuiSwitch',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  width: 34 + 12 * 2,
	  height: 14 + 12 * 2,
	  overflow: 'hidden',
	  padding: 12,
	  boxSizing: 'border-box',
	  position: 'relative',
	  flexShrink: 0,
	  zIndex: 0,
	  // Reset the stacking context.
	  verticalAlign: 'middle',
	  // For correct alignment with the text.
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: -8
	}, ownerState.edge === 'end' && {
	  marginRight: -8
	}, ownerState.size === 'small' && {
	  width: 40,
	  height: 24,
	  padding: 7,
	  [`& .${switchClasses$1.thumb}`]: {
	    width: 16,
	    height: 16
	  },
	  [`& .${switchClasses$1.switchBase}`]: {
	    padding: 4,
	    [`&.${switchClasses$1.checked}`]: {
	      transform: 'translateX(16px)'
	    }
	  }
	}));
	const SwitchSwitchBase = styled$1(SwitchBase$1, {
	  name: 'MuiSwitch',
	  slot: 'SwitchBase',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.switchBase, {
	      [`& .${switchClasses$1.input}`]: styles.input
	    }, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme
	}) => ({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  zIndex: 1,
	  // Render above the focus ripple.
	  color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300]}`,
	  transition: theme.transitions.create(['left', 'transform'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${switchClasses$1.checked}`]: {
	    transform: 'translateX(20px)'
	  },
	  [`&.${switchClasses$1.disabled}`]: {
	    color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]}`
	  },
	  [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
	    opacity: 0.5
	  },
	  [`&.${switchClasses$1.disabled} + .${switchClasses$1.track}`]: {
	    opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === 'light' ? 0.12 : 0.2}`
	  },
	  [`& .${switchClasses$1.input}`]: {
	    left: '-100%',
	    width: '300%'
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends({
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${switchClasses$1.checked}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main,
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    [`&.${switchClasses$1.disabled}`]: {
	      color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)}`
	    }
	  },
	  [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	  }
	}));
	const SwitchTrack = styled$1('span', {
	  name: 'MuiSwitch',
	  slot: 'Track',
	  overridesResolver: (props, styles) => styles.track
	})(({
	  theme
	}) => ({
	  height: '100%',
	  width: '100%',
	  borderRadius: 14 / 2,
	  zIndex: -1,
	  transition: theme.transitions.create(['opacity', 'background-color'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white}`,
	  opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === 'light' ? 0.38 : 0.3}`
	}));
	const SwitchThumb = styled$1('span', {
	  name: 'MuiSwitch',
	  slot: 'Thumb',
	  overridesResolver: (props, styles) => styles.thumb
	})(({
	  theme
	}) => ({
	  boxShadow: (theme.vars || theme).shadows[1],
	  backgroundColor: 'currentColor',
	  width: 20,
	  height: 20,
	  borderRadius: '50%'
	}));
	const Switch = /*#__PURE__*/react.exports.forwardRef(function Switch(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSwitch'
	  });
	  const {
	      className,
	      color = 'primary',
	      edge = false,
	      size = 'medium',
	      sx
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$W);
	  const ownerState = _extends({}, props, {
	    color,
	    edge,
	    size
	  });
	  const classes = useUtilityClasses$F(ownerState);
	  const icon = /*#__PURE__*/jsxRuntime.exports.jsx(SwitchThumb, {
	    className: classes.thumb,
	    ownerState: ownerState
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(SwitchRoot, {
	    className: clsx(classes.root, className),
	    sx: sx,
	    ownerState: ownerState,
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(SwitchSwitchBase, _extends({
	      type: "checkbox",
	      icon: icon,
	      checkedIcon: icon,
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      classes: _extends({}, classes, {
	        root: classes.switchBase
	      })
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(SwitchTrack, {
	      className: classes.track,
	      ownerState: ownerState
	    })]
	  });
	});
	var MUISwitch = Switch;

	/**
	 * @ignore - internal component.
	 */
	const TableContext = /*#__PURE__*/react.exports.createContext();
	var TableContext$1 = TableContext;

	/**
	 * @ignore - internal component.
	 */
	const Tablelvl2Context = /*#__PURE__*/react.exports.createContext();
	var Tablelvl2Context$1 = Tablelvl2Context;

	function getTableCellUtilityClass(slot) {
	  return generateUtilityClass('MuiTableCell', slot);
	}
	const tableCellClasses = generateUtilityClasses('MuiTableCell', ['root', 'head', 'body', 'footer', 'sizeSmall', 'sizeMedium', 'paddingCheckbox', 'paddingNone', 'alignLeft', 'alignCenter', 'alignRight', 'alignJustify', 'stickyHeader']);
	var tableCellClasses$1 = tableCellClasses;

	const _excluded$V = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];
	const useUtilityClasses$E = ownerState => {
	  const {
	    classes,
	    variant,
	    align,
	    padding,
	    size,
	    stickyHeader
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, stickyHeader && 'stickyHeader', align !== 'inherit' && `align${capitalize(align)}`, padding !== 'normal' && `padding${capitalize(padding)}`, `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getTableCellUtilityClass, classes);
	};
	const TableCellRoot = styled$1('td', {
	  name: 'MuiTableCell',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.padding !== 'normal' && styles[`padding${capitalize(ownerState.padding)}`], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.stickyHeader && styles.stickyHeader];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body2, {
	  display: 'table-cell',
	  verticalAlign: 'inherit',
	  // Workaround for a rendering bug with spanned columns in Chrome 62.0.
	  // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
	  borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)}`,
	  textAlign: 'left',
	  padding: 16
	}, ownerState.variant === 'head' && {
	  color: (theme.vars || theme).palette.text.primary,
	  lineHeight: theme.typography.pxToRem(24),
	  fontWeight: theme.typography.fontWeightMedium
	}, ownerState.variant === 'body' && {
	  color: (theme.vars || theme).palette.text.primary
	}, ownerState.variant === 'footer' && {
	  color: (theme.vars || theme).palette.text.secondary,
	  lineHeight: theme.typography.pxToRem(21),
	  fontSize: theme.typography.pxToRem(12)
	}, ownerState.size === 'small' && {
	  padding: '6px 16px',
	  [`&.${tableCellClasses$1.paddingCheckbox}`]: {
	    width: 24,
	    // prevent the checkbox column from growing
	    padding: '0 12px 0 16px',
	    '& > *': {
	      padding: 0
	    }
	  }
	}, ownerState.padding === 'checkbox' && {
	  width: 48,
	  // prevent the checkbox column from growing
	  padding: '0 0 0 4px'
	}, ownerState.padding === 'none' && {
	  padding: 0
	}, ownerState.align === 'left' && {
	  textAlign: 'left'
	}, ownerState.align === 'center' && {
	  textAlign: 'center'
	}, ownerState.align === 'right' && {
	  textAlign: 'right',
	  flexDirection: 'row-reverse'
	}, ownerState.align === 'justify' && {
	  textAlign: 'justify'
	}, ownerState.stickyHeader && {
	  position: 'sticky',
	  top: 0,
	  zIndex: 2,
	  backgroundColor: (theme.vars || theme).palette.background.default
	}));

	/**
	 * The component renders a `<th>` element when the parent context is a header
	 * or otherwise a `<td>` element.
	 */
	const TableCell = /*#__PURE__*/react.exports.forwardRef(function TableCell(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableCell'
	  });
	  const {
	      align = 'inherit',
	      className,
	      component: componentProp,
	      padding: paddingProp,
	      scope: scopeProp,
	      size: sizeProp,
	      sortDirection,
	      variant: variantProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$V);
	  const table = react.exports.useContext(TableContext$1);
	  const tablelvl2 = react.exports.useContext(Tablelvl2Context$1);
	  const isHeadCell = tablelvl2 && tablelvl2.variant === 'head';
	  let component;
	  if (componentProp) {
	    component = componentProp;
	  } else {
	    component = isHeadCell ? 'th' : 'td';
	  }
	  let scope = scopeProp;
	  if (!scope && isHeadCell) {
	    scope = 'col';
	  }
	  const variant = variantProp || tablelvl2 && tablelvl2.variant;
	  const ownerState = _extends({}, props, {
	    align,
	    component,
	    padding: paddingProp || (table && table.padding ? table.padding : 'normal'),
	    size: sizeProp || (table && table.size ? table.size : 'medium'),
	    sortDirection,
	    stickyHeader: variant === 'head' && table && table.stickyHeader,
	    variant
	  });
	  const classes = useUtilityClasses$E(ownerState);
	  let ariaSort = null;
	  if (sortDirection) {
	    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
	  }
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TableCellRoot, _extends({
	    as: component,
	    ref: ref,
	    className: clsx(classes.root, className),
	    "aria-sort": ariaSort,
	    scope: scope,
	    ownerState: ownerState
	  }, other));
	});
	var TableCell$1 = TableCell;

	function getToolbarUtilityClass(slot) {
	  return generateUtilityClass('MuiToolbar', slot);
	}
	generateUtilityClasses('MuiToolbar', ['root', 'gutters', 'regular', 'dense']);

	const _excluded$U = ["className", "component", "disableGutters", "variant"];
	const useUtilityClasses$D = ownerState => {
	  const {
	    classes,
	    disableGutters,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableGutters && 'gutters', variant]
	  };
	  return composeClasses(slots, getToolbarUtilityClass, classes);
	};
	const ToolbarRoot = styled$1('div', {
	  name: 'MuiToolbar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableGutters && styles.gutters, styles[ownerState.variant]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'relative',
	  display: 'flex',
	  alignItems: 'center'
	}, !ownerState.disableGutters && {
	  paddingLeft: theme.spacing(2),
	  paddingRight: theme.spacing(2),
	  [theme.breakpoints.up('sm')]: {
	    paddingLeft: theme.spacing(3),
	    paddingRight: theme.spacing(3)
	  }
	}, ownerState.variant === 'dense' && {
	  minHeight: 48
	}), ({
	  theme,
	  ownerState
	}) => ownerState.variant === 'regular' && theme.mixins.toolbar);
	const Toolbar = /*#__PURE__*/react.exports.forwardRef(function Toolbar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiToolbar'
	  });
	  const {
	      className,
	      component = 'div',
	      disableGutters = false,
	      variant = 'regular'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$U);
	  const ownerState = _extends({}, props, {
	    component,
	    disableGutters,
	    variant
	  });
	  const classes = useUtilityClasses$D(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ToolbarRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	var Toolbar$1 = Toolbar;

	var KeyboardArrowLeft = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
	}), 'KeyboardArrowLeft');

	var KeyboardArrowRight = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
	}), 'KeyboardArrowRight');

	var _LastPageIcon, _FirstPageIcon, _KeyboardArrowRight, _KeyboardArrowLeft, _KeyboardArrowLeft2, _KeyboardArrowRight2, _FirstPageIcon2, _LastPageIcon2;
	const _excluded$T = ["backIconButtonProps", "count", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton"];
	const TablePaginationActions = /*#__PURE__*/react.exports.forwardRef(function TablePaginationActions(props, ref) {
	  const {
	      backIconButtonProps,
	      count,
	      getItemAriaLabel,
	      nextIconButtonProps,
	      onPageChange,
	      page,
	      rowsPerPage,
	      showFirstButton,
	      showLastButton
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$T);
	  const theme = useTheme();
	  const handleFirstPageButtonClick = event => {
	    onPageChange(event, 0);
	  };
	  const handleBackButtonClick = event => {
	    onPageChange(event, page - 1);
	  };
	  const handleNextButtonClick = event => {
	    onPageChange(event, page + 1);
	  };
	  const handleLastPageButtonClick = event => {
	    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsxs("div", _extends({
	    ref: ref
	  }, other, {
	    children: [showFirstButton && /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, {
	      onClick: handleFirstPageButtonClick,
	      disabled: page === 0,
	      "aria-label": getItemAriaLabel('first', page),
	      title: getItemAriaLabel('first', page),
	      children: theme.direction === 'rtl' ? _LastPageIcon || (_LastPageIcon = /*#__PURE__*/jsxRuntime.exports.jsx(LastPageIcon, {})) : _FirstPageIcon || (_FirstPageIcon = /*#__PURE__*/jsxRuntime.exports.jsx(FirstPageIcon, {}))
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, _extends({
	      onClick: handleBackButtonClick,
	      disabled: page === 0,
	      color: "inherit",
	      "aria-label": getItemAriaLabel('previous', page),
	      title: getItemAriaLabel('previous', page)
	    }, backIconButtonProps, {
	      children: theme.direction === 'rtl' ? _KeyboardArrowRight || (_KeyboardArrowRight = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowRight, {})) : _KeyboardArrowLeft || (_KeyboardArrowLeft = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowLeft, {}))
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, _extends({
	      onClick: handleNextButtonClick,
	      disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
	      color: "inherit",
	      "aria-label": getItemAriaLabel('next', page),
	      title: getItemAriaLabel('next', page)
	    }, nextIconButtonProps, {
	      children: theme.direction === 'rtl' ? _KeyboardArrowLeft2 || (_KeyboardArrowLeft2 = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowLeft, {})) : _KeyboardArrowRight2 || (_KeyboardArrowRight2 = /*#__PURE__*/jsxRuntime.exports.jsx(KeyboardArrowRight, {}))
	    })), showLastButton && /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, {
	      onClick: handleLastPageButtonClick,
	      disabled: page >= Math.ceil(count / rowsPerPage) - 1,
	      "aria-label": getItemAriaLabel('last', page),
	      title: getItemAriaLabel('last', page),
	      children: theme.direction === 'rtl' ? _FirstPageIcon2 || (_FirstPageIcon2 = /*#__PURE__*/jsxRuntime.exports.jsx(FirstPageIcon, {})) : _LastPageIcon2 || (_LastPageIcon2 = /*#__PURE__*/jsxRuntime.exports.jsx(LastPageIcon, {}))
	    })]
	  }));
	});
	var TablePaginationActions$1 = TablePaginationActions;

	function getTablePaginationUtilityClass(slot) {
	  return generateUtilityClass('MuiTablePagination', slot);
	}
	const tablePaginationClasses = generateUtilityClasses('MuiTablePagination', ['root', 'toolbar', 'spacer', 'selectLabel', 'selectRoot', 'select', 'selectIcon', 'input', 'menuItem', 'displayedRows', 'actions']);
	var tablePaginationClasses$1 = tablePaginationClasses;

	var _InputBase;
	const _excluded$S = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton"];
	const TablePaginationRoot = styled$1(TableCell$1, {
	  name: 'MuiTablePagination',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  overflow: 'auto',
	  color: (theme.vars || theme).palette.text.primary,
	  fontSize: theme.typography.pxToRem(14),
	  // Increase the specificity to override TableCell.
	  '&:last-child': {
	    padding: 0
	  }
	}));
	const TablePaginationToolbar = styled$1(Toolbar$1, {
	  name: 'MuiTablePagination',
	  slot: 'Toolbar',
	  overridesResolver: (props, styles) => _extends({
	    [`& .${tablePaginationClasses$1.actions}`]: styles.actions
	  }, styles.toolbar)
	})(({
	  theme
	}) => ({
	  minHeight: 52,
	  paddingRight: 2,
	  [`${theme.breakpoints.up('xs')} and (orientation: landscape)`]: {
	    minHeight: 52
	  },
	  [theme.breakpoints.up('sm')]: {
	    minHeight: 52,
	    paddingRight: 2
	  },
	  [`& .${tablePaginationClasses$1.actions}`]: {
	    flexShrink: 0,
	    marginLeft: 20
	  }
	}));
	const TablePaginationSpacer = styled$1('div', {
	  name: 'MuiTablePagination',
	  slot: 'Spacer',
	  overridesResolver: (props, styles) => styles.spacer
	})({
	  flex: '1 1 100%'
	});
	const TablePaginationSelectLabel = styled$1('p', {
	  name: 'MuiTablePagination',
	  slot: 'SelectLabel',
	  overridesResolver: (props, styles) => styles.selectLabel
	})(({
	  theme
	}) => _extends({}, theme.typography.body2, {
	  flexShrink: 0
	}));
	const TablePaginationSelect = styled$1(MUISelect, {
	  name: 'MuiTablePagination',
	  slot: 'Select',
	  overridesResolver: (props, styles) => _extends({
	    [`& .${tablePaginationClasses$1.selectIcon}`]: styles.selectIcon,
	    [`& .${tablePaginationClasses$1.select}`]: styles.select
	  }, styles.input, styles.selectRoot)
	})({
	  color: 'inherit',
	  fontSize: 'inherit',
	  flexShrink: 0,
	  marginRight: 32,
	  marginLeft: 8,
	  [`& .${tablePaginationClasses$1.select}`]: {
	    paddingLeft: 8,
	    paddingRight: 24,
	    textAlign: 'right',
	    textAlignLast: 'right' // Align <select> on Chrome.
	  }
	});

	const TablePaginationMenuItem = styled$1(MenuItem$1, {
	  name: 'MuiTablePagination',
	  slot: 'MenuItem',
	  overridesResolver: (props, styles) => styles.menuItem
	})({});
	const TablePaginationDisplayedRows = styled$1('p', {
	  name: 'MuiTablePagination',
	  slot: 'DisplayedRows',
	  overridesResolver: (props, styles) => styles.displayedRows
	})(({
	  theme
	}) => _extends({}, theme.typography.body2, {
	  flexShrink: 0
	}));
	function defaultLabelDisplayedRows({
	  from,
	  to,
	  count
	}) {
	  return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
	}
	function defaultGetAriaLabel(type) {
	  return `Go to ${type} page`;
	}
	const useUtilityClasses$C = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    toolbar: ['toolbar'],
	    spacer: ['spacer'],
	    selectLabel: ['selectLabel'],
	    select: ['select'],
	    input: ['input'],
	    selectIcon: ['selectIcon'],
	    menuItem: ['menuItem'],
	    displayedRows: ['displayedRows'],
	    actions: ['actions']
	  };
	  return composeClasses(slots, getTablePaginationUtilityClass, classes);
	};

	/**
	 * A `TableCell` based component for placing inside `TableFooter` for pagination.
	 */
	const TablePagination = /*#__PURE__*/react.exports.forwardRef(function TablePagination(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTablePagination'
	  });
	  const {
	      ActionsComponent = TablePaginationActions$1,
	      backIconButtonProps,
	      className,
	      colSpan: colSpanProp,
	      component = TableCell$1,
	      count,
	      getItemAriaLabel = defaultGetAriaLabel,
	      labelDisplayedRows = defaultLabelDisplayedRows,
	      labelRowsPerPage = 'Rows per page:',
	      nextIconButtonProps,
	      onPageChange,
	      onRowsPerPageChange,
	      page,
	      rowsPerPage,
	      rowsPerPageOptions = [10, 25, 50, 100],
	      SelectProps = {},
	      showFirstButton = false,
	      showLastButton = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$S);
	  const ownerState = props;
	  const classes = useUtilityClasses$C(ownerState);
	  const MenuItemComponent = SelectProps.native ? 'option' : TablePaginationMenuItem;
	  let colSpan;
	  if (component === TableCell$1 || component === 'td') {
	    colSpan = colSpanProp || 1000; // col-span over everything
	  }

	  const selectId = useId(SelectProps.id);
	  const labelId = useId(SelectProps.labelId);
	  const getLabelDisplayedRowsTo = () => {
	    if (count === -1) {
	      return (page + 1) * rowsPerPage;
	    }
	    return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationRoot, _extends({
	    colSpan: colSpan,
	    ref: ref,
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className)
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsxs(TablePaginationToolbar, {
	      className: classes.toolbar,
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationSpacer, {
	        className: classes.spacer
	      }), rowsPerPageOptions.length > 1 && /*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationSelectLabel, {
	        className: classes.selectLabel,
	        id: labelId,
	        children: labelRowsPerPage
	      }), rowsPerPageOptions.length > 1 && /*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationSelect, _extends({
	        variant: "standard"
	      }, !SelectProps.variant && {
	        input: _InputBase || (_InputBase = /*#__PURE__*/jsxRuntime.exports.jsx(InputBase$1, {}))
	      }, {
	        value: rowsPerPage,
	        onChange: onRowsPerPageChange,
	        id: selectId,
	        labelId: labelId
	      }, SelectProps, {
	        classes: _extends({}, SelectProps.classes, {
	          // TODO v5 remove `classes.input`
	          root: clsx(classes.input, classes.selectRoot, (SelectProps.classes || {}).root),
	          select: clsx(classes.select, (SelectProps.classes || {}).select),
	          // TODO v5 remove `selectIcon`
	          icon: clsx(classes.selectIcon, (SelectProps.classes || {}).icon)
	        }),
	        children: rowsPerPageOptions.map(rowsPerPageOption => /*#__PURE__*/react.exports.createElement(MenuItemComponent, _extends({}, !isHostComponent(MenuItemComponent) && {
	          ownerState
	        }, {
	          className: classes.menuItem,
	          key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
	          value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
	        }), rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
	      })), /*#__PURE__*/jsxRuntime.exports.jsx(TablePaginationDisplayedRows, {
	        className: classes.displayedRows,
	        children: labelDisplayedRows({
	          from: count === 0 ? 0 : page * rowsPerPage + 1,
	          to: getLabelDisplayedRowsTo(),
	          count: count === -1 ? -1 : count,
	          page
	        })
	      }), /*#__PURE__*/jsxRuntime.exports.jsx(ActionsComponent, {
	        className: classes.actions,
	        backIconButtonProps: backIconButtonProps,
	        count: count,
	        nextIconButtonProps: nextIconButtonProps,
	        onPageChange: onPageChange,
	        page: page,
	        rowsPerPage: rowsPerPage,
	        showFirstButton: showFirstButton,
	        showLastButton: showLastButton,
	        getItemAriaLabel: getItemAriaLabel
	      })]
	    })
	  }));
	});
	var TablePagination$1 = TablePagination;

	function getTextFieldUtilityClass(slot) {
	  return generateUtilityClass('MuiTextField', slot);
	}
	generateUtilityClasses('MuiTextField', ['root']);

	const _excluded$R = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
	const variantComponent = {
	  standard: Input$1,
	  filled: FilledInput$1,
	  outlined: OutlinedInput$1
	};
	const useUtilityClasses$B = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getTextFieldUtilityClass, classes);
	};
	const TextFieldRoot = styled$1(MUIFormControl, {
	  name: 'MuiTextField',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});

	/**
	 * The `TextField` is a convenience wrapper for the most common cases (80%).
	 * It cannot be all things to all people, otherwise the API would grow out of control.
	 *
	 * ## Advanced Configuration
	 *
	 * It's important to understand that the text field is a simple abstraction
	 * on top of the following components:
	 *
	 * - [FormControl](/material-ui/api/form-control/)
	 * - [InputLabel](/material-ui/api/input-label/)
	 * - [FilledInput](/material-ui/api/filled-input/)
	 * - [OutlinedInput](/material-ui/api/outlined-input/)
	 * - [Input](/material-ui/api/input/)
	 * - [FormHelperText](/material-ui/api/form-helper-text/)
	 *
	 * If you wish to alter the props applied to the `input` element, you can do so as follows:
	 *
	 * ```jsx
	 * const inputProps = {
	 *   step: 300,
	 * };
	 *
	 * return <TextField id="time" type="time" inputProps={inputProps} />;
	 * ```
	 *
	 * For advanced cases, please look at the source of TextField by clicking on the
	 * "Edit this page" button above. Consider either:
	 *
	 * - using the upper case props for passing values directly to the components
	 * - using the underlying components directly as shown in the demos
	 */
	const TextField = /*#__PURE__*/react.exports.forwardRef(function TextField(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTextField'
	  });
	  const {
	      autoComplete,
	      autoFocus = false,
	      children,
	      className,
	      color = 'primary',
	      defaultValue,
	      disabled = false,
	      error = false,
	      FormHelperTextProps,
	      fullWidth = false,
	      helperText,
	      id: idOverride,
	      InputLabelProps,
	      inputProps,
	      InputProps,
	      inputRef,
	      label,
	      maxRows,
	      minRows,
	      multiline = false,
	      name,
	      onBlur,
	      onChange,
	      onFocus,
	      placeholder,
	      required = false,
	      rows,
	      select = false,
	      SelectProps,
	      type,
	      value,
	      variant = 'outlined'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$R);
	  const ownerState = _extends({}, props, {
	    autoFocus,
	    color,
	    disabled,
	    error,
	    fullWidth,
	    multiline,
	    required,
	    select,
	    variant
	  });
	  const classes = useUtilityClasses$B(ownerState);
	  const InputMore = {};
	  if (variant === 'outlined') {
	    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
	      InputMore.notched = InputLabelProps.shrink;
	    }
	    InputMore.label = label;
	  }
	  if (select) {
	    // unset defaults from textbox inputs
	    if (!SelectProps || !SelectProps.native) {
	      InputMore.id = undefined;
	    }
	    InputMore['aria-describedby'] = undefined;
	  }
	  const id = useId(idOverride);
	  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
	  const inputLabelId = label && id ? `${id}-label` : undefined;
	  const InputComponent = variantComponent[variant];
	  const InputElement = /*#__PURE__*/jsxRuntime.exports.jsx(InputComponent, _extends({
	    "aria-describedby": helperTextId,
	    autoComplete: autoComplete,
	    autoFocus: autoFocus,
	    defaultValue: defaultValue,
	    fullWidth: fullWidth,
	    multiline: multiline,
	    name: name,
	    rows: rows,
	    maxRows: maxRows,
	    minRows: minRows,
	    type: type,
	    value: value,
	    id: id,
	    inputRef: inputRef,
	    onBlur: onBlur,
	    onChange: onChange,
	    onFocus: onFocus,
	    placeholder: placeholder,
	    inputProps: inputProps
	  }, InputMore, InputProps));
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(TextFieldRoot, _extends({
	    className: clsx(classes.root, className),
	    disabled: disabled,
	    error: error,
	    fullWidth: fullWidth,
	    ref: ref,
	    required: required,
	    color: color,
	    variant: variant,
	    ownerState: ownerState
	  }, other, {
	    children: [label != null && label !== '' && /*#__PURE__*/jsxRuntime.exports.jsx(InputLabel$1, _extends({
	      htmlFor: id,
	      id: inputLabelId
	    }, InputLabelProps, {
	      children: label
	    })), select ? /*#__PURE__*/jsxRuntime.exports.jsx(MUISelect, _extends({
	      "aria-describedby": helperTextId,
	      id: id,
	      labelId: inputLabelId,
	      value: value,
	      input: InputElement
	    }, SelectProps, {
	      children: children
	    })) : InputElement, helperText && /*#__PURE__*/jsxRuntime.exports.jsx(FormHelperText$1, _extends({
	      id: helperTextId
	    }, FormHelperTextProps, {
	      children: helperText
	    }))]
	  }));
	});
	var MUITextField = TextField;

	function getDataGridUtilityClass(slot) {
	  return generateUtilityClass('MuiDataGrid', slot);
	}
	const gridClasses = generateUtilityClasses('MuiDataGrid', ['actionsCell', 'aggregationColumnHeader', 'aggregationColumnHeader--alignLeft', 'aggregationColumnHeader--alignCenter', 'aggregationColumnHeader--alignRight', 'autoHeight', 'booleanCell', 'cell--editable', 'cell--editing', 'cell--textCenter', 'cell--textLeft', 'cell--textRight', 'cell--withRenderer', 'cell', 'cellContent', 'cellCheckbox', 'cellSkeleton', 'checkboxInput', 'columnHeader--alignCenter', 'columnHeader--alignLeft', 'columnHeader--alignRight', 'columnHeader--dragging', 'columnHeader--moving', 'columnHeader--numeric', 'columnHeader--sortable', 'columnHeader--sorted', 'columnHeader--filtered', 'columnHeader', 'columnHeaderCheckbox', 'columnHeaderDraggableContainer', 'columnHeaderDropZone', 'columnHeaderTitle', 'columnHeaderTitleContainer', 'columnHeaderTitleContainerContent', 'columnGroupHeader', 'columnHeader--filledGroup', 'columnHeader--emptyGroup', 'columnHeader--showColumnBorder', 'columnHeaders', 'columnHeadersInner', 'columnHeadersInner--scrollable', 'columnSeparator--resizable', 'columnSeparator--resizing', 'columnSeparator--sideLeft', 'columnSeparator--sideRight', 'columnSeparator', 'columnsPanel', 'columnsPanelRow', 'detailPanel', 'detailPanels', 'detailPanelToggleCell', 'detailPanelToggleCell--expanded', 'footerCell', 'panel', 'panelHeader', 'panelWrapper', 'panelContent', 'panelFooter', 'paper', 'editBooleanCell', 'editInputCell', 'filterForm', 'filterFormDeleteIcon', 'filterFormLinkOperatorInput', 'filterFormColumnInput', 'filterFormOperatorInput', 'filterFormValueInput', 'filterIcon', 'footerContainer', 'iconButtonContainer', 'iconSeparator', 'main', 'menu', 'menuIcon', 'menuIconButton', 'menuOpen', 'menuList', 'overlay', 'root', 'root--densityStandard', 'root--densityComfortable', 'root--densityCompact', 'row', 'row--editable', 'row--editing', 'row--lastVisible', 'row--dragging', 'row--dynamicHeight', 'row--detailPanelExpanded', 'rowReorderCellPlaceholder', 'rowCount', 'rowReorderCellContainer', 'rowReorderCell', 'rowReorderCell--draggable', 'scrollArea--left', 'scrollArea--right', 'scrollArea', 'selectedRowCount', 'sortIcon', 'toolbarContainer', 'toolbarFilterList', 'virtualScroller', 'virtualScrollerContent', 'virtualScrollerContent--overflowed', 'virtualScrollerRenderZone', 'pinnedColumns', 'pinnedColumns--left', 'pinnedColumns--right', 'pinnedColumnHeaders', 'pinnedColumnHeaders--left', 'pinnedColumnHeaders--right', 'withBorder', 'treeDataGroupingCell', 'treeDataGroupingCellToggle', 'groupingCriteriaCell', 'groupingCriteriaCellToggle', 'pinnedRows', 'pinnedRows--top', 'pinnedRows--bottom', 'pinnedRowsRenderZone']);

	const useUtilityClasses$A = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['main']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridMainContainerRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'Main',
	  overridesResolver: (props, styles) => styles.main
	})(() => ({
	  position: 'relative',
	  flexGrow: 1,
	  display: 'flex',
	  flexDirection: 'column',
	  overflow: 'hidden'
	}));
	function GridMainContainer(props) {
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$A(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridMainContainerRoot, {
	    className: classes.root,
	    children: props.children
	  });
	}

	/**
	 * Detect Element Resize.
	 * https://github.com/sdecima/javascript-detect-element-resize
	 * Sebastian Decima
	 *
	 * Forked from version 0.5.3; includes the following modifications:
	 * 1) Guard against unsafe 'window' and 'document' references (to support SSR).
	 * 2) Defer initialization code via a top-level function wrapper (to support SSR).
	 * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.
	 * 4) Add nonce for style element.
	 *
	 * TODO replace with https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver
	 * once browser support allows it.
	 **/
	function createDetectElementResize(nonce, hostWindow) {
	  var resetTriggers = function resetTriggers(element) {
	    var triggers = element.__resizeTriggers__,
	        expand = triggers.firstElementChild,
	        contract = triggers.lastElementChild,
	        expandChild = expand.firstElementChild;
	    contract.scrollLeft = contract.scrollWidth;
	    contract.scrollTop = contract.scrollHeight;
	    expandChild.style.width = expand.offsetWidth + 1 + 'px';
	    expandChild.style.height = expand.offsetHeight + 1 + 'px';
	    expand.scrollLeft = expand.scrollWidth;
	    expand.scrollTop = expand.scrollHeight;
	  };

	  var checkTriggers = function checkTriggers(element) {
	    return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;
	  };

	  var scrollListener = function scrollListener(e) {
	    // Don't measure (which forces) reflow for scrolls that happen inside of children!
	    if (e.target.className.indexOf('contract-trigger') < 0 && e.target.className.indexOf('expand-trigger') < 0) {
	      return;
	    }

	    var element = this;
	    resetTriggers(this);

	    if (this.__resizeRAF__) {
	      hostWindow.cancelAnimationFrame(this.__resizeRAF__);
	    }

	    this.__resizeRAF__ = hostWindow.requestAnimationFrame(function () {
	      if (checkTriggers(element)) {
	        element.__resizeLast__.width = element.offsetWidth;
	        element.__resizeLast__.height = element.offsetHeight;

	        element.__resizeListeners__.forEach(function (fn) {
	          fn.call(element, e);
	        });
	      }
	    });
	  };
	  /* Detect CSS Animations support to detect element display/re-attach */


	  var animation = false,
	      keyframeprefix = '',
	      animationstartevent = 'animationstart',
	      domPrefixes = 'Webkit Moz O ms'.split(' '),
	      startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),
	      pfx = '';
	  {
	    var elm = document.createElement('fakeelement');

	    if (elm.style.animationName !== undefined) {
	      animation = true;
	    }

	    if (animation === false) {
	      for (var i = 0; i < domPrefixes.length; i++) {
	        if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
	          pfx = domPrefixes[i];
	          keyframeprefix = '-' + pfx.toLowerCase() + '-';
	          animationstartevent = startEvents[i];
	          animation = true;
	          break;
	        }
	      }
	    }
	  }
	  var animationName = 'resizeanim';
	  var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';
	  var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';

	  var createStyles = function createStyles(doc) {
	    if (!doc.getElementById('muiDetectElementResize')) {
	      //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360
	      var css = (animationKeyframes ? animationKeyframes : '') + '.Mui-resizeTriggers { ' + (animationStyle ? animationStyle : '') + 'visibility: hidden; opacity: 0; } ' + '.Mui-resizeTriggers, .Mui-resizeTriggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .Mui-resizeTriggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
	          head = doc.head || doc.getElementsByTagName('head')[0],
	          style = doc.createElement('style');
	      style.id = 'muiDetectElementResize';
	      style.type = 'text/css';

	      if (nonce != null) {
	        style.setAttribute('nonce', nonce);
	      }

	      if (style.styleSheet) {
	        style.styleSheet.cssText = css;
	      } else {
	        style.appendChild(doc.createTextNode(css));
	      }

	      head.appendChild(style);
	    }
	  };

	  var addResizeListener = function addResizeListener(element, fn) {
	    if (!element.__resizeTriggers__) {
	      var doc = element.ownerDocument;
	      var elementStyle = hostWindow.getComputedStyle(element);

	      if (elementStyle && elementStyle.position == 'static') {
	        element.style.position = 'relative';
	      }

	      createStyles(doc);
	      element.__resizeLast__ = {};
	      element.__resizeListeners__ = [];
	      (element.__resizeTriggers__ = doc.createElement('div')).className = 'Mui-resizeTriggers';
	      element.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div>' + '<div class="contract-trigger"></div>';
	      element.appendChild(element.__resizeTriggers__);
	      resetTriggers(element);
	      element.addEventListener('scroll', scrollListener, true);
	      /* Listen for a css animation to detect element display/re-attach */

	      if (animationstartevent) {
	        element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
	          if (e.animationName == animationName) {
	            resetTriggers(element);
	          }
	        };

	        element.__resizeTriggers__.addEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
	      }
	    }

	    element.__resizeListeners__.push(fn);
	  };

	  var removeResizeListener = function removeResizeListener(element, fn) {
	    element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);

	    if (!element.__resizeListeners__.length) {
	      element.removeEventListener('scroll', scrollListener, true);

	      if (element.__resizeTriggers__.__animationListener__) {
	        element.__resizeTriggers__.removeEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);

	        element.__resizeTriggers__.__animationListener__ = null;
	      }

	      try {
	        element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
	      } catch (e) {// Preact compat; see developit/preact-compat/issues/228
	      }
	    }
	  };

	  return {
	    addResizeListener,
	    removeResizeListener
	  };
	}

	const _excluded$Q = ["children", "defaultHeight", "defaultWidth", "disableHeight", "disableWidth", "nonce", "onResize", "style"];
	const GridAutoSizer = /*#__PURE__*/react.exports.forwardRef(function AutoSizer(props, ref) {
	  const {
	    children,
	    defaultHeight = null,
	    defaultWidth = null,
	    disableHeight = false,
	    disableWidth = false,
	    nonce,
	    onResize,
	    style
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$Q);

	  const [state, setState] = react.exports.useState({
	    height: defaultHeight,
	    width: defaultWidth
	  });
	  const rootRef = react.exports.useRef(null);
	  const parentElement = react.exports.useRef(null);
	  const handleResize = useEventCallback(() => {
	    // Guard against AutoSizer component being removed from the DOM immediately after being added.
	    // This can result in invalid style values which can result in NaN values if we don't handle them.
	    // See issue #150 for more context.
	    if (parentElement.current) {
	      const height = parentElement.current.offsetHeight || 0;
	      const width = parentElement.current.offsetWidth || 0;
	      const win = ownerWindow(parentElement.current);
	      const computedStyle = win.getComputedStyle(parentElement.current);
	      const paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
	      const paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
	      const paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
	      const paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
	      const newHeight = height - paddingTop - paddingBottom;
	      const newWidth = width - paddingLeft - paddingRight;

	      if (!disableHeight && state.height !== newHeight || !disableWidth && state.width !== newWidth) {
	        setState({
	          height: newHeight,
	          width: newWidth
	        });

	        if (onResize) {
	          onResize({
	            height: newHeight,
	            width: newWidth
	          });
	        }
	      }
	    }
	  });
	  useEnhancedEffect$1(() => {
	    var _parentElement$curren;

	    parentElement.current = rootRef.current.parentElement;

	    if (!parentElement) {
	      return undefined;
	    }

	    const win = ownerWindow((_parentElement$curren = parentElement.current) != null ? _parentElement$curren : undefined);
	    const detectElementResize = createDetectElementResize(nonce, win);
	    detectElementResize.addResizeListener(parentElement.current, handleResize);
	    handleResize();
	    return () => {
	      detectElementResize.removeResizeListener(parentElement.current, handleResize);
	    };
	  }, [nonce, handleResize]); // Outer div should not force width/height since that may prevent containers from shrinking.
	  // Inner component should overflow and use calculated width/height.
	  // See issue #68 for more information.

	  const outerStyle = {
	    overflow: 'visible'
	  };
	  const childParams = {};

	  if (!disableHeight) {
	    outerStyle.height = 0;
	    childParams.height = state.height;
	  }

	  if (!disableWidth) {
	    outerStyle.width = 0;
	    childParams.width = state.width;
	  }

	  const handleRef = useForkRef(rootRef, ref);
	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", _extends({
	    ref: handleRef,
	    style: _extends({}, outerStyle, style)
	  }, other, {
	    children: state.height === null && state.width === null ? null : children(childParams)
	  }));
	});

	const buildWarning = (message, gravity = 'warning') => {
	  let alreadyWarned = false;
	  const cleanMessage = Array.isArray(message) ? message.join('\n') : message;
	  return () => {
	    if (!alreadyWarned) {
	      alreadyWarned = true;

	      if (gravity === 'error') {
	        console.error(cleanMessage);
	      } else {
	        console.warn(cleanMessage);
	      }
	    }
	  };
	};
	const wrapWithWarningOnCall = (method, message) => {
	  {
	    return method;
	  }
	};

	function isOutputSelector(selector) {
	  return selector.acceptsApiRef;
	}

	buildWarning(['MUI: `useGridSelector` has been called before the initialization of the state.', 'This hook can only be used inside the context of the grid.']);
	const useGridSelector = (apiRef, selector) => {

	  if (isOutputSelector(selector)) {
	    return selector(apiRef);
	  }

	  return selector(apiRef.current.state);
	};

	// Cache implementation based on Erik Rasmussen's `lru-memoize`:
	// https://github.com/erikras/lru-memoize
	var NOT_FOUND = 'NOT_FOUND';

	function createSingletonCache(equals) {
	  var entry;
	  return {
	    get: function get(key) {
	      if (entry && equals(entry.key, key)) {
	        return entry.value;
	      }

	      return NOT_FOUND;
	    },
	    put: function put(key, value) {
	      entry = {
	        key: key,
	        value: value
	      };
	    },
	    getEntries: function getEntries() {
	      return entry ? [entry] : [];
	    },
	    clear: function clear() {
	      entry = undefined;
	    }
	  };
	}

	function createLruCache(maxSize, equals) {
	  var entries = [];

	  function get(key) {
	    var cacheIndex = entries.findIndex(function (entry) {
	      return equals(key, entry.key);
	    }); // We found a cached entry

	    if (cacheIndex > -1) {
	      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top

	      if (cacheIndex > 0) {
	        entries.splice(cacheIndex, 1);
	        entries.unshift(entry);
	      }

	      return entry.value;
	    } // No entry found in cache, return sentinel


	    return NOT_FOUND;
	  }

	  function put(key, value) {
	    if (get(key) === NOT_FOUND) {
	      // TODO Is unshift slow?
	      entries.unshift({
	        key: key,
	        value: value
	      });

	      if (entries.length > maxSize) {
	        entries.pop();
	      }
	    }
	  }

	  function getEntries() {
	    return entries;
	  }

	  function clear() {
	    entries = [];
	  }

	  return {
	    get: get,
	    put: put,
	    getEntries: getEntries,
	    clear: clear
	  };
	}

	var defaultEqualityCheck = function defaultEqualityCheck(a, b) {
	  return a === b;
	};
	function createCacheKeyComparator(equalityCheck) {
	  return function areArgumentsShallowlyEqual(prev, next) {
	    if (prev === null || next === null || prev.length !== next.length) {
	      return false;
	    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.


	    var length = prev.length;

	    for (var i = 0; i < length; i++) {
	      if (!equalityCheck(prev[i], next[i])) {
	        return false;
	      }
	    }

	    return true;
	  };
	}
	// defaultMemoize now supports a configurable cache size with LRU behavior,
	// and optional comparison of the result value with existing values
	function defaultMemoize(func, equalityCheckOrOptions) {
	  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {
	    equalityCheck: equalityCheckOrOptions
	  };
	  var _providedOptions$equa = providedOptions.equalityCheck,
	      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,
	      _providedOptions$maxS = providedOptions.maxSize,
	      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,
	      resultEqualityCheck = providedOptions.resultEqualityCheck;
	  var comparator = createCacheKeyComparator(equalityCheck);
	  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons

	  function memoized() {
	    var value = cache.get(arguments);

	    if (value === NOT_FOUND) {
	      // @ts-ignore
	      value = func.apply(null, arguments);

	      if (resultEqualityCheck) {
	        var entries = cache.getEntries();
	        var matchingEntry = entries.find(function (entry) {
	          return resultEqualityCheck(entry.value, value);
	        });

	        if (matchingEntry) {
	          value = matchingEntry.value;
	        }
	      }

	      cache.put(arguments, value);
	    }

	    return value;
	  }

	  memoized.clearCache = function () {
	    return cache.clear();
	  };

	  return memoized;
	}

	function getDependencies(funcs) {
	  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;

	  if (!dependencies.every(function (dep) {
	    return typeof dep === 'function';
	  })) {
	    var dependencyTypes = dependencies.map(function (dep) {
	      return typeof dep === 'function' ? "function " + (dep.name || 'unnamed') + "()" : typeof dep;
	    }).join(', ');
	    throw new Error("createSelector expects all input-selectors to be functions, but received the following types: [" + dependencyTypes + "]");
	  }

	  return dependencies;
	}

	function createSelectorCreator(memoize) {
	  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    memoizeOptionsFromArgs[_key - 1] = arguments[_key];
	  }

	  var createSelector = function createSelector() {
	    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      funcs[_key2] = arguments[_key2];
	    }

	    var _recomputations = 0;

	    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.
	    // So, start by declaring the default value here.
	    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)


	    var directlyPassedOptions = {
	      memoizeOptions: undefined
	    }; // Normally, the result func or "output selector" is the last arg

	    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object

	    if (typeof resultFunc === 'object') {
	      directlyPassedOptions = resultFunc; // and pop the real result func off

	      resultFunc = funcs.pop();
	    }

	    if (typeof resultFunc !== 'function') {
	      throw new Error("createSelector expects an output function after the inputs, but received: [" + typeof resultFunc + "]");
	    } // Determine which set of options we're using. Prefer options passed directly,
	    // but fall back to options given to createSelectorCreator.


	    var _directlyPassedOption = directlyPassedOptions,
	        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,
	        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer
	    // is an array. In most libs I've looked at, it's an equality function or options object.
	    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full
	    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so
	    // we wrap it in an array so we can apply it.

	    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];
	    var dependencies = getDependencies(funcs);
	    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {
	      _recomputations++; // apply arguments instead of spreading for performance.

	      return resultFunc.apply(null, arguments);
	    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.

	    var selector = memoize(function dependenciesChecker() {
	      var params = [];
	      var length = dependencies.length;

	      for (var i = 0; i < length; i++) {
	        // apply arguments instead of spreading and mutate a local list of params for performance.
	        // @ts-ignore
	        params.push(dependencies[i].apply(null, arguments));
	      } // apply arguments instead of spreading for performance.


	      _lastResult = memoizedResultFunc.apply(null, params);
	      return _lastResult;
	    });
	    Object.assign(selector, {
	      resultFunc: resultFunc,
	      memoizedResultFunc: memoizedResultFunc,
	      dependencies: dependencies,
	      lastResult: function lastResult() {
	        return _lastResult;
	      },
	      recomputations: function recomputations() {
	        return _recomputations;
	      },
	      resetRecomputations: function resetRecomputations() {
	        return _recomputations = 0;
	      }
	    });
	    return selector;
	  }; // @ts-ignore


	  return createSelector;
	}
	var createSelector$1 = /* #__PURE__ */createSelectorCreator(defaultMemoize);

	const cacheContainer = {
	  cache: null
	};
	buildWarning(['MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.', 'To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g `mySelector(state, apiRef.current.instanceId)`.']);
	const createSelector = (...args) => {
	  if (cacheContainer.cache === null) {
	    cacheContainer.cache = {};
	  }

	  const selector = (...selectorArgs) => {
	    const [stateOrApiRef, instanceId] = selectorArgs;
	    const isApiRef = !!stateOrApiRef.current;
	    const cacheKey = isApiRef ? stateOrApiRef.current.instanceId : instanceId != null ? instanceId : 'default';
	    const state = isApiRef ? stateOrApiRef.current.state : stateOrApiRef;

	    if (cacheContainer.cache === null) {
	      cacheContainer.cache = {};
	    }

	    const {
	      cache
	    } = cacheContainer;

	    if (cache[cacheKey] && cache[cacheKey].get(args)) {
	      // We pass the cache key because the called selector might have as
	      // dependency another selector created with this `createSelector`.
	      return cache[cacheKey].get(args)(state, cacheKey);
	    }

	    const newSelector = createSelector$1(...args);

	    if (!cache[cacheKey]) {
	      cache[cacheKey] = new Map();
	    }

	    cache[cacheKey].set(args, newSelector);
	    return newSelector(state, cacheKey);
	  }; // We use this property to detect if the selector was created with createSelector
	  // or it's only a simple function the receives the state and returns part of it.


	  selector.acceptsApiRef = true;
	  return selector;
	}; // eslint-disable-next-line @typescript-eslint/naming-convention

	const unstable_resetCreateSelectorCache = cacheKey => {
	  if (typeof cacheKey !== 'undefined') {
	    if (cacheContainer.cache && cacheContainer.cache[cacheKey]) {
	      delete cacheContainer.cache[cacheKey];
	    }
	  } else {
	    cacheContainer.cache = null;
	  }
	};

	const gridRowsStateSelector = state => state.rows;
	const gridRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalRowCount);
	const gridRowsLoadingSelector = createSelector(gridRowsStateSelector, rows => rows.loading);
	const gridTopLevelRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalTopLevelRowCount);
	const gridRowsLookupSelector = createSelector(gridRowsStateSelector, rows => rows.idRowsLookup);
	const gridRowsIdToIdLookupSelector = createSelector(gridRowsStateSelector, rows => rows.idToIdLookup);
	const gridRowTreeSelector = createSelector(gridRowsStateSelector, rows => rows.tree);
	const gridRowGroupingNameSelector = createSelector(gridRowsStateSelector, rows => rows.groupingName);
	const gridRowTreeDepthSelector = createSelector(gridRowsStateSelector, rows => rows.treeDepth);
	const gridRowIdsSelector = createSelector(gridRowsStateSelector, rows => rows.ids);
	/**
	 * @ignore - do not document.
	 */

	const gridAdditionalRowGroupsSelector = createSelector(gridRowsStateSelector, rows => rows == null ? void 0 : rows.additionalRowGroups);
	/**
	 * @ignore - do not document.
	 */

	const gridPinnedRowsSelector = createSelector(gridAdditionalRowGroupsSelector, additionalRowGroups => additionalRowGroups == null ? void 0 : additionalRowGroups.pinnedRows);
	/**
	 * @ignore - do not document.
	 */

	const gridPinnedRowsCountSelector = createSelector(gridPinnedRowsSelector, pinnedRows => {
	  var _pinnedRows$top, _pinnedRows$bottom;

	  return ((pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.length) || 0) + ((pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.length) || 0);
	});

	/**
	 * @category Sorting
	 * @ignore - do not document.
	 */

	const gridSortingStateSelector = state => state.sorting;
	/**
	 * Get the id of the rows after the sorting process.
	 * @category Sorting
	 */

	const gridSortedRowIdsSelector = createSelector(gridSortingStateSelector, sortingState => sortingState.sortedRows);
	/**
	 * Get the id and the model of the rows after the sorting process.
	 * @category Sorting
	 */

	const gridSortedRowEntriesSelector = createSelector(gridSortedRowIdsSelector, gridRowsLookupSelector, (sortedIds, idRowsLookup) => sortedIds.map(id => ({
	  id,
	  model: idRowsLookup[id]
	})));
	/**
	 * Get the current sorting model.
	 * @category Sorting
	 */

	const gridSortModelSelector = createSelector(gridSortingStateSelector, sorting => sorting.sortModel);

	/**
	 * @category Sorting
	 * @ignore - do not document.
	 */
	const gridSortColumnLookupSelector = createSelector(gridSortModelSelector, sortModel => {
	  const result = sortModel.reduce((res, sortItem, index) => {
	    res[sortItem.field] = {
	      sortDirection: sortItem.sort,
	      sortIndex: sortModel.length > 1 ? index + 1 : undefined
	    };
	    return res;
	  }, {});
	  return result;
	});

	/**
	 * @category Columns
	 * @deprecated Use the selector returning exactly the value you are looking for.
	 * @ignore - do not document.
	 * TODO v6: Rename `gridColumnsStateSelector`
	 */

	const gridColumnsSelector = state => state.columns;
	/**
	 * Get the field of each column.
	 * @category Columns
	 */

	const gridColumnFieldsSelector = createSelector(gridColumnsSelector, columnsState => columnsState.all);
	/**
	 * Get the columns as a lookup (an object containing the field for keys and the definition for values).
	 * @category Columns
	 */

	const gridColumnLookupSelector = createSelector(gridColumnsSelector, columnsState => columnsState.lookup);
	/**
	 * Get the columns as an array.
	 * @category Columns
	 */

	const gridColumnDefinitionsSelector = createSelector(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));
	/**
	 * Get the column visibility model, containing the visibility status of each column.
	 * If a column is not registered in the model, it is visible.
	 * @category Visible Columns
	 */

	const gridColumnVisibilityModelSelector = createSelector(gridColumnsSelector, columnsState => columnsState.columnVisibilityModel);
	/**
	 * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).
	 * @category Visible Columns
	 */

	const gridVisibleColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));
	/**
	 * Get the field of each visible column.
	 * @category Visible Columns
	 */

	createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));
	/**
	 * Get the left position in pixel of each visible columns relative to the left of the first column.
	 * @category Visible Columns
	 */

	const gridColumnPositionsSelector = createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => {
	  const positions = [];
	  let currentPosition = 0;

	  for (let i = 0; i < visibleColumns.length; i += 1) {
	    positions.push(currentPosition);
	    currentPosition += visibleColumns[i].computedWidth;
	  }

	  return positions;
	});
	/**
	 * Get the summed width of all the visible columns.
	 * @category Visible Columns
	 */

	const gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {
	  const colCount = visibleColumns.length;

	  if (colCount === 0) {
	    return 0;
	  }

	  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;
	});
	/**
	 * Get the filterable columns as an array.
	 * @category Columns
	 */

	const gridFilterableColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));
	/**
	 * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).
	 * @category Columns
	 */

	const gridFilterableColumnLookupSelector = createSelector(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {
	  if (col.filterable) {
	    acc[col.field] = col;
	  }

	  return acc;
	}, {}));
	/**
	 * @category Columns
	 * @deprecated Use `gridColumnFieldsSelector` instead.
	 * @ignore - do not document.
	 */

	wrapWithWarningOnCall(gridColumnFieldsSelector);
	/**
	 * @category Columns
	 * @deprecated Use `gridColumnDefinitionsSelector` instead.
	 * @ignore - do not document.
	 */

	wrapWithWarningOnCall(gridColumnDefinitionsSelector);
	/**
	 * @category Visible Columns
	 * @deprecated Use `gridVisibleColumnDefinitionsSelector` instead.
	 * @ignore - do not document.
	 */

	wrapWithWarningOnCall(gridVisibleColumnDefinitionsSelector);
	/**
	 * @category Columns
	 * @deprecated Use `gridFilterableColumnDefinitionsSelector` instead.
	 * @ignore - do not document.
	 */

	wrapWithWarningOnCall(gridFilterableColumnDefinitionsSelector);
	/**
	 * @category Columns
	 * @deprecated Use `gridFilterableColumnLookupSelector` instead (not the same return format).
	 * @ignore - do not document.
	 */

	wrapWithWarningOnCall(createSelector(gridFilterableColumnDefinitionsSelector, columns => columns.map(col => col.field)));
	/**
	 * Get the amount of visible columns.
	 * @category Visible Columns
	 * @deprecated Use the length of the array returned by `gridVisibleColumnDefinitionsSelector` instead.
	 * @ignore - do not document.
	 */

	wrapWithWarningOnCall(createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.length));
	/**
	 * @category Visible Columns
	 * @deprecated Use `gridColumnsTotalWidthSelector` or `gridColumnPositionsSelector` instead.
	 * @ignore - do not document.
	 */

	const gridColumnsMetaSelector = wrapWithWarningOnCall(createSelector(gridColumnPositionsSelector, gridColumnsTotalWidthSelector, (positions, totalWidth) => ({
	  totalWidth,
	  positions
	})));

	/**
	 * @category Filtering
	 */

	const gridFilterStateSelector = state => state.filter;
	/**
	 * Get the current filter model.
	 * @category Filtering
	 */

	const gridFilterModelSelector = createSelector(gridFilterStateSelector, filterState => filterState.filterModel);
	/**
	 * Get the current quick filter values.
	 * @category Filtering
	 */

	createSelector(gridFilterModelSelector, filterModel => filterModel.quickFilterValues);
	/**
	 * @category Filtering
	 * @ignore - do not document.
	 */

	const gridVisibleRowsLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.visibleRowsLookup);
	/**
	 * @category Filtering
	 * @ignore - do not document.
	 */

	const gridFilteredRowsLookupSelector = createSelector(gridFilterStateSelector, filterState => filterState.filteredRowsLookup);
	/**
	 * @category Filtering
	 * @ignore - do not document.
	 */

	createSelector(gridFilterStateSelector, filterState => filterState.filteredDescendantCountLookup);
	/**
	 * Get the id and the model of the rows accessible after the filtering process.
	 * Does not contain the collapsed children.
	 * @category Filtering
	 */

	const gridVisibleSortedRowEntriesSelector = createSelector(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter(row => visibleRowsLookup[row.id] !== false));
	/**
	 * Get the id of the rows accessible after the filtering process.
	 * Does not contain the collapsed children.
	 * @category Filtering
	 */

	const gridVisibleSortedRowIdsSelector = createSelector(gridVisibleSortedRowEntriesSelector, visibleSortedRowEntries => visibleSortedRowEntries.map(row => row.id));
	/**
	 * Get the id and the model of the rows accessible after the filtering process.
	 * Contains the collapsed children.
	 * @category Filtering
	 */

	const gridFilteredSortedRowEntriesSelector = createSelector(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter(row => filteredRowsLookup[row.id] !== false));
	/**
	 * Get the id of the rows accessible after the filtering process.
	 * Contains the collapsed children.
	 * @category Filtering
	 */

	const gridFilteredSortedRowIdsSelector = createSelector(gridFilteredSortedRowEntriesSelector, filteredSortedRowEntries => filteredSortedRowEntries.map(row => row.id));
	/**
	 * Get the id and the model of the top level rows accessible after the filtering process.
	 * @category Filtering
	 */

	const gridVisibleSortedTopLevelRowEntriesSelector = createSelector(gridVisibleSortedRowEntriesSelector, gridRowTreeSelector, gridRowTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {
	  if (rowTreeDepth < 2) {
	    return visibleSortedRows;
	  }

	  return visibleSortedRows.filter(row => {
	    var _rowTree$row$id;

	    return ((_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth) === 0;
	  });
	});
	/**
	 * Get the amount of rows accessible after the filtering process.
	 * @category Filtering
	 */

	const gridVisibleRowCountSelector = createSelector(gridVisibleSortedRowEntriesSelector, visibleSortedRows => visibleSortedRows.length);
	/**
	 * Get the amount of top level rows accessible after the filtering process.
	 * @category Filtering
	 */

	const gridVisibleTopLevelRowCountSelector = createSelector(gridVisibleSortedTopLevelRowEntriesSelector, visibleSortedTopLevelRows => visibleSortedTopLevelRows.length);
	/**
	 * @category Filtering
	 * @ignore - do not document.
	 */

	const gridFilterActiveItemsSelector = createSelector(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => {
	  var _filterModel$items;

	  return (_filterModel$items = filterModel.items) == null ? void 0 : _filterModel$items.filter(item => {
	    var _column$filterOperato, _item$value;

	    if (!item.columnField) {
	      return false;
	    }

	    const column = columnLookup[item.columnField];

	    if (!(column != null && column.filterOperators) || (column == null ? void 0 : (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.length) === 0) {
	      return false;
	    }

	    const filterOperator = column.filterOperators.find(operator => operator.value === item.operatorValue);

	    if (!filterOperator) {
	      return false;
	    }

	    return !filterOperator.InputComponent || item.value != null && ((_item$value = item.value) == null ? void 0 : _item$value.toString()) !== '';
	  });
	});

	/**
	 * @category Filtering
	 * @ignore - do not document.
	 */
	const gridFilterActiveItemsLookupSelector = createSelector(gridFilterActiveItemsSelector, activeFilters => {
	  const result = activeFilters.reduce((res, filterItem) => {
	    if (!res[filterItem.columnField]) {
	      res[filterItem.columnField] = [filterItem];
	    } else {
	      res[filterItem.columnField].push(filterItem);
	    }

	    return res;
	  }, {});
	  return result;
	});

	const gridDensitySelector = state => state.density;
	const gridDensityValueSelector = createSelector(gridDensitySelector, density => density.value);
	const gridDensityRowHeightSelector = createSelector(gridDensitySelector, density => density.rowHeight);
	const gridDensityHeaderHeightSelector = createSelector(gridDensitySelector, density => density.headerHeight);
	const gridDensityHeaderGroupingMaxDepthSelector = createSelector(gridDensitySelector, density => density.headerGroupingMaxDepth);
	const gridDensityFactorSelector = createSelector(gridDensitySelector, density => density.factor);
	const gridDensityTotalHeaderHeightSelector = createSelector(gridDensitySelector, density => density.headerHeight * (1 + density.headerGroupingMaxDepth));

	function GridOverlayWrapper(props) {
	  var _viewportInnerSize$he, _viewportInnerSize$wi;

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);
	  const [viewportInnerSize, setViewportInnerSize] = react.exports.useState(() => {
	    var _apiRef$current$getRo, _apiRef$current$getRo2;

	    return (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize) != null ? _apiRef$current$getRo : null;
	  });
	  const handleViewportSizeChange = react.exports.useCallback(() => {
	    var _apiRef$current$getRo3, _apiRef$current$getRo4;

	    setViewportInnerSize((_apiRef$current$getRo3 = (_apiRef$current$getRo4 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo4.viewportInnerSize) != null ? _apiRef$current$getRo3 : null);
	  }, [apiRef]);
	  useEnhancedEffect$1(() => {
	    return apiRef.current.subscribeEvent('viewportInnerSizeChange', handleViewportSizeChange);
	  }, [apiRef, handleViewportSizeChange]);
	  let height = (_viewportInnerSize$he = viewportInnerSize == null ? void 0 : viewportInnerSize.height) != null ? _viewportInnerSize$he : 0;

	  if (rootProps.autoHeight && height === 0) {
	    height = 'auto';
	  }

	  if (!viewportInnerSize) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", _extends({
	    style: {
	      height,
	      width: (_viewportInnerSize$wi = viewportInnerSize == null ? void 0 : viewportInnerSize.width) != null ? _viewportInnerSize$wi : 0,
	      position: 'absolute',
	      top: totalHeaderHeight,
	      bottom: height === 'auto' ? 0 : undefined
	    }
	  }, props));
	}

	function GridOverlays() {
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);
	  const visibleRowCount = useGridSelector(apiRef, gridVisibleRowCountSelector);
	  const loading = useGridSelector(apiRef, gridRowsLoadingSelector);
	  const showNoRowsOverlay = !loading && totalRowCount === 0;
	  const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;
	  let overlay = null;

	  if (showNoRowsOverlay) {
	    var _rootProps$components;

	    overlay = /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.NoRowsOverlay, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.noRowsOverlay));
	  }

	  if (showNoResultsOverlay) {
	    var _rootProps$components2;

	    overlay = /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.NoResultsOverlay, _extends({}, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.noResultsOverlay));
	  }

	  if (loading) {
	    var _rootProps$components3;

	    overlay = /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.LoadingOverlay, _extends({}, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.loadingOverlay));
	  }

	  if (overlay === null) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridOverlayWrapper, {
	    children: overlay
	  });
	}

	function GridBody(props) {
	  const {
	    children,
	    VirtualScrollerComponent,
	    ColumnHeadersComponent
	  } = props;
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);
	  const [isVirtualizationDisabled, setIsVirtualizationDisabled] = react.exports.useState(rootProps.disableVirtualization);
	  const disableVirtualization = react.exports.useCallback(() => {
	    setIsVirtualizationDisabled(true);
	  }, []);
	  const enableVirtualization = react.exports.useCallback(() => {
	    setIsVirtualizationDisabled(false);
	  }, []);
	  react.exports.useEffect(() => {
	    setIsVirtualizationDisabled(rootProps.disableVirtualization);
	  }, [rootProps.disableVirtualization]); // The `useGridApiMethod` hook can't be used here, because it only installs the
	  // method if it doesn't exist yet. Once installed, it's never updated again.
	  // This break the methods above, since their closure comes from the first time
	  // they were installed. Which means that calling `setIsVirtualizationDisabled`
	  // will trigger a re-render, but it won't update the state. That can be solved
	  // by migrating the virtualization status to the global state.

	  apiRef.current.unstable_disableVirtualization = disableVirtualization;
	  apiRef.current.unstable_enableVirtualization = enableVirtualization;
	  const columnHeadersRef = react.exports.useRef(null);
	  const columnsContainerRef = react.exports.useRef(null);
	  const windowRef = react.exports.useRef(null);
	  const renderingZoneRef = react.exports.useRef(null);
	  apiRef.current.columnHeadersContainerElementRef = columnsContainerRef;
	  apiRef.current.columnHeadersElementRef = columnHeadersRef;
	  apiRef.current.windowRef = windowRef; // TODO rename, it's not attached to the window anymore

	  apiRef.current.renderingZoneRef = renderingZoneRef; // TODO remove, nobody should have access to internal parts of the virtualization

	  const handleResize = react.exports.useCallback(size => {
	    apiRef.current.publishEvent('resize', size);
	  }, [apiRef]);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(GridMainContainer, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(GridOverlays, {}), /*#__PURE__*/jsxRuntime.exports.jsx(ColumnHeadersComponent, {
	      ref: columnsContainerRef,
	      innerRef: columnHeadersRef
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(GridAutoSizer, {
	      nonce: rootProps.nonce,
	      disableHeight: rootProps.autoHeight,
	      onResize: handleResize,
	      children: size => {
	        const style = {
	          width: size.width,
	          // If `autoHeight` is on, there will be no height value.
	          // In this case, let the container to grow whatever it needs.
	          height: size.height ? size.height - totalHeaderHeight : 'auto',
	          marginTop: totalHeaderHeight
	        };
	        return /*#__PURE__*/jsxRuntime.exports.jsx(VirtualScrollerComponent, {
	          ref: windowRef,
	          style: style,
	          disableVirtualization: isVirtualizationDisabled
	        });
	      }
	    }), children]
	  });
	}

	function useGridLogger(apiRef, name) {
	  const logger = react.exports.useRef(null);

	  if (logger.current) {
	    return logger.current;
	  }

	  const newLogger = apiRef.current.getLogger(name);
	  logger.current = newLogger;
	  return newLogger;
	}

	class ErrorBoundary extends react.exports.Component {
	  static getDerivedStateFromError(error) {
	    // Update state so the next render will show the fallback UI.
	    return {
	      hasError: true,
	      error
	    };
	  }

	  componentDidCatch(error, errorInfo) {
	    if (this.props.api.current) {
	      this.logError(error); // Allows to trigger the Error event and all listener can run on Error

	      this.props.api.current.showError({
	        error,
	        errorInfo
	      });
	    }
	  }

	  logError(error, errorInfo) {
	    this.props.logger.error(`An unexpected error occurred. Error: ${error && error.message}. `, error, errorInfo);
	  }

	  render() {
	    var _this$state;

	    if (this.props.hasError || (_this$state = this.state) != null && _this$state.hasError) {
	      // You can render any custom fallback UI
	      return this.props.render(this.state);
	    }

	    return this.props.children;
	  }

	}

	function GridErrorHandler(props) {
	  const {
	    children
	  } = props;
	  const apiRef = useGridApiContext();
	  const logger = useGridLogger(apiRef, 'GridErrorHandler');
	  const rootProps = useGridRootProps();
	  const errorState = apiRef.current.state.error;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(ErrorBoundary, {
	    hasError: errorState != null,
	    api: apiRef,
	    logger: logger,
	    render: errorProps => {
	      var _rootProps$components;

	      return /*#__PURE__*/jsxRuntime.exports.jsx(GridMainContainer, {
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.ErrorOverlay, _extends({}, errorProps, errorState, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.errorOverlay))
	      });
	    },
	    children: children
	  });
	}

	function GridFooterPlaceholder() {
	  var _rootProps$components;

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const footerRef = react.exports.useRef(null);
	  apiRef.current.footerRef = footerRef;

	  if (rootProps.hideFooter) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", {
	    ref: footerRef,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.Footer, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.footer))
	  });
	}

	function GridHeaderPlaceholder() {
	  var _rootProps$components;

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const headerRef = react.exports.useRef(null);
	  apiRef.current.headerRef = headerRef;
	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", {
	    ref: headerRef,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.Header, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.header))
	  });
	}

	// TODO v6: rename to GridEditingState
	var GridEditModes;

	(function (GridEditModes) {
	  GridEditModes["Cell"] = "cell";
	  GridEditModes["Row"] = "row";
	})(GridEditModes || (GridEditModes = {}));

	var GridCellModes;

	(function (GridCellModes) {
	  GridCellModes["Edit"] = "edit";
	  GridCellModes["View"] = "view";
	})(GridCellModes || (GridCellModes = {}));

	var GridRowModes;

	(function (GridRowModes) {
	  GridRowModes["Edit"] = "edit";
	  GridRowModes["View"] = "view";
	})(GridRowModes || (GridRowModes = {}));

	const GridFeatureModeConstant = {
	  client: 'client',
	  server: 'server'
	};

	/**
	 * Filter item definition interface.
	 */
	var GridLinkOperator;

	(function (GridLinkOperator) {
	  GridLinkOperator["And"] = "and";
	  GridLinkOperator["Or"] = "or";
	})(GridLinkOperator || (GridLinkOperator = {}));

	// TODO v6 - remove

	/**
	 * Params passed to `apiRef.current.setEditCellValue`.
	 */
	// TODO v6 - remove
	// TODO v6 - remove
	var GridCellEditStartReasons;
	/**
	 * Params passed to the `cellEditStart` event.
	 */

	(function (GridCellEditStartReasons) {
	  GridCellEditStartReasons["enterKeyDown"] = "enterKeyDown";
	  GridCellEditStartReasons["cellDoubleClick"] = "cellDoubleClick";
	  GridCellEditStartReasons["printableKeyDown"] = "printableKeyDown";
	  GridCellEditStartReasons["deleteKeyDown"] = "deleteKeyDown";
	})(GridCellEditStartReasons || (GridCellEditStartReasons = {}));

	var GridCellEditStopReasons;
	/**
	 * Params passed to the `cellEditStop event.
	 */

	(function (GridCellEditStopReasons) {
	  GridCellEditStopReasons["cellFocusOut"] = "cellFocusOut";
	  GridCellEditStopReasons["escapeKeyDown"] = "escapeKeyDown";
	  GridCellEditStopReasons["enterKeyDown"] = "enterKeyDown";
	  GridCellEditStopReasons["tabKeyDown"] = "tabKeyDown";
	  GridCellEditStopReasons["shiftTabKeyDown"] = "shiftTabKeyDown";
	})(GridCellEditStopReasons || (GridCellEditStopReasons = {}));

	/**
	 * Object passed as parameter in the row callbacks.
	 */

	/**
	 * Object passed as parameter in the row `getRowClassName` callback prop.
	 */

	/**
	 * Object passed as parameter in the row `getRowHeight` callback prop.
	 */

	/**
	 * The getRowHeight return value.
	 */
	var GridRowEditStartReasons;
	/**
	 * Params passed to the `rowEditStart` event.
	 */

	(function (GridRowEditStartReasons) {
	  GridRowEditStartReasons["enterKeyDown"] = "enterKeyDown";
	  GridRowEditStartReasons["cellDoubleClick"] = "cellDoubleClick";
	  GridRowEditStartReasons["printableKeyDown"] = "printableKeyDown";
	  GridRowEditStartReasons["deleteKeyDown"] = "deleteKeyDown";
	})(GridRowEditStartReasons || (GridRowEditStartReasons = {}));

	var GridRowEditStopReasons;

	(function (GridRowEditStopReasons) {
	  GridRowEditStopReasons["rowFocusOut"] = "rowFocusOut";
	  GridRowEditStopReasons["escapeKeyDown"] = "escapeKeyDown";
	  GridRowEditStopReasons["enterKeyDown"] = "enterKeyDown";
	  GridRowEditStopReasons["tabKeyDown"] = "tabKeyDown";
	  GridRowEditStopReasons["shiftTabKeyDown"] = "shiftTabKeyDown";
	})(GridRowEditStopReasons || (GridRowEditStopReasons = {}));

	/**
	 * Available densities.
	 */

	/**
	 * Density enum.
	 */
	var GridDensityTypes;

	(function (GridDensityTypes) {
	  GridDensityTypes["Compact"] = "compact";
	  GridDensityTypes["Standard"] = "standard";
	  GridDensityTypes["Comfortable"] = "comfortable";
	})(GridDensityTypes || (GridDensityTypes = {}));

	function isLeaf(node) {
	  return node.field !== undefined;
	}
	/**
	 * A function used to process headerClassName params.
	 */

	const gridFocusStateSelector = state => state.focus;
	const gridFocusCellSelector = createSelector(gridFocusStateSelector, focusState => focusState.cell);
	const gridFocusColumnHeaderSelector = createSelector(gridFocusStateSelector, focusState => focusState.columnHeader);
	const gridTabIndexStateSelector = state => state.tabIndex;
	const gridTabIndexCellSelector = createSelector(gridTabIndexStateSelector, state => state.cell);
	const gridTabIndexColumnHeaderSelector = createSelector(gridTabIndexStateSelector, state => state.columnHeader);

	const _excluded$P = ["align", "children", "colIndex", "colDef", "cellMode", "field", "formattedValue", "hasFocus", "height", "isEditable", "rowId", "tabIndex", "value", "width", "className", "showRightBorder", "extendRowFullWidth", "row", "colSpan", "disableDragEvents", "onClick", "onDoubleClick", "onMouseDown", "onMouseUp", "onKeyDown", "onDragEnter", "onDragOver"];
	// Based on https://stackoverflow.com/a/59518678
	let cachedSupportsPreventScroll;

	function doesSupportPreventScroll() {
	  if (cachedSupportsPreventScroll === undefined) {
	    document.createElement('div').focus({
	      get preventScroll() {
	        cachedSupportsPreventScroll = true;
	        return false;
	      }

	    });
	  }

	  return cachedSupportsPreventScroll;
	}

	const useUtilityClasses$z = ownerState => {
	  const {
	    align,
	    showRightBorder,
	    isEditable,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['cell', `cell--text${capitalize(align)}`, isEditable && 'cell--editable', showRightBorder && 'withBorder'],
	    content: ['cellContent']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	function GridCell(props) {

	  const {
	    align,
	    children,
	    colIndex,
	    cellMode,
	    field,
	    formattedValue,
	    hasFocus,
	    height,
	    isEditable,
	    rowId,
	    tabIndex,
	    value,
	    width,
	    className,
	    showRightBorder,
	    colSpan,
	    disableDragEvents,
	    onClick,
	    onDoubleClick,
	    onMouseDown,
	    onMouseUp,
	    onKeyDown,
	    onDragEnter,
	    onDragOver
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$P);

	  const valueToRender = formattedValue == null ? value : formattedValue;
	  const cellRef = react.exports.useRef(null);
	  const focusElementRef = react.exports.useRef(null);
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    align,
	    showRightBorder,
	    isEditable,
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$z(ownerState);
	  const publishMouseUp = react.exports.useCallback(eventName => event => {
	    const params = apiRef.current.getCellParams(rowId, field || '');
	    apiRef.current.publishEvent(eventName, params, event);

	    if (onMouseUp) {
	      onMouseUp(event);
	    }
	  }, [apiRef, field, onMouseUp, rowId]);
	  const publishMouseDown = react.exports.useCallback(eventName => event => {
	    const params = apiRef.current.getCellParams(rowId, field || '');
	    apiRef.current.publishEvent(eventName, params, event);

	    if (onMouseDown) {
	      onMouseDown(event);
	    }
	  }, [apiRef, field, onMouseDown, rowId]);
	  const publish = react.exports.useCallback((eventName, propHandler) => event => {
	    // Ignore portal
	    if (!event.currentTarget.contains(event.target)) {
	      return;
	    } // The row might have been deleted during the click


	    if (!apiRef.current.getRow(rowId)) {
	      return;
	    }

	    const params = apiRef.current.getCellParams(rowId, field || '');
	    apiRef.current.publishEvent(eventName, params, event);

	    if (propHandler) {
	      propHandler(event);
	    }
	  }, [apiRef, field, rowId]);
	  const style = {
	    minWidth: width,
	    maxWidth: width,
	    minHeight: height,
	    maxHeight: height === 'auto' ? 'none' : height // max-height doesn't support "auto"

	  };
	  react.exports.useEffect(() => {
	    if (!hasFocus || cellMode === GridCellModes.Edit) {
	      return;
	    }

	    const doc = ownerDocument(apiRef.current.rootElementRef.current);

	    if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {
	      const focusableElement = cellRef.current.querySelector('[tabindex="0"]');
	      const elementToFocus = focusElementRef.current || focusableElement || cellRef.current;

	      if (doesSupportPreventScroll()) {
	        elementToFocus.focus({
	          preventScroll: true
	        });
	      } else {
	        const scrollPosition = apiRef.current.getScrollPosition();
	        elementToFocus.focus();
	        apiRef.current.scroll(scrollPosition);
	      }
	    }
	  }, [hasFocus, cellMode, apiRef]);
	  let handleFocus = other.onFocus;

	  const column = apiRef.current.getColumn(field);
	  const managesOwnFocus = column.type === 'actions';

	  const renderChildren = () => {
	    if (children == null) {
	      return /*#__PURE__*/jsxRuntime.exports.jsx("div", {
	        className: classes.content,
	        children: valueToRender == null ? void 0 : valueToRender.toString()
	      });
	    }

	    if ( /*#__PURE__*/react.exports.isValidElement(children) && managesOwnFocus) {
	      return /*#__PURE__*/react.exports.cloneElement(children, {
	        focusElementRef
	      });
	    }

	    return children;
	  };

	  const draggableEventHandlers = disableDragEvents ? null : {
	    onDragEnter: publish('cellDragEnter', onDragEnter),
	    onDragOver: publish('cellDragOver', onDragOver)
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", _extends({
	    ref: cellRef,
	    className: clsx(className, classes.root),
	    role: "cell",
	    "data-field": field,
	    "data-colindex": colIndex,
	    "aria-colindex": colIndex + 1,
	    "aria-colspan": colSpan,
	    style: style,
	    tabIndex: (cellMode === 'view' || !isEditable) && !managesOwnFocus ? tabIndex : -1,
	    onClick: publish('cellClick', onClick),
	    onDoubleClick: publish('cellDoubleClick', onDoubleClick),
	    onMouseDown: publishMouseDown('cellMouseDown'),
	    onMouseUp: publishMouseUp('cellMouseUp'),
	    onKeyDown: publish('cellKeyDown', onKeyDown)
	  }, draggableEventHandlers, other, {
	    onFocus: handleFocus,
	    children: renderChildren()
	  }));
	}

	const _excluded$O = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "hasFocus", "tabIndex", "getValue"];

	const useUtilityClasses$y = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['booleanCell']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridBooleanCellRaw = props => {
	  const {
	    value
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$O);

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$y(ownerState);
	  const Icon = react.exports.useMemo(() => value ? rootProps.components.BooleanCellTrueIcon : rootProps.components.BooleanCellFalseIcon, [rootProps.components.BooleanCellFalseIcon, rootProps.components.BooleanCellTrueIcon, value]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Icon, _extends({
	    fontSize: "small",
	    className: classes.root,
	    titleAccess: apiRef.current.getLocaleText(value ? 'booleanCellTrueLabel' : 'booleanCellFalseLabel'),
	    "data-value": Boolean(value)
	  }, other));
	};
	const GridBooleanCell = /*#__PURE__*/react.exports.memo(GridBooleanCellRaw);
	const renderBooleanCell = params => {
	  if (params.rowNode.isAutoGenerated) {
	    return '';
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridBooleanCell, _extends({}, params));
	};

	const _excluded$N = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "getValue", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange"];

	const useUtilityClasses$x = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['editBooleanCell']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	function GridEditBooleanCell(props) {
	  var _rootProps$components;

	  const {
	    id: idProp,
	    value,
	    field,
	    className,
	    hasFocus,
	    onValueChange
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$N);

	  const apiRef = useGridApiContext();
	  const inputRef = react.exports.useRef(null);
	  const id = useId();
	  const [valueState, setValueState] = react.exports.useState(value);
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$x(ownerState);
	  const handleChange = react.exports.useCallback(async event => {
	    const newValue = event.target.checked;

	    if (onValueChange) {
	      await onValueChange(event, newValue);
	    }

	    setValueState(newValue);
	    await apiRef.current.setEditCellValue({
	      id: idProp,
	      field,
	      value: newValue
	    }, event);
	  }, [apiRef, field, idProp, onValueChange]);
	  react.exports.useEffect(() => {
	    setValueState(value);
	  }, [value]);
	  useEnhancedEffect$1(() => {
	    if (hasFocus) {
	      inputRef.current.focus();
	    }
	  }, [hasFocus]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx("label", _extends({
	    htmlFor: id,
	    className: clsx(classes.root, className)
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseCheckbox, _extends({
	      id: id,
	      inputRef: inputRef,
	      checked: Boolean(valueState),
	      onChange: handleChange,
	      size: "small"
	    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox))
	  }));
	}
	const renderEditBooleanCell = params => /*#__PURE__*/jsxRuntime.exports.jsx(GridEditBooleanCell, _extends({}, params));

	const _excluded$M = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "getValue", "inputProps", "isValidating", "isProcessingProps", "onValueChange"];
	const StyledInputBase = styled$1(InputBase$1)({
	  fontSize: 'inherit'
	});

	const useUtilityClasses$w = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['editInputCell']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	function GridEditDateCell(props) {
	  const {
	    id,
	    value: valueProp,
	    field,
	    colDef,
	    hasFocus,
	    inputProps,
	    onValueChange
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$M);

	  const isDateTime = colDef.type === 'dateTime';
	  const apiRef = useGridApiContext();
	  const inputRef = react.exports.useRef();
	  const valueTransformed = react.exports.useMemo(() => {
	    let parsedDate;

	    if (valueProp == null) {
	      parsedDate = null;
	    } else if (valueProp instanceof Date) {
	      parsedDate = valueProp;
	    } else {
	      parsedDate = new Date((valueProp != null ? valueProp : '').toString());
	    }

	    let formattedDate;

	    if (parsedDate == null || Number.isNaN(parsedDate.getTime())) {
	      formattedDate = '';
	    } else {
	      const localDate = new Date(parsedDate.getTime() - parsedDate.getTimezoneOffset() * 60 * 1000);
	      formattedDate = localDate.toISOString().substr(0, isDateTime ? 16 : 10);
	    }

	    return {
	      parsed: parsedDate,
	      formatted: formattedDate
	    };
	  }, [valueProp, isDateTime]);
	  const [valueState, setValueState] = react.exports.useState(valueTransformed);
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$w(ownerState);
	  const handleChange = react.exports.useCallback(async event => {
	    const newFormattedDate = event.target.value;
	    let newParsedDate;

	    if (newFormattedDate === '') {
	      newParsedDate = null;
	    } else {
	      const [date, time] = newFormattedDate.split('T');
	      const [year, month, day] = date.split('-');
	      newParsedDate = new Date();
	      newParsedDate.setFullYear(Number(year), Number(month) - 1, Number(day));
	      newParsedDate.setHours(0, 0, 0, 0);

	      if (time) {
	        const [hours, minutes] = time.split(':');
	        newParsedDate.setHours(Number(hours), Number(minutes), 0, 0);
	      }
	    }

	    if (onValueChange) {
	      await onValueChange(event, newParsedDate);
	    }

	    setValueState({
	      parsed: newParsedDate,
	      formatted: newFormattedDate
	    });
	    apiRef.current.setEditCellValue({
	      id,
	      field,
	      value: newParsedDate
	    }, event);
	  }, [apiRef, field, id, onValueChange]);
	  react.exports.useEffect(() => {
	    setValueState(state => {
	      var _valueTransformed$par, _state$parsed;

	      if (valueTransformed.parsed !== state.parsed && ((_valueTransformed$par = valueTransformed.parsed) == null ? void 0 : _valueTransformed$par.getTime()) !== ((_state$parsed = state.parsed) == null ? void 0 : _state$parsed.getTime())) {
	        return valueTransformed;
	      }

	      return state;
	    });
	  }, [valueTransformed]);
	  useEnhancedEffect$1(() => {
	    if (hasFocus) {
	      inputRef.current.focus();
	    }
	  }, [hasFocus]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(StyledInputBase, _extends({
	    inputRef: inputRef,
	    fullWidth: true,
	    className: classes.root,
	    type: isDateTime ? 'datetime-local' : 'date',
	    inputProps: _extends({
	      max: isDateTime ? '9999-12-31T23:59' : '9999-12-31'
	    }, inputProps),
	    value: valueState.formatted,
	    onChange: handleChange
	  }, other));
	}
	const renderEditDateCell = params => /*#__PURE__*/jsxRuntime.exports.jsx(GridEditDateCell, _extends({}, params));

	const GridArrowUpwardIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
	}), 'ArrowUpward');
	const GridArrowDownwardIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
	}), 'ArrowDownward');
	const GridKeyboardArrowRight = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
	}), 'KeyboardArrowRight');
	const GridExpandMoreIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
	}), 'ExpandMore');
	const GridFilterListIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"
	}), 'FilterList');
	const GridFilterAltIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"
	}), 'FilterAlt');
	const GridSearchIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
	}), 'Search');
	createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
	}), 'Menu');
	createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
	}), 'CheckCircle');
	const GridColumnIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"
	}), 'ColumnIcon');
	const GridSeparatorIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M11 19V5h2v14z"
	}), 'Separator');
	const GridViewHeadlineIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"
	}), 'ViewHeadline');
	const GridTableRowsIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"
	}), 'TableRows');
	const GridViewStreamIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M4 18h17v-6H4v6zM4 5v6h17V5H4z"
	}), 'ViewStream');
	const GridTripleDotsVerticalIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
	}), 'TripleDotsVertical');
	const GridCloseIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
	}), 'Close');
	const GridAddIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
	}), 'Add');
	const GridRemoveIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 13H5v-2h14v2z"
	}), 'Remove');
	const GridLoadIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"
	}), 'Load');
	const GridDragIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
	}), 'Drag');
	const GridSaveAltIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"
	}), 'SaveAlt');
	const GridCheckIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
	}), 'Check');
	const GridMoreVertIcon = createSvgIcon( /*#__PURE__*/jsxRuntime.exports.jsx("path", {
	  d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
	}), 'MoreVert');

	function getValueFromOption(option) {
	  if (typeof option === 'object' && option !== null) {
	    return option.value;
	  }

	  return option;
	}
	function getValueFromValueOptions(value, valueOptions) {
	  if (valueOptions === undefined) {
	    return undefined;
	  }

	  const result = valueOptions.find(option => {
	    const optionValue = getValueFromOption(option);
	    return String(optionValue) === String(value);
	  });
	  return getValueFromOption(result);
	}

	const _excluded$L = ["item", "applyValue", "type", "apiRef", "focusElementRef"];

	const renderSingleSelectOptions$2 = ({
	  valueOptions,
	  valueFormatter,
	  field
	}, api, OptionComponent) => {
	  const iterableColumnValues = typeof valueOptions === 'function' ? ['', ...valueOptions({
	    field
	  })] : ['', ...(valueOptions || [])];
	  return iterableColumnValues.map(option => {
	    const isOptionTypeObject = typeof option === 'object';
	    const key = isOptionTypeObject ? option.value : option;
	    const value = isOptionTypeObject ? option.value : option;
	    const formattedValue = valueFormatter && option !== '' ? valueFormatter({
	      value: option,
	      field,
	      api
	    }) : option;
	    const content = isOptionTypeObject ? option.label : formattedValue;
	    return /*#__PURE__*/jsxRuntime.exports.jsx(OptionComponent, {
	      value: value,
	      children: content
	    }, key);
	  });
	};

	const SUBMIT_FILTER_STROKE_TIME = 500;

	function GridFilterInputValue(props) {
	  var _item$value, _rootProps$components, _baseSelectProps$nati, _rootProps$components2, _rootProps$components3;

	  const {
	    item,
	    applyValue,
	    type,
	    apiRef,
	    focusElementRef
	  } = props,
	        others = _objectWithoutPropertiesLoose(props, _excluded$L);

	  const filterTimeout = react.exports.useRef();
	  const [filterValueState, setFilterValueState] = react.exports.useState((_item$value = item.value) != null ? _item$value : '');
	  const [applying, setIsApplying] = react.exports.useState(false);
	  const id = useId();
	  const rootProps = useGridRootProps();
	  const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};
	  const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
	  const singleSelectProps = type === 'singleSelect' ? {
	    select: true,
	    SelectProps: _extends({
	      native: isSelectNative
	    }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect),
	    children: renderSingleSelectOptions$2(apiRef.current.getColumn(item.columnField), apiRef.current, isSelectNative ? 'option' : MenuItem$1)
	  } : {};
	  const onFilterChange = react.exports.useCallback(event => {
	    let value = event.target.value; // NativeSelect casts the value to a string.

	    if (type === 'singleSelect') {
	      const column = apiRef.current.getColumn(item.columnField);
	      const columnValueOptions = typeof column.valueOptions === 'function' ? column.valueOptions({
	        field: column.field
	      }) : column.valueOptions;
	      value = getValueFromValueOptions(value, columnValueOptions);
	    }

	    clearTimeout(filterTimeout.current);
	    setFilterValueState(String(value));
	    setIsApplying(true); // TODO singleSelect doesn't debounce

	    filterTimeout.current = setTimeout(() => {
	      applyValue(_extends({}, item, {
	        value
	      }));
	      setIsApplying(false);
	    }, SUBMIT_FILTER_STROKE_TIME);
	  }, [apiRef, applyValue, item, type]);
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(filterTimeout.current);
	    };
	  }, []);
	  react.exports.useEffect(() => {
	    var _item$value2;

	    const itemValue = (_item$value2 = item.value) != null ? _item$value2 : '';
	    setFilterValueState(String(itemValue));
	  }, [item.value]);
	  const InputProps = applying ? {
	    endAdornment: /*#__PURE__*/jsxRuntime.exports.jsx(GridLoadIcon, {})
	  } : others.InputProps;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseTextField, _extends({
	    id: id,
	    label: apiRef.current.getLocaleText('filterPanelInputLabel'),
	    placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),
	    value: filterValueState,
	    onChange: onFilterChange,
	    variant: "standard",
	    type: type || 'text',
	    InputProps: InputProps,
	    InputLabelProps: {
	      shrink: true
	    },
	    inputRef: focusElementRef
	  }, singleSelectProps, others, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseTextField));
	}

	const _excluded$K = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "getValue", "isValidating", "debounceMs", "isProcessingProps", "onValueChange"];

	const useUtilityClasses$v = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['editInputCell']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridEditInputCellRoot = styled$1(InputBase$1, {
	  name: 'MuiDataGrid',
	  slot: 'EditInputCell',
	  overridesResolver: (props, styles) => styles.editInputCell
	})(({
	  theme
	}) => _extends({}, theme.typography.body2, {
	  padding: '1px 0',
	  '& input': {
	    padding: '0 16px',
	    height: '100%'
	  }
	}));
	const GridEditInputCell = /*#__PURE__*/react.exports.forwardRef((props, ref) => {
	  var _rootProps$experiment, _rootProps$experiment3;

	  const rootProps = useGridRootProps();

	  const {
	    id,
	    value,
	    field,
	    colDef,
	    hasFocus,
	    debounceMs = (_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.newEditingApi ? 200 : SUBMIT_FILTER_STROKE_TIME,
	    isProcessingProps,
	    onValueChange
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$K);

	  const apiRef = useGridApiContext();
	  const inputRef = react.exports.useRef();
	  const [valueState, setValueState] = react.exports.useState(value);
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$v(ownerState);
	  const handleChange = react.exports.useCallback(async event => {
	    var _rootProps$experiment2;

	    const newValue = event.target.value;

	    if (onValueChange) {
	      await onValueChange(event, newValue);
	    }

	    const column = apiRef.current.getColumn(field);
	    let parsedValue = newValue;

	    if (column.valueParser && (_rootProps$experiment2 = rootProps.experimentalFeatures) != null && _rootProps$experiment2.newEditingApi) {
	      parsedValue = column.valueParser(newValue, apiRef.current.getCellParams(id, field));
	    }

	    setValueState(parsedValue);
	    apiRef.current.setEditCellValue({
	      id,
	      field,
	      value: parsedValue,
	      debounceMs,
	      unstable_skipValueParser: true
	    }, event);
	  }, [apiRef, debounceMs, field, id, onValueChange, (_rootProps$experiment3 = rootProps.experimentalFeatures) == null ? void 0 : _rootProps$experiment3.newEditingApi]);
	  const meta = apiRef.current.unstable_getEditCellMeta ? apiRef.current.unstable_getEditCellMeta(id, field) : {};
	  react.exports.useEffect(() => {
	    if (meta.changeReason !== 'debouncedSetEditCellValue') {
	      setValueState(value);
	    }
	  }, [meta.changeReason, value]);
	  useEnhancedEffect$1(() => {
	    if (hasFocus) {
	      inputRef.current.focus();
	    }
	  }, [hasFocus]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridEditInputCellRoot, _extends({
	    ref: ref,
	    inputRef: inputRef,
	    className: classes.root,
	    fullWidth: true,
	    type: colDef.type === 'number' ? colDef.type : 'text',
	    value: valueState != null ? valueState : '',
	    onChange: handleChange,
	    endAdornment: isProcessingProps ? /*#__PURE__*/jsxRuntime.exports.jsx(GridLoadIcon, {}) : undefined
	  }, other));
	});
	const renderEditInputCell = params => /*#__PURE__*/jsxRuntime.exports.jsx(GridEditInputCell, _extends({}, params));

	const isEscapeKey = key => key === 'Escape'; // TODO remove

	const isEnterKey = key => key === 'Enter'; // TODO remove

	const isTabKey = key => key === 'Tab'; // TODO remove

	const isSpaceKey = key => key === ' ';
	const isArrowKeys = key => key.indexOf('Arrow') === 0;
	const isHomeOrEndKeys = key => key === 'Home' || key === 'End';
	const isPageKeys = key => key.indexOf('Page') === 0;
	const isDeleteKeys = key => key === 'Delete' || key === 'Backspace'; // Non printable keys have a name, e.g. "ArrowRight", see the whole list:
	// https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values
	// We need to ignore shortcuts, for example: select all:
	// - Windows: Ctrl+A, event.ctrlKey is true
	// - macOS: ⌘ Command+A, event.metaKey is true

	function isPrintableKey(event) {
	  return event.key.length === 1 && event.ctrlKey === false && event.metaKey === false;
	}
	const GRID_CELL_EXIT_EDIT_MODE_KEYS = ['Enter', 'Escape', 'Tab'];
	const GRID_CELL_EDIT_COMMIT_KEYS = ['Enter', 'Tab'];
	const isCellEnterEditModeKeys = event => isEnterKey(event.key) || isDeleteKeys(event.key) || isPrintableKey(event);
	const isCellExitEditModeKeys = key => GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;
	const isCellEditCommitKeys = key => GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;
	const isNavigationKey = key => isHomeOrEndKeys(key) || isArrowKeys(key) || isPageKeys(key) || isSpaceKey(key);
	const isKeyboardEvent$1 = event => !!event.key;
	const isHideMenuKey = key => isTabKey(key) || isEscapeKey(key);

	const _excluded$J = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "getValue", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange", "initialOpen"];

	const renderSingleSelectOptions$1 = (option, OptionComponent) => {
	  const isOptionTypeObject = typeof option === 'object';
	  const key = isOptionTypeObject ? option.value : option;
	  const value = isOptionTypeObject ? option.value : option;
	  const content = isOptionTypeObject ? option.label : option;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(OptionComponent, {
	    value: value,
	    children: content
	  }, key);
	};

	function isKeyboardEvent(event) {
	  return !!event.key;
	}

	function GridEditSingleSelectCell(props) {
	  var _rootProps$components, _baseSelectProps$nati, _rootProps$components2;

	  const rootProps = useGridRootProps();

	  const {
	    id,
	    value,
	    api,
	    field,
	    row,
	    colDef,
	    hasFocus,
	    error,
	    onValueChange,
	    initialOpen = rootProps.editMode === GridEditModes.Cell
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$J);

	  const apiRef = useGridApiContext();
	  const ref = react.exports.useRef();
	  const inputRef = react.exports.useRef();
	  const [open, setOpen] = react.exports.useState(initialOpen);
	  const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};
	  const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : false;
	  let valueOptionsFormatted;

	  if (typeof colDef.valueOptions === 'function') {
	    valueOptionsFormatted = colDef.valueOptions({
	      id,
	      row,
	      field
	    });
	  } else {
	    valueOptionsFormatted = colDef.valueOptions;
	  }

	  if (colDef.valueFormatter) {
	    valueOptionsFormatted = valueOptionsFormatted.map(option => {
	      if (typeof option === 'object') {
	        return option;
	      }

	      const params = {
	        field,
	        api,
	        value: option
	      };
	      return {
	        value: option,
	        label: String(colDef.valueFormatter(params))
	      };
	    });
	  }

	  const handleChange = async event => {
	    var _rootProps$experiment;

	    setOpen(false);
	    const target = event.target; // NativeSelect casts the value to a string.

	    const formattedTargetValue = getValueFromValueOptions(target.value, valueOptionsFormatted);

	    if (onValueChange) {
	      await onValueChange(event, formattedTargetValue);
	    }

	    const isValid = await apiRef.current.setEditCellValue({
	      id,
	      field,
	      value: formattedTargetValue
	    }, event);

	    if ((_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.newEditingApi) {
	      return;
	    } // We use isValid === false because the default return is undefined which evaluates to true with !isValid


	    if (rootProps.editMode === GridEditModes.Row || isValid === false) {
	      return;
	    }

	    const canCommit = await Promise.resolve(apiRef.current.commitCellChange({
	      id,
	      field
	    }, event));

	    if (canCommit) {
	      apiRef.current.setCellMode(id, field, 'view');

	      if (event.key) {
	        // TODO v6: remove once we stop ignoring events fired from portals
	        const params = apiRef.current.getCellParams(id, field);
	        apiRef.current.publishEvent('cellNavigationKeyDown', params, event);
	      }
	    }
	  };

	  const handleClose = (event, reason) => {
	    if (rootProps.editMode === GridEditModes.Row) {
	      setOpen(false);
	      return;
	    }

	    if (reason === 'backdropClick' || isEscapeKey(event.key)) {
	      var _rootProps$experiment2;

	      if ((_rootProps$experiment2 = rootProps.experimentalFeatures) != null && _rootProps$experiment2.newEditingApi) {
	        apiRef.current.stopCellEditMode({
	          id,
	          field,
	          ignoreModifications: true
	        });
	      } else {
	        apiRef.current.setCellMode(id, field, 'view');
	      }
	    }
	  };

	  const handleOpen = event => {
	    if (isKeyboardEvent(event) && event.key === 'Enter') {
	      return;
	    }

	    setOpen(true);
	  };

	  useEnhancedEffect$1(() => {
	    if (hasFocus) {
	      inputRef.current.focus();
	    }
	  }, [hasFocus]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseSelect, _extends({
	    ref: ref,
	    inputRef: inputRef,
	    value: value,
	    onChange: handleChange,
	    open: open,
	    onOpen: handleOpen,
	    MenuProps: {
	      onClose: handleClose
	    },
	    error: error,
	    native: isSelectNative,
	    fullWidth: true
	  }, other, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect, {
	    children: valueOptionsFormatted.map(valueOptions => renderSingleSelectOptions$1(valueOptions, isSelectNative ? 'option' : MenuItem$1))
	  }));
	}
	const renderEditSingleSelectCell = params => /*#__PURE__*/jsxRuntime.exports.jsx(GridEditSingleSelectCell, _extends({}, params));

	const _excluded$I = ["open", "target", "onClickAway", "children", "position", "className", "onExited"];

	const useUtilityClasses$u = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['menu']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridMenuRoot = styled$1(MUIPopper, {
	  name: 'MuiDataGrid',
	  slot: 'Menu',
	  overridesResolver: (props, styles) => styles.menu
	})(({
	  theme
	}) => ({
	  zIndex: theme.zIndex.modal,
	  [`& .${gridClasses.menuList}`]: {
	    outline: 0
	  }
	}));
	const transformOrigin = {
	  'bottom-start': 'top left',
	  'bottom-end': 'top right'
	};

	const GridMenu = props => {
	  var _rootProps$components;

	  const {
	    open,
	    target,
	    onClickAway,
	    children,
	    position,
	    className,
	    onExited
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$I);

	  const apiRef = useGridApiContext();
	  const prevTarget = react.exports.useRef(target);
	  const prevOpen = react.exports.useRef(open);
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$u(ownerState);
	  react.exports.useEffect(() => {
	    if (prevOpen.current && prevTarget.current) {
	      prevTarget.current.focus();
	    } // Emit menuOpen or menuClose events


	    const eventName = open ? 'menuOpen' : 'menuClose';
	    apiRef.current.publishEvent(eventName, {
	      target
	    });
	    prevOpen.current = open;
	    prevTarget.current = target;
	  }, [apiRef, open, target]);

	  const handleExited = popperOnExited => node => {
	    if (popperOnExited) {
	      popperOnExited();
	    }

	    if (onExited) {
	      onExited(node);
	    }
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridMenuRoot, _extends({
	    as: rootProps.components.BasePopper,
	    className: clsx(className, classes.root),
	    open: open,
	    anchorEl: target,
	    transition: true,
	    placement: position
	  }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.basePopper, {
	    children: ({
	      TransitionProps,
	      placement
	    }) => /*#__PURE__*/jsxRuntime.exports.jsx(ClickAwayListener, {
	      onClickAway: onClickAway,
	      mouseEvent: "onMouseDown",
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(Grow$1, _extends({}, TransitionProps, {
	        style: {
	          transformOrigin: transformOrigin[placement]
	        },
	        onExited: handleExited(TransitionProps == null ? void 0 : TransitionProps.onExited),
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(Paper$1, {
	          children: children
	        })
	      }))
	    })
	  }));
	};

	const _excluded$H = ["colDef", "id", "api", "hasFocus", "isEditable", "field", "value", "formattedValue", "row", "rowNode", "cellMode", "getValue", "tabIndex", "position", "focusElementRef"];

	const hasActions = colDef => typeof colDef.getActions === 'function';

	const GridActionsCell = props => {
	  const {
	    colDef,
	    id,
	    hasFocus,
	    tabIndex,
	    position = 'bottom-end',
	    focusElementRef
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$H);

	  const [focusedButtonIndex, setFocusedButtonIndex] = react.exports.useState(-1);
	  const [open, setOpen] = react.exports.useState(false);
	  const apiRef = useGridApiContext();
	  const rootRef = react.exports.useRef(null);
	  const buttonRef = react.exports.useRef(null);
	  const ignoreCallToFocus = react.exports.useRef(false);
	  const touchRippleRefs = react.exports.useRef({});
	  const menuId = useId();
	  const buttonId = useId();
	  const rootProps = useGridRootProps();
	  react.exports.useLayoutEffect(() => {
	    if (!hasFocus) {
	      Object.entries(touchRippleRefs.current).forEach(([index, ref]) => {
	        ref == null ? void 0 : ref.stop({}, () => {
	          delete touchRippleRefs.current[index];
	        });
	      });
	    }
	  }, [hasFocus]);
	  react.exports.useEffect(() => {
	    if (focusedButtonIndex < 0 || !rootRef.current) {
	      return;
	    }

	    if (focusedButtonIndex >= rootRef.current.children.length) {
	      return;
	    }

	    const child = rootRef.current.children[focusedButtonIndex];
	    child.focus({
	      preventScroll: true
	    });
	  }, [focusedButtonIndex]);
	  react.exports.useEffect(() => {
	    if (!hasFocus) {
	      setFocusedButtonIndex(-1);
	      ignoreCallToFocus.current = false;
	    }
	  }, [hasFocus]);
	  react.exports.useImperativeHandle(focusElementRef, () => ({
	    focus() {
	      // If ignoreCallToFocus is true, then one of the buttons was clicked and the focus is already set
	      if (!ignoreCallToFocus.current) {
	        setFocusedButtonIndex(0);
	      }
	    }

	  }), []);

	  if (!hasActions(colDef)) {
	    throw new Error('MUI: Missing the `getActions` property in the `GridColDef`.');
	  }

	  const options = colDef.getActions(apiRef.current.getRowParams(id));
	  const iconButtons = options.filter(option => !option.props.showInMenu);
	  const menuButtons = options.filter(option => option.props.showInMenu);
	  const numberOfButtons = iconButtons.length + (menuButtons.length ? 1 : 0);
	  react.exports.useEffect(() => {
	    if (focusedButtonIndex >= numberOfButtons) {
	      setFocusedButtonIndex(numberOfButtons - 1);
	    }
	  }, [focusedButtonIndex, numberOfButtons]);

	  const showMenu = () => {
	    setOpen(true);
	    setFocusedButtonIndex(numberOfButtons - 1);
	    ignoreCallToFocus.current = true;
	  };

	  const hideMenu = () => {
	    setOpen(false);
	  };

	  const handleTouchRippleRef = index => instance => {
	    touchRippleRefs.current[index] = instance;
	  };

	  const handleButtonClick = (index, onClick) => event => {
	    setFocusedButtonIndex(index);
	    ignoreCallToFocus.current = true;

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  const handleRootKeyDown = event => {
	    if (numberOfButtons <= 1) {
	      return;
	    }

	    let newIndex = focusedButtonIndex;

	    if (event.key === 'ArrowRight') {
	      newIndex += 1;
	    } else if (event.key === 'ArrowLeft') {
	      newIndex -= 1;
	    }

	    if (newIndex < 0 || newIndex >= numberOfButtons) {
	      return; // We're already in the first or last item = do nothing and let the grid listen the event
	    }

	    if (newIndex !== focusedButtonIndex) {
	      event.preventDefault(); // Prevent scrolling

	      event.stopPropagation(); // Don't stop propagation for other keys, e.g. ArrowUp

	      setFocusedButtonIndex(newIndex);
	    }
	  };

	  const handleListKeyDown = event => {
	    if (event.key === 'Tab') {
	      event.preventDefault();
	    }

	    if (['Tab', 'Enter', 'Escape'].includes(event.key)) {
	      hideMenu();
	    }
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsxs("div", _extends({
	    role: "menu",
	    ref: rootRef,
	    tabIndex: -1,
	    className: gridClasses.actionsCell,
	    onKeyDown: handleRootKeyDown
	  }, other, {
	    children: [iconButtons.map((button, index) => /*#__PURE__*/react.exports.cloneElement(button, {
	      key: index,
	      touchRippleRef: handleTouchRippleRef(index),
	      onClick: handleButtonClick(index, button.props.onClick),
	      tabIndex: focusedButtonIndex === index ? tabIndex : -1
	    })), menuButtons.length > 0 && buttonId && /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, {
	      ref: buttonRef,
	      id: buttonId,
	      "aria-label": apiRef.current.getLocaleText('actionsCellMore'),
	      "aria-controls": menuId,
	      "aria-expanded": open ? 'true' : undefined,
	      "aria-haspopup": "true",
	      role: "menuitem",
	      size: "small",
	      onClick: showMenu,
	      touchRippleRef: handleTouchRippleRef(buttonId),
	      tabIndex: focusedButtonIndex === iconButtons.length ? tabIndex : -1,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.MoreActionsIcon, {
	        fontSize: "small"
	      })
	    }), menuButtons.length > 0 && /*#__PURE__*/jsxRuntime.exports.jsx(GridMenu, {
	      onClickAway: hideMenu,
	      onClick: hideMenu,
	      open: open,
	      target: buttonRef.current,
	      position: position,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(MenuList$1, {
	        id: menuId,
	        className: gridClasses.menuList,
	        onKeyDown: handleListKeyDown,
	        "aria-labelledby": buttonId,
	        variant: "menu",
	        autoFocusItem: true,
	        children: menuButtons.map((button, index) => /*#__PURE__*/react.exports.cloneElement(button, {
	          key: index
	        }))
	      })
	    })]
	  }));
	};
	const renderActionsCell = params => /*#__PURE__*/jsxRuntime.exports.jsx(GridActionsCell, _extends({}, params));

	const _excluded$G = ["field", "align", "width", "contentWidth"];

	const useUtilityClasses$t = ownerState => {
	  const {
	    align,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['cell', 'cellSkeleton', `cell--text${capitalize(align)}`]
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	function GridSkeletonCell(props) {
	  const {
	    align,
	    width,
	    contentWidth
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$G);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes,
	    align
	  };
	  const classes = useUtilityClasses$t(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", _extends({
	    className: classes.root,
	    style: {
	      width
	    }
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(Skeleton$1, {
	      width: `${contentWidth}%`
	    })
	  }));
	}

	const GridRootStyles = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'Root',
	  overridesResolver: (props, styles) => [{
	    [`&.${gridClasses.autoHeight}`]: styles.autoHeight
	  }, {
	    [`&.${gridClasses.aggregationColumnHeader}`]: styles.aggregationColumnHeader
	  }, {
	    [`&.${gridClasses['aggregationColumnHeader--alignLeft']}`]: styles['aggregationColumnHeader--alignLeft']
	  }, {
	    [`&.${gridClasses['aggregationColumnHeader--alignCenter']}`]: styles['aggregationColumnHeader--alignCenter']
	  }, {
	    [`&.${gridClasses['aggregationColumnHeader--alignRight']}`]: styles['aggregationColumnHeader--alignRight']
	  }, {
	    [`&.${gridClasses.aggregationColumnHeaderLabel}`]: styles.aggregationColumnHeaderLabel
	  }, {
	    [`& .${gridClasses.editBooleanCell}`]: styles.editBooleanCell
	  }, {
	    [`& .${gridClasses['cell--editing']}`]: styles['cell--editing']
	  }, {
	    [`& .${gridClasses['cell--textCenter']}`]: styles['cell--textCenter']
	  }, {
	    [`& .${gridClasses['cell--textLeft']}`]: styles['cell--textLeft']
	  }, {
	    [`& .${gridClasses['cell--textRight']}`]: styles['cell--textRight']
	  }, // TODO v6: Remove
	  {
	    [`& .${gridClasses['cell--withRenderer']}`]: styles['cell--withRenderer']
	  }, {
	    [`& .${gridClasses.cell}`]: styles.cell
	  }, {
	    [`& .${gridClasses.cellContent}`]: styles.cellContent
	  }, {
	    [`& .${gridClasses.cellCheckbox}`]: styles.cellCheckbox
	  }, {
	    [`& .${gridClasses.cellSkeleton}`]: styles.cellSkeleton
	  }, {
	    [`& .${gridClasses.checkboxInput}`]: styles.checkboxInput
	  }, {
	    [`& .${gridClasses['columnHeader--alignCenter']}`]: styles['columnHeader--alignCenter']
	  }, {
	    [`& .${gridClasses['columnHeader--alignLeft']}`]: styles['columnHeader--alignLeft']
	  }, {
	    [`& .${gridClasses['columnHeader--alignRight']}`]: styles['columnHeader--alignRight']
	  }, {
	    [`& .${gridClasses['columnHeader--dragging']}`]: styles['columnHeader--dragging']
	  }, {
	    [`& .${gridClasses['columnHeader--moving']}`]: styles['columnHeader--moving']
	  }, {
	    [`& .${gridClasses['columnHeader--numeric']}`]: styles['columnHeader--numeric']
	  }, {
	    [`& .${gridClasses['columnHeader--sortable']}`]: styles['columnHeader--sortable']
	  }, {
	    [`& .${gridClasses['columnHeader--sorted']}`]: styles['columnHeader--sorted']
	  }, {
	    [`& .${gridClasses.columnHeader}`]: styles.columnHeader
	  }, {
	    [`& .${gridClasses.columnHeaderCheckbox}`]: styles.columnHeaderCheckbox
	  }, {
	    [`& .${gridClasses.columnHeaderDraggableContainer}`]: styles.columnHeaderDraggableContainer
	  }, {
	    [`& .${gridClasses.columnHeaderTitleContainer}`]: styles.columnHeaderTitleContainer
	  }, {
	    [`& .${gridClasses['columnSeparator--resizable']}`]: styles['columnSeparator--resizable']
	  }, {
	    [`& .${gridClasses['columnSeparator--resizing']}`]: styles['columnSeparator--resizing']
	  }, {
	    [`& .${gridClasses.columnSeparator}`]: styles.columnSeparator
	  }, {
	    [`& .${gridClasses.filterIcon}`]: styles.filterIcon
	  }, {
	    [`& .${gridClasses.iconSeparator}`]: styles.iconSeparator
	  }, {
	    [`& .${gridClasses.menuIcon}`]: styles.menuIcon
	  }, {
	    [`& .${gridClasses.menuIconButton}`]: styles.menuIconButton
	  }, {
	    [`& .${gridClasses.menuOpen}`]: styles.menuOpen
	  }, {
	    [`& .${gridClasses.menuList}`]: styles.menuList
	  }, {
	    [`& .${gridClasses['row--editable']}`]: styles['row--editable']
	  }, {
	    [`& .${gridClasses['row--editing']}`]: styles['row--editing']
	  }, {
	    [`& .${gridClasses['row--dragging']}`]: styles['row--dragging']
	  }, {
	    [`& .${gridClasses.row}`]: styles.row
	  }, {
	    [`& .${gridClasses.rowReorderCellPlaceholder}`]: styles.rowReorderCellPlaceholder
	  }, {
	    [`& .${gridClasses.rowReorderCell}`]: styles.rowReorderCell
	  }, {
	    [`& .${gridClasses['rowReorderCell--draggable']}`]: styles['rowReorderCell--draggable']
	  }, {
	    [`& .${gridClasses.sortIcon}`]: styles.sortIcon
	  }, {
	    [`& .${gridClasses.withBorder}`]: styles.withBorder
	  }, {
	    [`& .${gridClasses.treeDataGroupingCell}`]: styles.treeDataGroupingCell
	  }, {
	    [`& .${gridClasses.treeDataGroupingCellToggle}`]: styles.treeDataGroupingCellToggle
	  }, {
	    [`& .${gridClasses.detailPanelToggleCell}`]: styles.detailPanelToggleCell
	  }, {
	    [`& .${gridClasses['detailPanelToggleCell--expanded']}`]: styles['detailPanelToggleCell--expanded']
	  }, styles.root]
	})(({
	  theme
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68);

	  const gridStyle = _extends({
	    flex: 1,
	    boxSizing: 'border-box',
	    position: 'relative',
	    border: `1px solid ${borderColor}`,
	    borderRadius: theme.shape.borderRadius,
	    color: theme.palette.text.primary
	  }, theme.typography.body2, {
	    outline: 'none',
	    height: '100%',
	    display: 'flex',
	    flexDirection: 'column',
	    [`&.${gridClasses.autoHeight}`]: {
	      height: 'auto',
	      [`& .${gridClasses['row--lastVisible']} .${gridClasses.cell}`]: {
	        borderBottomColor: 'transparent'
	      }
	    },
	    [`& .${gridClasses['virtualScrollerContent--overflowed']} .${gridClasses['row--lastVisible']} .${gridClasses.cell}`]: {
	      borderBottomColor: 'transparent'
	    },
	    [`& .${gridClasses.columnHeader}, & .${gridClasses.cell}`]: {
	      WebkitTapHighlightColor: 'transparent',
	      lineHeight: null,
	      padding: '0 10px',
	      boxSizing: 'border-box'
	    },
	    [`& .${gridClasses.columnHeader}:focus-within, & .${gridClasses.cell}:focus-within`]: {
	      outline: `solid ${alpha(theme.palette.primary.main, 0.5)} 1px`,
	      outlineWidth: 1,
	      outlineOffset: -1
	    },
	    [`& .${gridClasses.columnHeader}:focus, & .${gridClasses.cell}:focus`]: {
	      outline: `solid ${theme.palette.primary.main} 1px`
	    },
	    [`& .${gridClasses.columnHeaderCheckbox}, & .${gridClasses.cellCheckbox}`]: {
	      padding: 0,
	      justifyContent: 'center',
	      alignItems: 'center'
	    },
	    [`& .${gridClasses.columnHeader}`]: {
	      position: 'relative',
	      display: 'flex',
	      alignItems: 'center'
	    },
	    [`& .${gridClasses['columnHeader--sorted']} .${gridClasses.iconButtonContainer}, & .${gridClasses['columnHeader--filtered']} .${gridClasses.iconButtonContainer}`]: {
	      visibility: 'visible',
	      width: 'auto'
	    },
	    [`& .${gridClasses.columnHeader}:not(.${gridClasses['columnHeader--sorted']}) .${gridClasses.sortIcon}`]: {
	      opacity: 0,
	      transition: theme.transitions.create(['opacity'], {
	        duration: theme.transitions.duration.shorter
	      })
	    },
	    [`& .${gridClasses.columnHeader}:not(.${gridClasses['columnHeader--sorted']}):hover .${gridClasses.sortIcon}`]: {
	      opacity: 0.5
	    },
	    [`& .${gridClasses.columnHeaderTitleContainer}`]: {
	      display: 'flex',
	      alignItems: 'center',
	      minWidth: 0,
	      flex: 1,
	      whiteSpace: 'nowrap',
	      overflow: 'hidden'
	    },
	    [`& .${gridClasses.columnHeaderTitleContainerContent}`]: {
	      overflow: 'hidden',
	      display: 'flex',
	      alignItems: 'center'
	    },
	    [`& .${gridClasses['columnHeader--filledGroup']} .${gridClasses.columnHeaderTitleContainer}`]: {
	      borderBottom: `solid ${borderColor} 1px`,
	      boxSizing: 'border-box'
	    },
	    [`& .${gridClasses['columnHeader--filledGroup']}.${gridClasses['columnHeader--showColumnBorder']} .${gridClasses.columnHeaderTitleContainer}`]: {
	      borderBottom: `none`
	    },
	    [`& .${gridClasses['columnHeader--filledGroup']}.${gridClasses['columnHeader--showColumnBorder']}`]: {
	      borderBottom: `solid ${borderColor} 1px`,
	      boxSizing: 'border-box'
	    },
	    [`& .${gridClasses.sortIcon}, & .${gridClasses.filterIcon}`]: {
	      fontSize: 'inherit'
	    },
	    [`& .${gridClasses['columnHeader--sortable']}`]: {
	      cursor: 'pointer'
	    },
	    [`& .${gridClasses['columnHeader--alignCenter']} .${gridClasses.columnHeaderTitleContainer}`]: {
	      justifyContent: 'center'
	    },
	    [`& .${gridClasses['columnHeader--alignRight']} .${gridClasses.columnHeaderDraggableContainer}, & .${gridClasses['columnHeader--alignRight']} .${gridClasses.columnHeaderTitleContainer}`]: {
	      flexDirection: 'row-reverse'
	    },
	    [`& .${gridClasses['columnHeader--alignCenter']} .${gridClasses.menuIcon}, & .${gridClasses['columnHeader--alignRight']} .${gridClasses.menuIcon}`]: {
	      marginRight: 'auto',
	      marginLeft: -6
	    },
	    [`& .${gridClasses['columnHeader--alignRight']} .${gridClasses.menuIcon}, & .${gridClasses['columnHeader--alignRight']} .${gridClasses.menuIcon}`]: {
	      marginRight: 'auto',
	      marginLeft: -10
	    },
	    [`& .${gridClasses['columnHeader--moving']}`]: {
	      backgroundColor: theme.palette.action.hover
	    },
	    [`& .${gridClasses.columnSeparator}`]: {
	      position: 'absolute',
	      zIndex: 100,
	      display: 'flex',
	      flexDirection: 'column',
	      justifyContent: 'center',
	      color: borderColor
	    },
	    [`& .${gridClasses['columnSeparator--sideLeft']}`]: {
	      left: -12
	    },
	    [`& .${gridClasses['columnSeparator--sideRight']}`]: {
	      right: -12
	    },
	    [`& .${gridClasses['columnSeparator--resizable']}`]: {
	      cursor: 'col-resize',
	      touchAction: 'none',
	      '&:hover': {
	        color: theme.palette.text.primary,
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          color: borderColor
	        }
	      },
	      [`&.${gridClasses['columnSeparator--resizing']}`]: {
	        color: theme.palette.text.primary
	      },
	      '& svg': {
	        pointerEvents: 'none'
	      }
	    },
	    [`& .${gridClasses.iconSeparator}`]: {
	      color: 'inherit'
	    },
	    [`& .${gridClasses.menuIcon}`]: {
	      width: 0,
	      visibility: 'hidden',
	      fontSize: 20,
	      marginRight: -10,
	      display: 'flex',
	      alignItems: 'center'
	    },
	    [`& .${gridClasses.columnHeader}:hover`]: {
	      [`& .${gridClasses.iconButtonContainer}`]: {
	        visibility: 'visible',
	        width: 'auto'
	      },
	      [`& .${gridClasses.menuIcon}`]: {
	        width: 'auto',
	        visibility: 'visible'
	      }
	    },
	    [`.${gridClasses.menuOpen}`]: {
	      visibility: 'visible',
	      width: 'auto'
	    },
	    [`& .${gridClasses.row}`]: {
	      display: 'flex',
	      width: 'fit-content',
	      breakInside: 'avoid',
	      // Avoid the row to be broken in two different print pages.
	      '&:hover, &.Mui-hovered': {
	        backgroundColor: theme.palette.action.hover,
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      },
	      '&.Mui-selected': {
	        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	        '&:hover, &.Mui-hovered': {
	          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	          // Reset on touch devices, it doesn't add specificity
	          '@media (hover: none)': {
	            backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	          }
	        }
	      }
	    },
	    [`& .${gridClasses.cell}`]: {
	      display: 'flex',
	      alignItems: 'center',
	      borderBottom: `1px solid ${borderColor}`
	    },
	    [`& .${gridClasses.row}:not(.${gridClasses['row--dynamicHeight']}) > .${gridClasses.cell}`]: {
	      overflow: 'hidden',
	      whiteSpace: 'nowrap'
	    },
	    [`& .${gridClasses.cellContent}`]: {
	      overflow: 'hidden',
	      textOverflow: 'ellipsis'
	    },
	    [`& .${gridClasses.cell}.${gridClasses['cell--editing']}`]: {
	      padding: 1,
	      display: 'flex',
	      boxShadow: theme.shadows[2],
	      backgroundColor: theme.palette.background.paper,
	      '&:focus-within': {
	        outline: `solid ${theme.palette.primary.main} 1px`,
	        outlineOffset: '-1px'
	      }
	    },
	    [`& .${gridClasses['row--editing']}`]: {
	      boxShadow: theme.shadows[2]
	    },
	    [`& .${gridClasses['row--editing']} .${gridClasses.cell}`]: {
	      boxShadow: theme.shadows[0],
	      backgroundColor: theme.palette.background.paper
	    },
	    [`& .${gridClasses.editBooleanCell}`]: {
	      display: 'flex',
	      height: '100%',
	      width: '100%',
	      alignItems: 'center',
	      justifyContent: 'center'
	    },
	    [`& .${gridClasses.booleanCell}[data-value="true"]`]: {
	      color: theme.palette.text.secondary
	    },
	    [`& .${gridClasses.booleanCell}[data-value="false"]`]: {
	      color: theme.palette.text.disabled
	    },
	    [`& .${gridClasses.actionsCell}`]: {
	      display: 'inline-flex',
	      alignItems: 'center',
	      gridGap: theme.spacing(1)
	    },
	    [`& .${gridClasses.rowReorderCell}`]: {
	      display: 'inline-flex',
	      flex: 1,
	      alignItems: 'center',
	      justifyContent: 'center',
	      opacity: theme.palette.action.disabledOpacity
	    },
	    [`& .${gridClasses['rowReorderCell--draggable']}`]: {
	      cursor: 'move',
	      opacity: 1
	    },
	    [`& .${gridClasses.rowReorderCellContainer}`]: {
	      padding: 0,
	      alignItems: 'stretch'
	    },
	    [`& .${gridClasses.withBorder}`]: {
	      borderRight: `1px solid ${borderColor}`
	    },
	    [`& .${gridClasses['cell--textLeft']}`]: {
	      justifyContent: 'flex-start'
	    },
	    [`& .${gridClasses['cell--textRight']}`]: {
	      justifyContent: 'flex-end'
	    },
	    [`& .${gridClasses['cell--textCenter']}`]: {
	      justifyContent: 'center'
	    },
	    [`& .${gridClasses.columnHeaderDraggableContainer}`]: {
	      display: 'flex',
	      width: '100%',
	      height: '100%'
	    },
	    [`& .${gridClasses.rowReorderCellPlaceholder}`]: {
	      display: 'none'
	    },
	    [`& .${gridClasses['columnHeader--dragging']}, & .${gridClasses['row--dragging']}`]: {
	      background: theme.palette.background.paper,
	      padding: '0 12px',
	      borderRadius: theme.shape.borderRadius,
	      opacity: theme.palette.action.disabledOpacity
	    },
	    [`& .${gridClasses['row--dragging']}`]: {
	      background: theme.palette.background.paper,
	      padding: '0 12px',
	      borderRadius: theme.shape.borderRadius,
	      opacity: theme.palette.action.disabledOpacity,
	      [`& .${gridClasses.rowReorderCellPlaceholder}`]: {
	        display: 'flex'
	      }
	    },
	    [`& .${gridClasses.treeDataGroupingCell}`]: {
	      display: 'flex',
	      alignItems: 'center',
	      width: '100%'
	    },
	    [`& .${gridClasses.treeDataGroupingCellToggle}`]: {
	      flex: '0 0 28px',
	      alignSelf: 'stretch',
	      marginRight: theme.spacing(2)
	    },
	    [`& .${gridClasses.groupingCriteriaCell}`]: {
	      display: 'flex',
	      alignItems: 'center',
	      width: '100%'
	    },
	    [`& .${gridClasses.groupingCriteriaCellToggle}`]: {
	      flex: '0 0 28px',
	      alignSelf: 'stretch',
	      marginRight: theme.spacing(2)
	    }
	  });

	  return gridStyle;
	});

	const _excluded$F = ["children", "className"];

	const useUtilityClasses$s = ownerState => {
	  const {
	    autoHeight,
	    density,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', autoHeight && 'autoHeight', `root--density${capitalize(density)}`]
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridRoot = /*#__PURE__*/react.exports.forwardRef(function GridRoot(props, ref) {
	  const rootProps = useGridRootProps();

	  const {
	    children,
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$F);

	  const apiRef = useGridApiContext();
	  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
	  const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);
	  const densityValue = useGridSelector(apiRef, gridDensityValueSelector);
	  const headerGroupingMaxDepth = useGridSelector(apiRef, gridDensityHeaderGroupingMaxDepthSelector);
	  const rootContainerRef = react.exports.useRef(null);
	  const handleRef = useForkRef(rootContainerRef, ref);
	  const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);
	  const ownerState = {
	    density: densityValue,
	    classes: rootProps.classes,
	    autoHeight: rootProps.autoHeight
	  };
	  const classes = useUtilityClasses$s(ownerState);
	  apiRef.current.rootElementRef = rootContainerRef; // Our implementation of <NoSsr />

	  const [mountedState, setMountedState] = react.exports.useState(false);
	  useEnhancedEffect$1(() => {
	    setMountedState(true);
	  }, []);
	  useEnhancedEffect$1(() => {
	    if (mountedState) {
	      apiRef.current.unstable_updateGridDimensionsRef();
	    }
	  }, [apiRef, mountedState]);

	  if (!mountedState) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridRootStyles, _extends({
	    ref: handleRef,
	    className: clsx(className, classes.root),
	    role: "grid",
	    "aria-colcount": visibleColumns.length,
	    "aria-rowcount": headerGroupingMaxDepth + 1 + pinnedRowsCount + totalRowCount,
	    "aria-multiselectable": !rootProps.disableMultipleSelection,
	    "aria-label": rootProps['aria-label'],
	    "aria-labelledby": rootProps['aria-labelledby']
	  }, other, {
	    children: children
	  }));
	});

	const _excluded$E = ["className"];

	const useUtilityClasses$r = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['footerContainer']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridFooterContainerRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'FooterContainer',
	  overridesResolver: (props, styles) => styles.footerContainer
	})(({
	  theme
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68);
	  return {
	    display: 'flex',
	    justifyContent: 'space-between',
	    alignItems: 'center',
	    minHeight: 52,
	    // Match TablePagination min height
	    borderTop: `1px solid ${borderColor}`
	  };
	});
	const GridFooterContainer = /*#__PURE__*/react.exports.forwardRef(function GridFooterContainer(props, ref) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$E);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$r(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridFooterContainerRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other));
	});

	const _excluded$D = ["className"];

	const useUtilityClasses$q = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['overlay']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridOverlayRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'Overlay',
	  overridesResolver: (props, styles) => styles.overlay
	})(({
	  theme
	}) => ({
	  position: 'absolute',
	  top: 0,
	  zIndex: 4,
	  // should be above pinned columns, pinned rows and detail panel
	  width: '100%',
	  height: '100%',
	  pointerEvents: 'none',
	  display: 'flex',
	  alignSelf: 'center',
	  alignItems: 'center',
	  justifyContent: 'center',
	  backgroundColor: alpha(theme.palette.background.default, theme.palette.action.disabledOpacity)
	}));
	const GridOverlay = /*#__PURE__*/react.exports.forwardRef(function GridOverlay(props, ref) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$D);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$q(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridOverlayRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other));
	});

	const _excluded$C = ["className"];

	const useUtilityClasses$p = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['iconButtonContainer']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridIconButtonContainerRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'IconButtonContainer',
	  overridesResolver: (props, styles) => styles.iconButtonContainer
	})(() => ({
	  display: 'flex',
	  visibility: 'hidden',
	  width: 0
	}));
	const GridIconButtonContainer = /*#__PURE__*/react.exports.forwardRef(function GridIconButtonContainer(props, ref) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$C);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$p(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridIconButtonContainerRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other));
	});

	const useUtilityClasses$o = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    icon: ['sortIcon']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	function getIcon(icons, direction, className, sortingOrder) {
	  let Icon;
	  const iconProps = {};

	  if (direction === 'asc') {
	    Icon = icons.ColumnSortedAscendingIcon;
	  } else if (direction === 'desc') {
	    Icon = icons.ColumnSortedDescendingIcon;
	  } else {
	    Icon = icons.ColumnUnsortedIcon;
	    iconProps.sortingOrder = sortingOrder;
	  }

	  return Icon ? /*#__PURE__*/jsxRuntime.exports.jsx(Icon, _extends({
	    fontSize: "small",
	    className: className
	  }, iconProps)) : null;
	}

	function GridColumnHeaderSortIconRaw(props) {
	  const {
	    direction,
	    index,
	    sortingOrder
	  } = props;
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();

	  const ownerState = _extends({}, props, {
	    classes: rootProps.classes
	  });

	  const classes = useUtilityClasses$o(ownerState);
	  const iconElement = getIcon(rootProps.components, direction, classes.icon, sortingOrder);

	  if (!iconElement) {
	    return null;
	  }

	  const iconButton = /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, {
	    tabIndex: -1,
	    "aria-label": apiRef.current.getLocaleText('columnHeaderSortIconLabel'),
	    title: apiRef.current.getLocaleText('columnHeaderSortIconLabel'),
	    size: "small",
	    children: iconElement
	  });

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(GridIconButtonContainer, {
	    children: [index != null && /*#__PURE__*/jsxRuntime.exports.jsx(Badge$1, {
	      badgeContent: index,
	      color: "default",
	      children: iconButton
	    }), index == null && iconButton]
	  });
	}

	const GridColumnHeaderSortIcon = /*#__PURE__*/react.exports.memo(GridColumnHeaderSortIconRaw);

	const useUtilityClasses$n = ownerState => {
	  const {
	    classes,
	    open
	  } = ownerState;
	  const slots = {
	    root: ['menuIcon', open && 'menuOpen'],
	    button: ['menuIconButton']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const ColumnHeaderMenuIcon = /*#__PURE__*/react.exports.memo(props => {
	  const {
	    column,
	    open,
	    columnMenuId,
	    columnMenuButtonId,
	    iconButtonRef
	  } = props;
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();

	  const ownerState = _extends({}, props, {
	    classes: rootProps.classes
	  });

	  const classes = useUtilityClasses$n(ownerState);
	  const handleMenuIconClick = react.exports.useCallback(event => {
	    event.preventDefault();
	    event.stopPropagation();
	    apiRef.current.toggleColumnMenu(column.field);
	  }, [apiRef, column.field]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", {
	    className: classes.root,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, {
	      ref: iconButtonRef,
	      tabIndex: -1,
	      className: classes.button,
	      "aria-label": apiRef.current.getLocaleText('columnMenuLabel'),
	      title: apiRef.current.getLocaleText('columnMenuLabel'),
	      size: "small",
	      onClick: handleMenuIconClick,
	      "aria-expanded": open ? 'true' : undefined,
	      "aria-haspopup": "true",
	      "aria-controls": columnMenuId,
	      id: columnMenuButtonId,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.ColumnMenuIcon, {
	        fontSize: "small"
	      })
	    })
	  });
	});

	function GridColumnHeaderMenu({
	  columnMenuId,
	  columnMenuButtonId,
	  ContentComponent,
	  contentComponentProps,
	  field,
	  open,
	  target,
	  onExited
	}) {
	  const apiRef = useGridApiContext();
	  const currentColumn = apiRef.current.getColumn(field);
	  const hideMenu = react.exports.useCallback(event => {
	    // Prevent triggering the sorting
	    event.stopPropagation();
	    apiRef.current.hideColumnMenu();
	  }, [apiRef]);

	  if (!target) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridMenu, {
	    placement: `bottom-${currentColumn.align === 'right' ? 'start' : 'end'}`,
	    open: open,
	    target: target,
	    onClickAway: hideMenu,
	    onExited: onExited,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(ContentComponent, _extends({
	      currentColumn: currentColumn,
	      hideMenu: hideMenu,
	      open: open,
	      id: columnMenuId,
	      labelledby: columnMenuButtonId
	    }, contentComponentProps))
	  });
	}

	function isOverflown(element) {
	  return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
	}
	function findParentElementFromClassName(elem, className) {
	  return elem.closest(`.${className}`);
	}

	function escapeOperandAttributeSelector(operand) {
	  return operand.replace(/["\\]/g, '\\$&');
	}

	function getGridColumnHeaderElement(root, field) {
	  return root.querySelector(`[role="columnheader"][data-field="${escapeOperandAttributeSelector(field)}"]`);
	}
	function getGridRowElement(root, id) {
	  return root.querySelector(`.${gridClasses.row}[data-id="${escapeOperandAttributeSelector(String(id))}"]`);
	}
	function getGridCellElement(root, {
	  id,
	  field
	}) {
	  const row = getGridRowElement(root, id);

	  if (!row) {
	    return null;
	  }

	  return row.querySelector(`.${gridClasses.cell}[data-field="${escapeOperandAttributeSelector(field)}"]`);
	}

	const _excluded$B = ["className"];

	const useUtilityClasses$m = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['columnHeaderTitle']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridColumnHeaderTitleRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'ColumnHeaderTitle',
	  overridesResolver: (props, styles) => styles.columnHeaderTitle
	})(({
	  theme
	}) => ({
	  textOverflow: 'ellipsis',
	  overflow: 'hidden',
	  whiteSpace: 'nowrap',
	  fontWeight: theme.typography.fontWeightMedium
	}));
	const ColumnHeaderInnerTitle = /*#__PURE__*/react.exports.forwardRef(function ColumnHeaderInnerTitle(props, ref) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$B);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$m(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeaderTitleRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other));
	});

	// No React.memo here as if we display the sort icon, we need to recalculate the isOver
	function GridColumnHeaderTitle(props) {
	  var _rootProps$components;

	  const {
	    label,
	    description,
	    columnWidth
	  } = props;
	  const rootProps = useGridRootProps();
	  const titleRef = react.exports.useRef(null);
	  const [tooltip, setTooltip] = react.exports.useState('');
	  react.exports.useEffect(() => {
	    if (!description && titleRef && titleRef.current) {
	      const isOver = isOverflown(titleRef.current);

	      if (isOver) {
	        setTooltip(label);
	      } else {
	        setTooltip('');
	      }
	    }
	  }, [titleRef, columnWidth, description, label]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseTooltip, _extends({
	    title: description || tooltip
	  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTooltip, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(ColumnHeaderInnerTitle, {
	      ref: titleRef,
	      children: label
	    })
	  }));
	}

	const _excluded$A = ["resizable", "resizing", "height", "side"];
	var GridColumnHeaderSeparatorSides;

	(function (GridColumnHeaderSeparatorSides) {
	  GridColumnHeaderSeparatorSides["Left"] = "left";
	  GridColumnHeaderSeparatorSides["Right"] = "right";
	})(GridColumnHeaderSeparatorSides || (GridColumnHeaderSeparatorSides = {}));

	const useUtilityClasses$l = ownerState => {
	  const {
	    resizable,
	    resizing,
	    classes,
	    side
	  } = ownerState;
	  const slots = {
	    root: ['columnSeparator', resizable && 'columnSeparator--resizable', resizing && 'columnSeparator--resizing', side && `columnSeparator--side${capitalize(side)}`],
	    icon: ['iconSeparator']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	function GridColumnHeaderSeparatorRaw(props) {
	  const {
	    height,
	    side = GridColumnHeaderSeparatorSides.Right
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$A);

	  const rootProps = useGridRootProps();

	  const ownerState = _extends({}, props, {
	    side,
	    classes: rootProps.classes
	  });

	  const classes = useUtilityClasses$l(ownerState);
	  const stopClick = react.exports.useCallback(event => {
	    event.preventDefault();
	    event.stopPropagation();
	  }, []);
	  return (
	    /*#__PURE__*/
	    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
	    jsxRuntime.exports.jsx("div", _extends({
	      className: classes.root,
	      style: {
	        minHeight: height,
	        opacity: rootProps.showColumnRightBorder ? 0 : 1
	      }
	    }, other, {
	      onClick: stopClick,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.ColumnResizeIcon, {
	        className: classes.icon
	      })
	    }))
	  );
	}

	const GridColumnHeaderSeparator = /*#__PURE__*/react.exports.memo(GridColumnHeaderSeparatorRaw);

	const _excluded$z = ["classes", "columnMenuOpen", "colIndex", "height", "isResizing", "sortDirection", "hasFocus", "tabIndex", "separatorSide", "isDraggable", "headerComponent", "description", "elementId", "width", "columnMenuIconButton", "columnMenu", "columnTitleIconButtons", "headerClassName", "label", "resizable", "draggableContainerProps", "columnHeaderSeparatorProps", "disableHeaderSeparator"];
	const GridGenericColumnHeaderItem = /*#__PURE__*/react.exports.forwardRef(function GridGenericColumnHeaderItem(props, ref) {
	  const {
	    classes,
	    columnMenuOpen,
	    colIndex,
	    height,
	    isResizing,
	    sortDirection,
	    hasFocus,
	    tabIndex,
	    separatorSide,
	    isDraggable,
	    headerComponent,
	    description,
	    width,
	    columnMenuIconButton = null,
	    columnMenu = null,
	    columnTitleIconButtons = null,
	    headerClassName,
	    label,
	    resizable,
	    draggableContainerProps,
	    columnHeaderSeparatorProps,
	    disableHeaderSeparator
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$z);

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const headerCellRef = react.exports.useRef(null);
	  const [showColumnMenuIcon, setShowColumnMenuIcon] = react.exports.useState(columnMenuOpen);
	  const handleRef = useForkRef(headerCellRef, ref);
	  let ariaSort = 'none';

	  if (sortDirection != null) {
	    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
	  }

	  react.exports.useEffect(() => {
	    if (!showColumnMenuIcon) {
	      setShowColumnMenuIcon(columnMenuOpen);
	    }
	  }, [showColumnMenuIcon, columnMenuOpen]);
	  react.exports.useLayoutEffect(() => {
	    const columnMenuState = apiRef.current.state.columnMenu;

	    if (hasFocus && !columnMenuState.open) {
	      const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
	      const elementToFocus = focusableElement || headerCellRef.current;
	      elementToFocus == null ? void 0 : elementToFocus.focus();
	      apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
	    }
	  }, [apiRef, hasFocus]);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs("div", _extends({
	    ref: handleRef,
	    className: clsx(classes.root, headerClassName),
	    style: {
	      height,
	      width,
	      minWidth: width,
	      maxWidth: width
	    },
	    role: "columnheader",
	    tabIndex: tabIndex,
	    "aria-colindex": colIndex + 1,
	    "aria-sort": ariaSort,
	    "aria-label": headerComponent == null ? label : undefined
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsxs("div", _extends({
	      className: classes.draggableContainer,
	      draggable: isDraggable
	    }, draggableContainerProps, {
	      children: [/*#__PURE__*/jsxRuntime.exports.jsxs("div", {
	        className: classes.titleContainer,
	        children: [/*#__PURE__*/jsxRuntime.exports.jsx("div", {
	          className: classes.titleContainerContent,
	          children: headerComponent !== undefined ? headerComponent : /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeaderTitle, {
	            label: label,
	            description: description,
	            columnWidth: width
	          })
	        }), columnTitleIconButtons]
	      }), columnMenuIconButton]
	    })), !disableHeaderSeparator && /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeaderSeparator, _extends({
	      resizable: !rootProps.disableColumnResize && !!resizable,
	      resizing: isResizing,
	      height: height,
	      side: separatorSide
	    }, columnHeaderSeparatorProps)), columnMenu]
	  }));
	});

	const useUtilityClasses$k = ownerState => {
	  const {
	    column,
	    classes,
	    isDragging,
	    sortDirection,
	    showRightBorder,
	    filterItemsCounter
	  } = ownerState;
	  const isColumnSorted = sortDirection != null;
	  const isColumnFiltered = filterItemsCounter != null && filterItemsCounter > 0; // todo refactor to a prop on col isNumeric or ?? ie: coltype===price wont work

	  const isColumnNumeric = column.type === 'number';
	  const slots = {
	    root: ['columnHeader', column.headerAlign === 'left' && 'columnHeader--alignLeft', column.headerAlign === 'center' && 'columnHeader--alignCenter', column.headerAlign === 'right' && 'columnHeader--alignRight', column.sortable && 'columnHeader--sortable', isDragging && 'columnHeader--moving', isColumnSorted && 'columnHeader--sorted', isColumnFiltered && 'columnHeader--filtered', isColumnNumeric && 'columnHeader--numeric', showRightBorder && 'withBorder'],
	    draggableContainer: ['columnHeaderDraggableContainer'],
	    titleContainer: ['columnHeaderTitleContainer'],
	    titleContainerContent: ['columnHeaderTitleContainerContent']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	function GridColumnHeaderItem(props) {
	  var _apiRef$current$getRo, _rootProps$components, _column$sortingOrder, _rootProps$components2, _column$headerName;

	  const {
	    column,
	    columnMenuOpen,
	    colIndex,
	    headerHeight,
	    isResizing,
	    isLastColumn,
	    sortDirection,
	    sortIndex,
	    filterItemsCounter,
	    hasFocus,
	    tabIndex,
	    extendRowFullWidth,
	    disableReorder,
	    separatorSide
	  } = props;
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const headerCellRef = react.exports.useRef(null);
	  const columnMenuId = useId();
	  const columnMenuButtonId = useId();
	  const iconButtonRef = react.exports.useRef(null);
	  const [showColumnMenuIcon, setShowColumnMenuIcon] = react.exports.useState(columnMenuOpen);
	  const {
	    hasScrollX,
	    hasScrollY
	  } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {
	    hasScrollX: false,
	    hasScrollY: false
	  };
	  const isDraggable = react.exports.useMemo(() => !rootProps.disableColumnReorder && !disableReorder && !column.disableReorder, [rootProps.disableColumnReorder, disableReorder, column.disableReorder]);
	  let headerComponent;

	  if (column.renderHeader) {
	    headerComponent = column.renderHeader(apiRef.current.getColumnHeaderParams(column.field));
	  }

	  const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;
	  const showRightBorder = !isLastColumn ? rootProps.showColumnRightBorder : !removeLastBorderRight && !extendRowFullWidth;

	  const ownerState = _extends({}, props, {
	    classes: rootProps.classes,
	    showRightBorder
	  });

	  const classes = useUtilityClasses$k(ownerState);
	  const publish = react.exports.useCallback(eventName => event => {
	    // Ignore portal
	    // See https://github.com/mui/mui-x/issues/1721
	    if (!event.currentTarget.contains(event.target)) {
	      return;
	    }

	    apiRef.current.publishEvent(eventName, apiRef.current.getColumnHeaderParams(column.field), event);
	  }, [apiRef, column.field]);
	  const mouseEventsHandlers = react.exports.useMemo(() => ({
	    onClick: publish('columnHeaderClick'),
	    onDoubleClick: publish('columnHeaderDoubleClick'),
	    onMouseOver: publish('columnHeaderOver'),
	    // TODO remove as it's not used
	    onMouseOut: publish('columnHeaderOut'),
	    // TODO remove as it's not used
	    onMouseEnter: publish('columnHeaderEnter'),
	    // TODO remove as it's not used
	    onMouseLeave: publish('columnHeaderLeave'),
	    // TODO remove as it's not used
	    onKeyDown: publish('columnHeaderKeyDown'),
	    onFocus: publish('columnHeaderFocus'),
	    onBlur: publish('columnHeaderBlur')
	  }), [publish]);
	  const draggableEventHandlers = react.exports.useMemo(() => isDraggable ? {
	    onDragStart: publish('columnHeaderDragStart'),
	    onDragEnter: publish('columnHeaderDragEnter'),
	    onDragOver: publish('columnHeaderDragOver'),
	    onDragEnd: publish('columnHeaderDragEnd')
	  } : {}, [isDraggable, publish]);
	  const columnHeaderSeparatorProps = react.exports.useMemo(() => ({
	    onMouseDown: publish('columnSeparatorMouseDown')
	  }), [publish]);
	  react.exports.useEffect(() => {
	    if (!showColumnMenuIcon) {
	      setShowColumnMenuIcon(columnMenuOpen);
	    }
	  }, [showColumnMenuIcon, columnMenuOpen]);
	  const handleExited = react.exports.useCallback(() => {
	    setShowColumnMenuIcon(false);
	  }, []);

	  const columnMenuIconButton = !rootProps.disableColumnMenu && !column.disableColumnMenu && /*#__PURE__*/jsxRuntime.exports.jsx(ColumnHeaderMenuIcon, {
	    column: column,
	    columnMenuId: columnMenuId,
	    columnMenuButtonId: columnMenuButtonId,
	    open: showColumnMenuIcon,
	    iconButtonRef: iconButtonRef
	  });

	  const columnMenu = /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeaderMenu, {
	    columnMenuId: columnMenuId,
	    columnMenuButtonId: columnMenuButtonId,
	    field: column.field,
	    open: columnMenuOpen,
	    target: iconButtonRef.current,
	    ContentComponent: rootProps.components.ColumnMenu,
	    contentComponentProps: (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.columnMenu,
	    onExited: handleExited
	  });

	  const sortingOrder = (_column$sortingOrder = column.sortingOrder) != null ? _column$sortingOrder : rootProps.sortingOrder;

	  const columnTitleIconButtons = /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [!rootProps.disableColumnFilter && /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.ColumnHeaderFilterIconButton, _extends({
	      field: column.field,
	      counter: filterItemsCounter
	    }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.columnHeaderFilterIconButton)), column.sortable && !column.hideSortIcons && /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeaderSortIcon, {
	      direction: sortDirection,
	      index: sortIndex,
	      sortingOrder: sortingOrder
	    })]
	  });

	  react.exports.useLayoutEffect(() => {
	    const columnMenuState = apiRef.current.state.columnMenu;

	    if (hasFocus && !columnMenuState.open) {
	      const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
	      const elementToFocus = focusableElement || headerCellRef.current;
	      elementToFocus == null ? void 0 : elementToFocus.focus();
	      apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
	    }
	  }, [apiRef, hasFocus]);
	  const headerClassName = typeof column.headerClassName === 'function' ? column.headerClassName({
	    field: column.field,
	    colDef: column
	  }) : column.headerClassName;
	  const label = (_column$headerName = column.headerName) != null ? _column$headerName : column.field;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridGenericColumnHeaderItem, _extends({
	    ref: headerCellRef,
	    classes: classes,
	    columnMenuOpen: columnMenuOpen,
	    colIndex: colIndex,
	    height: headerHeight,
	    isResizing: isResizing,
	    sortDirection: sortDirection,
	    hasFocus: hasFocus,
	    tabIndex: tabIndex,
	    separatorSide: separatorSide,
	    isDraggable: isDraggable,
	    headerComponent: headerComponent,
	    description: column.description,
	    elementId: column.field,
	    width: column.computedWidth,
	    columnMenuIconButton: columnMenuIconButton,
	    columnTitleIconButtons: columnTitleIconButtons,
	    headerClassName: headerClassName,
	    label: label,
	    resizable: !rootProps.disableColumnResize && !!column.resizable,
	    "data-field": column.field,
	    columnMenu: columnMenu,
	    draggableContainerProps: draggableEventHandlers,
	    columnHeaderSeparatorProps: columnHeaderSeparatorProps
	  }, mouseEventsHandlers));
	}

	const gridPreferencePanelStateSelector = state => state.preferencePanel;

	var GridPreferencePanelsValue;

	(function (GridPreferencePanelsValue) {
	  GridPreferencePanelsValue["filters"] = "filters";
	  GridPreferencePanelsValue["columns"] = "columns";
	})(GridPreferencePanelsValue || (GridPreferencePanelsValue = {}));

	const useUtilityClasses$j = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    icon: ['filterIcon']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	function GridColumnHeaderFilterIconButton(props) {
	  var _rootProps$components;

	  const {
	    counter,
	    field,
	    onClick
	  } = props;
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();

	  const ownerState = _extends({}, props, {
	    classes: rootProps.classes
	  });

	  const classes = useUtilityClasses$j(ownerState);
	  const toggleFilter = react.exports.useCallback(event => {
	    event.preventDefault();
	    event.stopPropagation();
	    const {
	      open,
	      openedPanelValue
	    } = gridPreferencePanelStateSelector(apiRef.current.state);

	    if (open && openedPanelValue === GridPreferencePanelsValue.filters) {
	      apiRef.current.hideFilterPanel();
	    } else {
	      apiRef.current.showFilterPanel();
	    }

	    if (onClick) {
	      onClick(apiRef.current.getColumnHeaderParams(field), event);
	    }
	  }, [apiRef, field, onClick]);

	  if (!counter) {
	    return null;
	  }

	  const iconButton = /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, {
	    onClick: toggleFilter,
	    color: "default",
	    "aria-label": apiRef.current.getLocaleText('columnHeaderFiltersLabel'),
	    size: "small",
	    tabIndex: -1,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.ColumnFilteredIcon, {
	      className: classes.icon,
	      fontSize: "small"
	    })
	  });

	  return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseTooltip, _extends({
	    title: apiRef.current.getLocaleText('columnHeaderFiltersTooltipActive')(counter),
	    enterDelay: 1000
	  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTooltip, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsxs(GridIconButtonContainer, {
	      children: [counter > 1 && /*#__PURE__*/jsxRuntime.exports.jsx(Badge$1, {
	        badgeContent: counter,
	        color: "default",
	        children: iconButton
	      }), counter === 1 && iconButton]
	    })
	  }));
	}

	const _excluded$y = ["field", "id", "value", "formattedValue", "row", "rowNode", "colDef", "isEditable", "cellMode", "hasFocus", "tabIndex", "getValue", "api"];

	const useUtilityClasses$i = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['checkboxInput']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridCellCheckboxForwardRef = /*#__PURE__*/react.exports.forwardRef(function GridCellCheckboxRenderer(props, ref) {
	  var _rootProps$components;

	  const {
	    field,
	    id,
	    value: isChecked,
	    rowNode,
	    hasFocus,
	    tabIndex
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$y);

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$i(ownerState);
	  const checkboxElement = react.exports.useRef(null);
	  const rippleRef = react.exports.useRef();
	  const handleRef = useForkRef(checkboxElement, ref);
	  const element = apiRef.current.getCellElement(id, field);

	  const handleChange = event => {
	    const params = {
	      value: event.target.checked,
	      id
	    };
	    apiRef.current.publishEvent('rowSelectionCheckboxChange', params, event);
	  };

	  react.exports.useLayoutEffect(() => {
	    if (tabIndex === 0 && element) {
	      element.tabIndex = -1;
	    }
	  }, [element, tabIndex]);
	  react.exports.useEffect(() => {
	    if (hasFocus) {
	      var _checkboxElement$curr;

	      const input = (_checkboxElement$curr = checkboxElement.current) == null ? void 0 : _checkboxElement$curr.querySelector('input');
	      input == null ? void 0 : input.focus({
	        preventScroll: true
	      });
	    } else if (rippleRef.current) {
	      // Only available in @mui/material v5.4.1 or later
	      rippleRef.current.stop({});
	    }
	  }, [hasFocus]);
	  const handleKeyDown = react.exports.useCallback(event => {
	    if (isSpaceKey(event.key)) {
	      event.stopPropagation();
	    }

	    if (isNavigationKey(event.key) && !event.shiftKey) {
	      apiRef.current.publishEvent('cellNavigationKeyDown', props, event);
	    }
	  }, [apiRef, props]);

	  if (rowNode.position === 'footer') {
	    return null;
	  }

	  const isSelectable = apiRef.current.isRowSelectable(id);
	  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectRow' : 'checkboxSelectionSelectRow');

	  if (rowNode.isPinned) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseCheckbox, _extends({
	    ref: handleRef,
	    tabIndex: tabIndex,
	    checked: isChecked,
	    onChange: handleChange,
	    className: classes.root,
	    inputProps: {
	      'aria-label': label
	    },
	    onKeyDown: handleKeyDown,
	    disabled: !isSelectable,
	    touchRippleRef: rippleRef
	  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox, other));
	});
	const GridCellCheckboxRenderer = GridCellCheckboxForwardRef;

	const gridSelectionStateSelector = state => state.selection;
	const selectedGridRowsCountSelector = createSelector(gridSelectionStateSelector, selection => selection.length);
	const selectedGridRowsSelector = createSelector(gridSelectionStateSelector, gridRowsLookupSelector, (selectedRows, rowsLookup) => new Map(selectedRows.map(id => [id, rowsLookup[id]])));
	const selectedIdsLookupSelector = createSelector(gridSelectionStateSelector, selection => selection.reduce((lookup, rowId) => {
	  lookup[rowId] = rowId;
	  return lookup;
	}, {}));

	/**
	 * @category Pagination
	 * @ignore - do not document.
	 */

	const gridPaginationSelector = state => state.pagination;
	/**
	 * Get the index of the page to render if the pagination is enabled
	 * @category Pagination
	 */

	const gridPageSelector = createSelector(gridPaginationSelector, pagination => pagination.page);
	/**
	 * Get the maximum amount of rows to display on a single page if the pagination is enabled
	 * @category Pagination
	 */

	const gridPageSizeSelector = createSelector(gridPaginationSelector, pagination => pagination.pageSize);
	/**
	 * Get the amount of pages needed to display all the rows if the pagination is enabled
	 * @category Pagination
	 */

	createSelector(gridPaginationSelector, pagination => pagination.pageCount);
	/**
	 * Get the index of the first and the last row to include in the current page if the pagination is enabled.
	 * @category Pagination
	 */

	const gridPaginationRowRangeSelector = createSelector(gridPaginationSelector, gridRowTreeSelector, gridRowTreeDepthSelector, gridVisibleSortedRowEntriesSelector, gridVisibleSortedTopLevelRowEntriesSelector, (pagination, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {
	  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;
	  const topLevelFirstRowIndex = Math.min(pagination.pageSize * pagination.page, visibleTopLevelRowCount - 1);
	  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + pagination.pageSize - 1, visibleTopLevelRowCount - 1); // The range contains no element

	  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {
	    return null;
	  } // The tree is flat, there is no need to look for children


	  if (rowTreeDepth < 2) {
	    return {
	      firstRowIndex: topLevelFirstRowIndex,
	      lastRowIndex: topLevelLastRowIndex
	    };
	  }

	  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];
	  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;
	  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);
	  let lastRowIndex = firstRowIndex;
	  let topLevelRowAdded = 0;

	  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {
	    const row = visibleSortedRowEntries[lastRowIndex];
	    const depth = rowTree[row.id].depth;

	    if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {
	      lastRowIndex += 1;
	    }

	    if (depth === 0) {
	      topLevelRowAdded += 1;
	    }
	  }

	  return {
	    firstRowIndex,
	    lastRowIndex: lastRowIndex - 1
	  };
	});
	/**
	 * Get the id and the model of each row to include in the current page if the pagination is enabled.
	 * @category Pagination
	 */

	const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelector(gridVisibleSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {
	  if (!paginationRange) {
	    return [];
	  }

	  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
	});
	/**
	 * Get the id of each row to include in the current page if the pagination is enabled.
	 * @category Pagination
	 */

	const gridPaginatedVisibleSortedGridRowIdsSelector = createSelector(gridVisibleSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {
	  if (!paginationRange) {
	    return [];
	  }

	  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
	});

	const _excluded$x = ["field", "colDef"];

	const useUtilityClasses$h = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['checkboxInput']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridHeaderCheckbox = /*#__PURE__*/react.exports.forwardRef(function GridHeaderCheckbox(props, ref) {
	  var _rootProps$components;

	  const other = _objectWithoutPropertiesLoose(props, _excluded$x);

	  const [, forceUpdate] = react.exports.useState(false);
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$h(ownerState);
	  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);
	  const selection = useGridSelector(apiRef, gridSelectionStateSelector);
	  const visibleRowIds = useGridSelector(apiRef, gridVisibleSortedRowIdsSelector);
	  const paginatedVisibleRowIds = useGridSelector(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);
	  const filteredSelection = react.exports.useMemo(() => {
	    if (typeof rootProps.isRowSelectable !== 'function') {
	      return selection;
	    }

	    return selection.filter(id => {
	      // The row might have been deleted
	      if (!apiRef.current.getRow(id)) {
	        return false;
	      }

	      return rootProps.isRowSelectable(apiRef.current.getRowParams(id));
	    });
	  }, [apiRef, rootProps.isRowSelectable, selection]); // All the rows that could be selected / unselected by toggling this checkbox

	  const selectionCandidates = react.exports.useMemo(() => {
	    const rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds; // Convert to an object to make O(1) checking if a row exists or not
	    // TODO create selector that returns visibleRowIds/paginatedVisibleRowIds as an object

	    return rowIds.reduce((acc, id) => {
	      acc[id] = true;
	      return acc;
	    }, {});
	  }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]); // Amount of rows selected and that are visible in the current page

	  const currentSelectionSize = react.exports.useMemo(() => filteredSelection.filter(id => selectionCandidates[id]).length, [filteredSelection, selectionCandidates]);
	  const isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;
	  const isChecked = currentSelectionSize > 0;

	  const handleChange = event => {
	    const params = {
	      value: event.target.checked
	    };
	    apiRef.current.publishEvent('headerSelectionCheckboxChange', params);
	  };

	  const tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;
	  react.exports.useLayoutEffect(() => {
	    const element = apiRef.current.getColumnHeaderElement(props.field);

	    if (tabIndex === 0 && element) {
	      element.tabIndex = -1;
	    }
	  }, [tabIndex, apiRef, props.field]);
	  const handleKeyDown = react.exports.useCallback(event => {
	    if (event.key === ' ') {
	      // imperative toggle the checkbox because Space is disable by some preventDefault
	      apiRef.current.publishEvent('headerSelectionCheckboxChange', {
	        value: !isChecked
	      });
	    } // TODO v6 remove columnHeaderNavigationKeyDown events which are not used internally anymore


	    if (isNavigationKey(event.key) && !event.shiftKey) {
	      apiRef.current.publishEvent('columnHeaderNavigationKeyDown', props, event);
	    }
	  }, [apiRef, props, isChecked]);
	  const handleSelectionChange = react.exports.useCallback(() => {
	    forceUpdate(p => !p);
	  }, []);
	  react.exports.useEffect(() => {
	    return apiRef.current.subscribeEvent('selectionChange', handleSelectionChange);
	  }, [apiRef, handleSelectionChange]);
	  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectAllRows' : 'checkboxSelectionSelectAllRows');
	  return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseCheckbox, _extends({
	    ref: ref,
	    indeterminate: isIndeterminate,
	    checked: isChecked,
	    onChange: handleChange,
	    className: classes.root,
	    inputProps: {
	      'aria-label': label
	    },
	    tabIndex: tabIndex,
	    onKeyDown: handleKeyDown
	  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox, other));
	});

	const GridColumnsMenuItem = props => {
	  const {
	    onClick
	  } = props;
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const showColumns = react.exports.useCallback(event => {
	    onClick(event);
	    apiRef.current.showPreferences(GridPreferencePanelsValue.columns);
	  }, [apiRef, onClick]);

	  if (rootProps.disableColumnSelector) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(MenuItem$1, {
	    onClick: showColumns,
	    children: apiRef.current.getLocaleText('columnMenuShowColumns')
	  });
	};

	const GridFilterMenuItem = props => {
	  const {
	    column,
	    onClick
	  } = props;
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const showFilter = react.exports.useCallback(event => {
	    onClick(event);
	    apiRef.current.showFilterPanel(column == null ? void 0 : column.field);
	  }, [apiRef, column == null ? void 0 : column.field, onClick]);

	  if (rootProps.disableColumnFilter || !(column != null && column.filterable)) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(MenuItem$1, {
	    onClick: showFilter,
	    children: apiRef.current.getLocaleText('columnMenuFilter')
	  });
	};

	const _excluded$w = ["hideMenu", "currentColumn", "open", "id", "labelledby", "className", "children"];
	const GridColumnMenuContainer = /*#__PURE__*/react.exports.forwardRef(function GridColumnMenuContainer(props, ref) {
	  const {
	    hideMenu,
	    open,
	    id,
	    labelledby,
	    className,
	    children
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$w);

	  const handleListKeyDown = react.exports.useCallback(event => {
	    if (isTabKey(event.key)) {
	      event.preventDefault();
	    }

	    if (isHideMenuKey(event.key)) {
	      hideMenu(event);
	    }
	  }, [hideMenu]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(MenuList$1, _extends({
	    id: id,
	    ref: ref,
	    className: clsx(gridClasses.menuList, className),
	    "aria-labelledby": labelledby,
	    onKeyDown: handleListKeyDown,
	    autoFocus: open
	  }, other, {
	    children: children
	  }));
	});

	const sortModelDisableMultiColumnsSortingWarning = buildWarning(['MUI: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');
	const sanitizeSortModel = (model, disableMultipleColumnsSorting) => {
	  if (disableMultipleColumnsSorting && model.length > 1) {
	    sortModelDisableMultiColumnsSortingWarning();
	    return [model[0]];
	  }

	  return model;
	};
	const mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting) => state => _extends({}, state, {
	  sorting: _extends({}, state.sorting, {
	    sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)
	  })
	});

	const isDesc = direction => direction === 'desc';
	/**
	 * Transform an item of the sorting model into a method comparing two rows.
	 * @param {GridSortItem} sortItem The sort item we want to apply.
	 * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.
	 * @returns {GridParsedSortItem | null} The parsed sort item. Returns `null` is the sort item is not valid.
	 */


	const parseSortItem = (sortItem, apiRef) => {
	  const column = apiRef.current.getColumn(sortItem.field);

	  if (!column) {
	    return null;
	  }

	  const comparator = isDesc(sortItem.sort) ? (...args) => -1 * column.sortComparator(...args) : column.sortComparator;

	  const getSortCellParams = id => ({
	    id,
	    field: column.field,
	    rowNode: apiRef.current.getRowNode(id),
	    value: apiRef.current.getCellValue(id, column.field),
	    api: apiRef.current
	  });

	  return {
	    getSortCellParams,
	    comparator
	  };
	};

	/**
	 * Compare two rows according to a list of valid sort items.
	 * The `row1Params` and `row2Params` must have the same length as `parsedSortItems`,
	 * and each of their index must contain the `GridSortCellParams` of the sort item with the same index.
	 * @param {GridParsedSortItem[]} parsedSortItems All the sort items with which we want to compare the rows.
	 * @param {GridRowAggregatedSortingParams} row1 The node and params of the 1st row for each sort item.
	 * @param {GridRowAggregatedSortingParams} row2 The node and params of the 2nd row for each sort item.
	 */
	const compareRows = (parsedSortItems, row1, row2) => {
	  return parsedSortItems.reduce((res, item, index) => {
	    if (res !== 0) {
	      // return the results of the first comparator which distinguish the two rows
	      return res;
	    }

	    const sortCellParams1 = row1.params[index];
	    const sortCellParams2 = row2.params[index];
	    res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);
	    return res;
	  }, 0);
	};
	/**
	 * Generates a method to easily sort a list of rows according to the current sort model.
	 * @param {GridSortModel} sortModel The model with which we want to sort the rows.
	 * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.
	 * @returns {GridSortingModelApplier | null} A method that generates a list of sorted row ids from a list of rows according to the current sort model. If `null`, we consider that the rows should remain in the order there were provided.
	 */


	const buildAggregatedSortingApplier = (sortModel, apiRef) => {
	  const comparatorList = sortModel.map(item => parseSortItem(item, apiRef)).filter(comparator => !!comparator);

	  if (comparatorList.length === 0) {
	    return null;
	  }

	  return rowList => rowList.map(node => ({
	    node,
	    params: comparatorList.map(el => el.getSortCellParams(node.id))
	  })).sort((a, b) => compareRows(comparatorList, a, b)).map(row => row.node.id);
	};
	const getNextGridSortDirection = (sortingOrder, current) => {
	  const currentIdx = sortingOrder.indexOf(current);

	  if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {
	    return sortingOrder[0];
	  }

	  return sortingOrder[currentIdx + 1];
	};

	const gridNillComparator = (v1, v2) => {
	  if (v1 == null && v2 != null) {
	    return -1;
	  }

	  if (v2 == null && v1 != null) {
	    return 1;
	  }

	  if (v1 == null && v2 == null) {
	    return 0;
	  }

	  return null;
	};

	const collator$2 = new Intl.Collator();
	const gridStringOrNumberComparator = (value1, value2) => {
	  const nillResult = gridNillComparator(value1, value2);

	  if (nillResult !== null) {
	    return nillResult;
	  }

	  if (typeof value1 === 'string') {
	    return collator$2.compare(value1.toString(), value2.toString());
	  }

	  return value1 - value2;
	};
	const gridNumberComparator = (value1, value2) => {
	  const nillResult = gridNillComparator(value1, value2);

	  if (nillResult !== null) {
	    return nillResult;
	  }

	  return Number(value1) - Number(value2);
	};
	const gridDateComparator = (value1, value2) => {
	  const nillResult = gridNillComparator(value1, value2);

	  if (nillResult !== null) {
	    return nillResult;
	  }

	  if (value1 > value2) {
	    return 1;
	  }

	  if (value1 < value2) {
	    return -1;
	  }

	  return 0;
	};

	function isNumber(value) {
	  return typeof value === 'number';
	}
	function isFunction(value) {
	  return typeof value === 'function';
	}
	function localStorageAvailable() {
	  try {
	    // Incognito mode might reject access to the localStorage for security reasons.
	    // window isn't defined on Node.js
	    // https://stackoverflow.com/questions/16427636/check-if-localstorage-is-available
	    const key = '__some_random_key_you_are_not_going_to_use__';
	    window.localStorage.setItem(key, key);
	    window.localStorage.removeItem(key);
	    return true;
	  } catch (err) {
	    return false;
	  }
	}
	function escapeRegExp(value) {
	  return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
	}
	/**
	 * Follows the CSS specification behavior for min and max
	 * If min > max, then the min have priority
	 */

	const clamp = (value, min, max) => Math.max(min, Math.min(max, value));
	/**
	 * Based on `fast-deep-equal`
	 *
	 *  MIT License
	 *
	 * Copyright (c) 2017 Evgeny Poberezkin
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 * We only type the public interface to avoid dozens of `as` in the function.
	 */

	function isDeepEqual(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (a && b && typeof a === 'object' && typeof b === 'object') {
	    if (a.constructor !== b.constructor) {
	      return false;
	    }

	    if (Array.isArray(a)) {
	      const length = a.length;

	      if (length !== b.length) {
	        return false;
	      }

	      for (let i = 0; i < length; i += 1) {
	        if (!isDeepEqual(a[i], b[i])) {
	          return false;
	        }
	      }

	      return true;
	    }

	    if (a instanceof Map && b instanceof Map) {
	      if (a.size !== b.size) {
	        return false;
	      }

	      const entriesA = Array.from(a.entries());

	      for (let i = 0; i < entriesA.length; i += 1) {
	        if (!b.has(entriesA[i][0])) {
	          return false;
	        }
	      }

	      for (let i = 0; i < entriesA.length; i += 1) {
	        const entryA = entriesA[i];

	        if (!isDeepEqual(entryA[1], b.get(entryA[0]))) {
	          return false;
	        }
	      }

	      return true;
	    }

	    if (a instanceof Set && b instanceof Set) {
	      if (a.size !== b.size) {
	        return false;
	      }

	      const entries = Array.from(a.entries());

	      for (let i = 0; i < entries.length; i += 1) {
	        if (!b.has(entries[i][0])) {
	          return false;
	        }
	      }

	      return true;
	    }

	    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
	      const length = a.length;

	      if (length !== b.length) {
	        return false;
	      }

	      for (let i = 0; i < length; i += 1) {
	        if (a[i] !== b[i]) {
	          return false;
	        }
	      }

	      return true;
	    }

	    if (a.constructor === RegExp) {
	      return a.source === b.source && a.flags === b.flags;
	    }

	    if (a.valueOf !== Object.prototype.valueOf) {
	      return a.valueOf() === b.valueOf();
	    }

	    if (a.toString !== Object.prototype.toString) {
	      return a.toString() === b.toString();
	    }

	    const keys = Object.keys(a);
	    const length = keys.length;

	    if (length !== Object.keys(b).length) {
	      return false;
	    }

	    for (let i = 0; i < length; i += 1) {
	      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {
	        return false;
	      }
	    }

	    for (let i = 0; i < length; i += 1) {
	      const key = keys[i];

	      if (!isDeepEqual(a[key], b[key])) {
	        return false;
	      }
	    }

	    return true;
	  } // true if both NaN, false otherwise
	  // eslint-disable-next-line no-self-compare


	  return a !== a && b !== b;
	} // Pseudo random number. See https://stackoverflow.com/a/47593316

	function mulberry32(a) {
	  return () => {
	    /* eslint-disable */
	    let t = a += 0x6d2b79f5;
	    t = Math.imul(t ^ t >>> 15, t | 1);
	    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
	    return ((t ^ t >>> 14) >>> 0) / 4294967296;
	    /* eslint-enable */
	  };
	}

	function randomNumberBetween(seed, min, max) {
	  const random = mulberry32(seed);
	  return () => min + (max - min) * random();
	}
	function deepClone(obj) {
	  if (typeof structuredClone === 'function') {
	    return structuredClone(obj);
	  }

	  return JSON.parse(JSON.stringify(obj));
	}

	const _excluded$v = ["item", "applyValue", "type", "apiRef", "focusElementRef", "color", "error", "helperText", "size", "variant"];

	function GridFilterInputMultipleValue(props) {
	  const {
	    item,
	    applyValue,
	    type,
	    apiRef,
	    focusElementRef,
	    color,
	    error,
	    helperText,
	    size,
	    variant
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$v);

	  const TextFieldProps = {
	    color,
	    error,
	    helperText,
	    size,
	    variant
	  };
	  const [filterValueState, setFilterValueState] = react.exports.useState(item.value || []);
	  const id = useId();
	  const rootProps = useGridRootProps();
	  react.exports.useEffect(() => {
	    var _item$value;

	    const itemValue = (_item$value = item.value) != null ? _item$value : [];
	    setFilterValueState(itemValue.map(String));
	  }, [item.value]);
	  const handleChange = react.exports.useCallback((event, value) => {
	    setFilterValueState(value.map(String));
	    applyValue(_extends({}, item, {
	      value: [...value]
	    }));
	  }, [applyValue, item]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Autocomplete$1, _extends({
	    multiple: true,
	    freeSolo: true,
	    limitTags: 1,
	    options: [],
	    filterOptions: (options, params) => {
	      const {
	        inputValue
	      } = params;
	      return inputValue == null || inputValue === '' ? [] : [inputValue];
	    },
	    id: id,
	    value: filterValueState,
	    onChange: handleChange,
	    renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/jsxRuntime.exports.jsx(Chip$1, _extends({
	      variant: "outlined",
	      size: "small",
	      label: option
	    }, getTagProps({
	      index
	    })))),
	    renderInput: params => {
	      var _rootProps$components;

	      return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseTextField, _extends({}, params, {
	        label: apiRef.current.getLocaleText('filterPanelInputLabel'),
	        placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),
	        InputLabelProps: _extends({}, params.InputLabelProps, {
	          shrink: true
	        }),
	        inputRef: focusElementRef,
	        type: type || 'text'
	      }, TextFieldProps, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));
	    }
	  }, other));
	}

	const getGridStringQuickFilterFn = value => {
	  if (!value) {
	    return null;
	  }

	  const filterRegex = new RegExp(escapeRegExp(value), 'i');
	  return ({
	    value: columnValue
	  }) => {
	    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;
	  };
	};
	const getGridStringOperators = (disableTrim = false) => [{
	  value: 'contains',
	  getApplyFilterFn: filterItem => {
	    if (!filterItem.value) {
	      return null;
	    }

	    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
	    const filterRegex = new RegExp(escapeRegExp(filterItemValue), 'i');
	    return ({
	      value
	    }) => {
	      return value != null ? filterRegex.test(value.toString()) : false;
	    };
	  },
	  InputComponent: GridFilterInputValue
	}, {
	  value: 'equals',
	  getApplyFilterFn: filterItem => {
	    if (!filterItem.value) {
	      return null;
	    }

	    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
	    const collator = new Intl.Collator(undefined, {
	      sensitivity: 'base',
	      usage: 'search'
	    });
	    return ({
	      value
	    }) => {
	      return value != null ? collator.compare(filterItemValue, value.toString()) === 0 : false;
	    };
	  },
	  InputComponent: GridFilterInputValue
	}, {
	  value: 'startsWith',
	  getApplyFilterFn: filterItem => {
	    if (!filterItem.value) {
	      return null;
	    }

	    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
	    const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, 'i');
	    return ({
	      value
	    }) => {
	      return value != null ? filterRegex.test(value.toString()) : false;
	    };
	  },
	  InputComponent: GridFilterInputValue
	}, {
	  value: 'endsWith',
	  getApplyFilterFn: filterItem => {
	    if (!filterItem.value) {
	      return null;
	    }

	    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
	    const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, 'i');
	    return ({
	      value
	    }) => {
	      return value != null ? filterRegex.test(value.toString()) : false;
	    };
	  },
	  InputComponent: GridFilterInputValue
	}, {
	  value: 'isEmpty',
	  getApplyFilterFn: () => {
	    return ({
	      value
	    }) => {
	      return value === '' || value == null;
	    };
	  },
	  requiresFilterValue: false
	}, {
	  value: 'isNotEmpty',
	  getApplyFilterFn: () => {
	    return ({
	      value
	    }) => {
	      return value !== '' && value != null;
	    };
	  },
	  requiresFilterValue: false
	}, {
	  value: 'isAnyOf',
	  getApplyFilterFn: filterItem => {
	    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
	      return null;
	    }

	    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map(val => val.trim());
	    const collator = new Intl.Collator(undefined, {
	      sensitivity: 'base',
	      usage: 'search'
	    });
	    return ({
	      value
	    }) => value != null ? filterItemValue.some(filterValue => {
	      return collator.compare(filterValue, value.toString() || '') === 0;
	    }) : false;
	  },
	  InputComponent: GridFilterInputMultipleValue
	}];

	/**
	 * TODO: Move pro and premium properties outside of this Community file
	 */

	const GRID_STRING_COL_DEF = {
	  width: 100,
	  minWidth: 50,
	  maxWidth: Infinity,
	  hide: false,
	  hideable: true,
	  sortable: true,
	  resizable: true,
	  filterable: true,
	  groupable: true,
	  pinnable: true,
	  // @ts-ignore
	  aggregable: true,
	  editable: false,
	  sortComparator: gridStringOrNumberComparator,
	  type: 'string',
	  align: 'left',
	  filterOperators: getGridStringOperators(),
	  renderEditCell: renderEditInputCell,
	  getApplyQuickFilterFn: getGridStringQuickFilterFn
	};

	const GRID_ACTIONS_COLUMN_TYPE = 'actions';
	const GRID_ACTIONS_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
	  sortable: false,
	  filterable: false,
	  // @ts-ignore
	  aggregable: false,
	  width: 100,
	  align: 'center',
	  headerAlign: 'center',
	  headerName: '',
	  disableColumnMenu: true,
	  disableExport: true,
	  renderCell: renderActionsCell,
	  getApplyQuickFilterFn: undefined
	});

	const _excluded$u = ["item", "applyValue", "apiRef", "focusElementRef"];
	function GridFilterInputBoolean(props) {
	  var _rootProps$components, _baseSelectProps$nati, _rootProps$components2, _rootProps$components3;

	  const {
	    item,
	    applyValue,
	    apiRef,
	    focusElementRef
	  } = props,
	        others = _objectWithoutPropertiesLoose(props, _excluded$u);

	  const [filterValueState, setFilterValueState] = react.exports.useState(item.value || '');
	  const rootProps = useGridRootProps();
	  const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};
	  const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
	  const OptionComponent = isSelectNative ? 'option' : MenuItem$1;
	  const onFilterChange = react.exports.useCallback(event => {
	    const value = event.target.value;
	    setFilterValueState(value);
	    applyValue(_extends({}, item, {
	      value
	    }));
	  }, [applyValue, item]);
	  react.exports.useEffect(() => {
	    setFilterValueState(item.value || '');
	  }, [item.value]);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(rootProps.components.BaseTextField, _extends({
	    label: apiRef.current.getLocaleText('filterPanelInputLabel'),
	    value: filterValueState,
	    onChange: onFilterChange,
	    select: true,
	    variant: "standard",
	    SelectProps: _extends({
	      native: isSelectNative,
	      displayEmpty: true
	    }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect),
	    InputLabelProps: {
	      shrink: true
	    },
	    inputRef: focusElementRef
	  }, others, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseTextField, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(OptionComponent, {
	      value: "",
	      children: apiRef.current.getLocaleText('filterValueAny')
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(OptionComponent, {
	      value: "true",
	      children: apiRef.current.getLocaleText('filterValueTrue')
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(OptionComponent, {
	      value: "false",
	      children: apiRef.current.getLocaleText('filterValueFalse')
	    })]
	  }));
	}

	const getGridBooleanOperators = () => [{
	  value: 'is',
	  getApplyFilterFn: filterItem => {
	    if (!filterItem.value) {
	      return null;
	    }

	    const valueAsBoolean = filterItem.value === 'true';
	    return ({
	      value
	    }) => {
	      return Boolean(value) === valueAsBoolean;
	    };
	  },
	  InputComponent: GridFilterInputBoolean
	}];

	function gridBooleanFormatter({
	  value,
	  api
	}) {
	  return value ? api.getLocaleText('booleanCellTrueLabel') : api.getLocaleText('booleanCellFalseLabel');
	}

	const GRID_BOOLEAN_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
	  type: 'boolean',
	  align: 'center',
	  headerAlign: 'center',
	  renderCell: renderBooleanCell,
	  renderEditCell: renderEditBooleanCell,
	  sortComparator: gridNumberComparator,
	  valueFormatter: gridBooleanFormatter,
	  filterOperators: getGridBooleanOperators(),
	  getApplyQuickFilterFn: undefined,
	  // @ts-ignore
	  aggregable: false
	});

	const GRID_CHECKBOX_SELECTION_FIELD = '__check__';
	const GRID_CHECKBOX_SELECTION_COL_DEF = _extends({}, GRID_BOOLEAN_COL_DEF, {
	  field: GRID_CHECKBOX_SELECTION_FIELD,
	  type: 'checkboxSelection',
	  width: 50,
	  resizable: false,
	  sortable: false,
	  filterable: false,
	  // @ts-ignore
	  aggregable: false,
	  disableColumnMenu: true,
	  disableReorder: true,
	  disableExport: true,
	  getApplyQuickFilterFn: undefined,
	  valueGetter: params => {
	    const selectionLookup = selectedIdsLookupSelector(params.api.state, params.api.instanceId);
	    return selectionLookup[params.id] !== undefined;
	  },
	  renderHeader: params => /*#__PURE__*/jsxRuntime.exports.jsx(GridHeaderCheckbox, _extends({}, params)),
	  renderCell: params => /*#__PURE__*/jsxRuntime.exports.jsx(GridCellCheckboxRenderer, _extends({}, params))
	});

	const _excluded$t = ["item", "applyValue", "type", "apiRef", "focusElementRef", "InputProps"];
	const SUBMIT_FILTER_DATE_STROKE_TIME = 500;

	function GridFilterInputDate(props) {
	  var _item$value, _rootProps$components;

	  const {
	    item,
	    applyValue,
	    type,
	    apiRef,
	    focusElementRef,
	    InputProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$t);

	  const filterTimeout = react.exports.useRef();
	  const [filterValueState, setFilterValueState] = react.exports.useState((_item$value = item.value) != null ? _item$value : '');
	  const [applying, setIsApplying] = react.exports.useState(false);
	  const id = useId();
	  const rootProps = useGridRootProps();
	  const onFilterChange = react.exports.useCallback(event => {
	    const value = event.target.value;
	    clearTimeout(filterTimeout.current);
	    setFilterValueState(String(value));
	    setIsApplying(true);
	    filterTimeout.current = setTimeout(() => {
	      applyValue(_extends({}, item, {
	        value
	      }));
	      setIsApplying(false);
	    }, SUBMIT_FILTER_DATE_STROKE_TIME);
	  }, [applyValue, item]);
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(filterTimeout.current);
	    };
	  }, []);
	  react.exports.useEffect(() => {
	    var _item$value2;

	    const itemValue = (_item$value2 = item.value) != null ? _item$value2 : '';
	    setFilterValueState(String(itemValue));
	  }, [item.value]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseTextField, _extends({
	    id: id,
	    label: apiRef.current.getLocaleText('filterPanelInputLabel'),
	    placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),
	    value: filterValueState,
	    onChange: onFilterChange,
	    variant: "standard",
	    type: type || 'text',
	    InputLabelProps: {
	      shrink: true
	    },
	    inputRef: focusElementRef,
	    InputProps: _extends({}, applying ? {
	      endAdornment: /*#__PURE__*/jsxRuntime.exports.jsx(GridLoadIcon, {})
	    } : {}, InputProps, {
	      inputProps: _extends({
	        max: type === 'datetime-local' ? '9999-12-31T23:59' : '9999-12-31'
	      }, InputProps == null ? void 0 : InputProps.inputProps)
	    })
	  }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));
	}

	const dateRegex = /(\d+)-(\d+)-(\d+)/;
	const dateTimeRegex = /(\d+)-(\d+)-(\d+)T(\d+):(\d+)/;

	function buildApplyFilterFn(filterItem, compareFn, showTime, keepHours) {
	  if (!filterItem.value) {
	    return null;
	  }

	  const [year, month, day, hour, minute] = filterItem.value.match(showTime ? dateTimeRegex : dateRegex).slice(1).map(Number);
	  const time = new Date(year, month - 1, day, hour || 0, minute || 0).getTime();
	  return ({
	    value
	  }) => {
	    if (!value) {
	      return false;
	    }

	    const valueAsDate = value instanceof Date ? value : new Date(value.toString());

	    if (keepHours) {
	      return compareFn(valueAsDate.getTime(), time);
	    } // Make a copy of the date to not reset the hours in the original object


	    const dateCopy = value instanceof Date ? new Date(valueAsDate) : valueAsDate;
	    const timeToCompare = dateCopy.setHours(showTime ? valueAsDate.getHours() : 0, showTime ? valueAsDate.getMinutes() : 0, 0, 0);
	    return compareFn(timeToCompare, time);
	  };
	}

	const getGridDateOperators = showTime => [{
	  value: 'is',
	  getApplyFilterFn: filterItem => {
	    return buildApplyFilterFn(filterItem, (value1, value2) => value1 === value2, showTime);
	  },
	  InputComponent: GridFilterInputDate,
	  InputComponentProps: {
	    type: showTime ? 'datetime-local' : 'date'
	  }
	}, {
	  value: 'not',
	  getApplyFilterFn: filterItem => {
	    return buildApplyFilterFn(filterItem, (value1, value2) => value1 !== value2, showTime);
	  },
	  InputComponent: GridFilterInputDate,
	  InputComponentProps: {
	    type: showTime ? 'datetime-local' : 'date'
	  }
	}, {
	  value: 'after',
	  getApplyFilterFn: filterItem => {
	    return buildApplyFilterFn(filterItem, (value1, value2) => value1 > value2, showTime);
	  },
	  InputComponent: GridFilterInputDate,
	  InputComponentProps: {
	    type: showTime ? 'datetime-local' : 'date'
	  }
	}, {
	  value: 'onOrAfter',
	  getApplyFilterFn: filterItem => {
	    return buildApplyFilterFn(filterItem, (value1, value2) => value1 >= value2, showTime);
	  },
	  InputComponent: GridFilterInputDate,
	  InputComponentProps: {
	    type: showTime ? 'datetime-local' : 'date'
	  }
	}, {
	  value: 'before',
	  getApplyFilterFn: filterItem => {
	    return buildApplyFilterFn(filterItem, (value1, value2) => value1 < value2, showTime, !showTime);
	  },
	  InputComponent: GridFilterInputDate,
	  InputComponentProps: {
	    type: showTime ? 'datetime-local' : 'date'
	  }
	}, {
	  value: 'onOrBefore',
	  getApplyFilterFn: filterItem => {
	    return buildApplyFilterFn(filterItem, (value1, value2) => value1 <= value2, showTime);
	  },
	  InputComponent: GridFilterInputDate,
	  InputComponentProps: {
	    type: showTime ? 'datetime-local' : 'date'
	  }
	}, {
	  value: 'isEmpty',
	  getApplyFilterFn: () => {
	    return ({
	      value
	    }) => {
	      return value == null;
	    };
	  },
	  requiresFilterValue: false
	}, {
	  value: 'isNotEmpty',
	  getApplyFilterFn: () => {
	    return ({
	      value
	    }) => {
	      return value != null;
	    };
	  },
	  requiresFilterValue: false
	}];

	function gridDateFormatter({
	  value
	}) {
	  if (value instanceof Date) {
	    return value.toLocaleDateString();
	  }

	  return value != null ? value : '';
	}
	function gridDateTimeFormatter({
	  value
	}) {
	  if (value instanceof Date) {
	    return value.toLocaleString();
	  }

	  return value != null ? value : '';
	}
	const GRID_DATE_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
	  type: 'date',
	  sortComparator: gridDateComparator,
	  valueFormatter: gridDateFormatter,
	  filterOperators: getGridDateOperators(),
	  renderEditCell: renderEditDateCell,
	  getApplyQuickFilterFn: undefined
	});
	const GRID_DATETIME_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
	  type: 'dateTime',
	  sortComparator: gridDateComparator,
	  valueFormatter: gridDateTimeFormatter,
	  filterOperators: getGridDateOperators(true),
	  renderEditCell: renderEditDateCell,
	  getApplyQuickFilterFn: undefined
	});

	const parseNumericValue = value => {
	  if (value == null) {
	    return null;
	  }

	  return Number(value);
	};

	const getGridNumericQuickFilterFn = value => {
	  if (value == null || Number.isNaN(value) || value === '') {
	    return null;
	  }

	  return ({
	    value: columnValue
	  }) => {
	    return parseNumericValue(columnValue) === parseNumericValue(value);
	  };
	};
	const getGridNumericOperators = () => [{
	  label: '=',
	  value: '=',
	  getApplyFilterFn: filterItem => {
	    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
	      return null;
	    }

	    return ({
	      value
	    }) => {
	      return parseNumericValue(value) === filterItem.value;
	    };
	  },
	  InputComponent: GridFilterInputValue,
	  InputComponentProps: {
	    type: 'number'
	  }
	}, {
	  label: '!=',
	  value: '!=',
	  getApplyFilterFn: filterItem => {
	    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
	      return null;
	    }

	    return ({
	      value
	    }) => {
	      return parseNumericValue(value) !== filterItem.value;
	    };
	  },
	  InputComponent: GridFilterInputValue,
	  InputComponentProps: {
	    type: 'number'
	  }
	}, {
	  label: '>',
	  value: '>',
	  getApplyFilterFn: filterItem => {
	    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
	      return null;
	    }

	    return ({
	      value
	    }) => {
	      if (value == null) {
	        return false;
	      }

	      return parseNumericValue(value) > filterItem.value;
	    };
	  },
	  InputComponent: GridFilterInputValue,
	  InputComponentProps: {
	    type: 'number'
	  }
	}, {
	  label: '>=',
	  value: '>=',
	  getApplyFilterFn: filterItem => {
	    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
	      return null;
	    }

	    return ({
	      value
	    }) => {
	      if (value == null) {
	        return false;
	      }

	      return parseNumericValue(value) >= filterItem.value;
	    };
	  },
	  InputComponent: GridFilterInputValue,
	  InputComponentProps: {
	    type: 'number'
	  }
	}, {
	  label: '<',
	  value: '<',
	  getApplyFilterFn: filterItem => {
	    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
	      return null;
	    }

	    return ({
	      value
	    }) => {
	      if (value == null) {
	        return false;
	      }

	      return parseNumericValue(value) < filterItem.value;
	    };
	  },
	  InputComponent: GridFilterInputValue,
	  InputComponentProps: {
	    type: 'number'
	  }
	}, {
	  label: '<=',
	  value: '<=',
	  getApplyFilterFn: filterItem => {
	    if (filterItem.value == null || Number.isNaN(filterItem.value)) {
	      return null;
	    }

	    return ({
	      value
	    }) => {
	      if (value == null) {
	        return false;
	      }

	      return parseNumericValue(value) <= filterItem.value;
	    };
	  },
	  InputComponent: GridFilterInputValue,
	  InputComponentProps: {
	    type: 'number'
	  }
	}, {
	  value: 'isEmpty',
	  getApplyFilterFn: () => {
	    return ({
	      value
	    }) => {
	      return value == null;
	    };
	  },
	  requiresFilterValue: false
	}, {
	  value: 'isNotEmpty',
	  getApplyFilterFn: () => {
	    return ({
	      value
	    }) => {
	      return value != null;
	    };
	  },
	  requiresFilterValue: false
	}, {
	  value: 'isAnyOf',
	  getApplyFilterFn: filterItem => {
	    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
	      return null;
	    }

	    return ({
	      value
	    }) => {
	      return value != null && filterItem.value.includes(Number(value));
	    };
	  },
	  InputComponent: GridFilterInputMultipleValue,
	  InputComponentProps: {
	    type: 'number'
	  }
	}];

	const GRID_NUMERIC_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
	  type: 'number',
	  align: 'right',
	  headerAlign: 'right',
	  sortComparator: gridNumberComparator,
	  valueParser: value => value === '' ? null : Number(value),
	  valueFormatter: ({
	    value
	  }) => isNumber(value) ? value.toLocaleString() : value || '',
	  filterOperators: getGridNumericOperators(),
	  getApplyQuickFilterFn: getGridNumericQuickFilterFn
	});

	const _excluded$s = ["item", "applyValue", "type", "apiRef", "focusElementRef"];

	const renderSingleSelectOptions = ({
	  valueOptions,
	  valueFormatter,
	  field
	}, api, OptionComponent) => {
	  const iterableColumnValues = typeof valueOptions === 'function' ? ['', ...valueOptions({
	    field
	  })] : ['', ...(valueOptions || [])];
	  return iterableColumnValues.map(option => {
	    const isOptionTypeObject = typeof option === 'object';
	    const key = isOptionTypeObject ? option.value : option;
	    const value = isOptionTypeObject ? option.value : option;
	    const formattedValue = valueFormatter && option !== '' ? valueFormatter({
	      value: option,
	      field,
	      api
	    }) : option;
	    const content = isOptionTypeObject ? option.label : formattedValue;
	    return /*#__PURE__*/jsxRuntime.exports.jsx(OptionComponent, {
	      value: value,
	      children: content
	    }, key);
	  });
	};

	function GridFilterInputSingleSelect(props) {
	  var _item$value, _rootProps$components, _baseSelectProps$nati, _rootProps$components2, _rootProps$components3;

	  const {
	    item,
	    applyValue,
	    type,
	    apiRef,
	    focusElementRef
	  } = props,
	        others = _objectWithoutPropertiesLoose(props, _excluded$s);

	  const [filterValueState, setFilterValueState] = react.exports.useState((_item$value = item.value) != null ? _item$value : '');
	  const id = useId();
	  const rootProps = useGridRootProps();
	  const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};
	  const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
	  const currentColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;
	  const currentValueOptions = react.exports.useMemo(() => {
	    if (currentColumn === null) {
	      return undefined;
	    }

	    return typeof currentColumn.valueOptions === 'function' ? currentColumn.valueOptions({
	      field: currentColumn.field
	    }) : currentColumn.valueOptions;
	  }, [currentColumn]);
	  const onFilterChange = react.exports.useCallback(event => {
	    let value = event.target.value; // NativeSelect casts the value to a string.

	    value = getValueFromValueOptions(value, currentValueOptions);
	    setFilterValueState(String(value));
	    applyValue(_extends({}, item, {
	      value
	    }));
	  }, [applyValue, item, currentValueOptions]);
	  react.exports.useEffect(() => {
	    var _itemValue;

	    let itemValue;

	    if (currentValueOptions !== undefined) {
	      // sanitize if valueOptions are provided
	      itemValue = getValueFromValueOptions(item.value, currentValueOptions);

	      if (itemValue !== item.value) {
	        applyValue(_extends({}, item, {
	          value: itemValue
	        }));
	        return;
	      }
	    } else {
	      itemValue = item.value;
	    }

	    itemValue = (_itemValue = itemValue) != null ? _itemValue : '';
	    setFilterValueState(String(itemValue));
	  }, [item, currentValueOptions, applyValue]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseTextField, _extends({
	    id: id,
	    label: apiRef.current.getLocaleText('filterPanelInputLabel'),
	    placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),
	    value: filterValueState,
	    onChange: onFilterChange,
	    variant: "standard",
	    type: type || 'text',
	    InputLabelProps: {
	      shrink: true
	    },
	    inputRef: focusElementRef,
	    select: true,
	    SelectProps: _extends({
	      native: isSelectNative
	    }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect)
	  }, others, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseTextField, {
	    children: renderSingleSelectOptions(apiRef.current.getColumn(item.columnField), apiRef.current, isSelectNative ? 'option' : MenuItem$1)
	  }));
	}

	const _excluded$r = ["item", "applyValue", "type", "apiRef", "focusElementRef", "color", "error", "helperText", "size", "variant"];

	const isOptionEqualToValue = (option, value) => getValueFromOption(option) === getValueFromOption(value);

	const filter = createFilterOptions();

	function GridFilterInputMultipleSingleSelect(props) {
	  const {
	    item,
	    applyValue,
	    apiRef,
	    focusElementRef,
	    color,
	    error,
	    helperText,
	    size,
	    variant = 'standard'
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$r);

	  const TextFieldProps = {
	    color,
	    error,
	    helperText,
	    size,
	    variant
	  };
	  const id = useId();
	  const rootProps = useGridRootProps();
	  const resolvedColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;
	  const resolvedValueOptions = react.exports.useMemo(() => {
	    if (!(resolvedColumn != null && resolvedColumn.valueOptions)) {
	      return [];
	    }

	    if (typeof resolvedColumn.valueOptions === 'function') {
	      return resolvedColumn.valueOptions({
	        field: resolvedColumn.field
	      });
	    }

	    return resolvedColumn.valueOptions;
	  }, [resolvedColumn]);
	  const resolvedFormattedValueOptions = react.exports.useMemo(() => {
	    return resolvedValueOptions == null ? void 0 : resolvedValueOptions.map(getValueFromOption);
	  }, [resolvedValueOptions]);
	  const {
	    valueFormatter,
	    field
	  } = apiRef.current.getColumn(item.columnField);

	  const filterValueOptionFormatter = option => {
	    if (typeof option === 'object') {
	      return option.label;
	    }

	    return valueFormatter && option !== '' ? valueFormatter({
	      value: option,
	      field,
	      api: apiRef.current
	    }) : option;
	  }; // The value is computed from the item.value and used directly
	  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options


	  const filterValues = react.exports.useMemo(() => {
	    if (!Array.isArray(item.value)) {
	      return [];
	    }

	    if (resolvedValueOptions !== undefined) {
	      const itemValueIndexes = item.value.map(element => {
	        // get the index matching between values and valueOptions
	        const formattedElement = getValueFromOption(element);
	        const index = (resolvedFormattedValueOptions == null ? void 0 : resolvedFormattedValueOptions.findIndex(formatedOption => formatedOption === formattedElement)) || 0;
	        return index;
	      });
	      return itemValueIndexes.filter(index => index >= 0).map(index => resolvedValueOptions[index]);
	    }

	    return item.value;
	  }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);
	  react.exports.useEffect(() => {
	    if (!Array.isArray(item.value) || filterValues.length !== item.value.length) {
	      // update the state if the filter value has been cleaned by the component
	      applyValue(_extends({}, item, {
	        value: filterValues.map(getValueFromOption)
	      }));
	    }
	  }, [item, filterValues, applyValue]);
	  const handleChange = react.exports.useCallback((event, value) => {
	    applyValue(_extends({}, item, {
	      value: [...value.map(getValueFromOption)]
	    }));
	  }, [applyValue, item]);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(Autocomplete$1, _extends({
	    multiple: true,
	    limitTags: 1,
	    options: resolvedValueOptions,
	    isOptionEqualToValue: isOptionEqualToValue,
	    filterOptions: filter,
	    id: id,
	    value: filterValues,
	    onChange: handleChange,
	    renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/jsxRuntime.exports.jsx(Chip$1, _extends({
	      variant: "outlined",
	      size: "small",
	      label: filterValueOptionFormatter(option)
	    }, getTagProps({
	      index
	    })))),
	    renderInput: params => {
	      var _rootProps$components;

	      return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseTextField, _extends({}, params, {
	        label: apiRef.current.getLocaleText('filterPanelInputLabel'),
	        placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),
	        InputLabelProps: _extends({}, params.InputLabelProps, {
	          shrink: true
	        }),
	        inputRef: focusElementRef,
	        type: "singleSelect"
	      }, TextFieldProps, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));
	    }
	  }, other));
	}

	const parseObjectValue = value => {
	  if (value == null || typeof value !== 'object') {
	    return value;
	  }

	  return value.value;
	};

	const getGridSingleSelectQuickFilterFn = (value, column, apiRef) => {
	  if (!value) {
	    return null;
	  }

	  const {
	    valueOptions,
	    valueFormatter,
	    field
	  } = column;
	  const potentialValues = [parseObjectValue(value).toString()];
	  const iterableColumnValues = typeof valueOptions === 'function' ? valueOptions({
	    field
	  }) : valueOptions || [];

	  if (iterableColumnValues) {
	    iterableColumnValues.forEach(option => {
	      // for each valueOption, check if the formatted value
	      let optionValue;
	      let optionLabel;

	      if (typeof option === 'object') {
	        optionValue = option.value;
	        optionLabel = option.label;
	      } else {
	        optionValue = option;

	        if (valueFormatter) {
	          optionLabel = valueFormatter({
	            value: option,
	            field,
	            api: apiRef.current
	          });
	        } else {
	          optionLabel = option;
	        }
	      }

	      if (optionLabel.slice(0, value.length).toLowerCase() === value.toLowerCase()) {
	        if (!potentialValues.includes(optionValue)) {
	          potentialValues.push(optionValue.toString());
	        }
	      }
	    });
	  }

	  return ({
	    value: columnValue
	  }) => {
	    return columnValue != null ? potentialValues.includes(parseObjectValue(columnValue).toString()) : false;
	  };
	};
	const getGridSingleSelectOperators = () => [{
	  value: 'is',
	  getApplyFilterFn: filterItem => {
	    if (filterItem.value == null || filterItem.value === '') {
	      return null;
	    }

	    return ({
	      value
	    }) => parseObjectValue(value) === parseObjectValue(filterItem.value);
	  },
	  InputComponent: GridFilterInputSingleSelect
	}, {
	  value: 'not',
	  getApplyFilterFn: filterItem => {
	    if (filterItem.value == null || filterItem.value === '') {
	      return null;
	    }

	    return ({
	      value
	    }) => parseObjectValue(value) !== parseObjectValue(filterItem.value);
	  },
	  InputComponent: GridFilterInputSingleSelect
	}, {
	  value: 'isAnyOf',
	  getApplyFilterFn: filterItem => {
	    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
	      return null;
	    }

	    const filterItemValues = filterItem.value.map(parseObjectValue);
	    return ({
	      value
	    }) => filterItemValues.includes(parseObjectValue(value));
	  },
	  InputComponent: GridFilterInputMultipleSingleSelect
	}];

	const GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
	  type: 'singleSelect',
	  renderEditCell: renderEditSingleSelectCell,
	  filterOperators: getGridSingleSelectOperators(),
	  getApplyQuickFilterFn: getGridSingleSelectQuickFilterFn
	});

	const DEFAULT_GRID_COL_TYPE_KEY = '__default__';
	const getGridDefaultColumnTypes = () => {
	  const nativeColumnTypes = {
	    string: GRID_STRING_COL_DEF,
	    number: GRID_NUMERIC_COL_DEF,
	    date: GRID_DATE_COL_DEF,
	    dateTime: GRID_DATETIME_COL_DEF,
	    boolean: GRID_BOOLEAN_COL_DEF,
	    singleSelect: GRID_SINGLE_SELECT_COL_DEF,
	    [GRID_ACTIONS_COLUMN_TYPE]: GRID_ACTIONS_COL_DEF,
	    [DEFAULT_GRID_COL_TYPE_KEY]: GRID_STRING_COL_DEF
	  };
	  return nativeColumnTypes;
	};

	const COLUMNS_DIMENSION_PROPERTIES = ['maxWidth', 'minWidth', 'width', 'flex'];
	const computeColumnTypes = (customColumnTypes = {}) => {
	  const mergedColumnTypes = _extends({}, getGridDefaultColumnTypes());

	  Object.entries(customColumnTypes).forEach(([colType, colTypeDef]) => {
	    if (mergedColumnTypes[colType]) {
	      mergedColumnTypes[colType] = _extends({}, mergedColumnTypes[colType], colTypeDef);
	    } else {
	      mergedColumnTypes[colType] = _extends({}, mergedColumnTypes[colTypeDef.extendType || DEFAULT_GRID_COL_TYPE_KEY], colTypeDef);
	    }
	  });
	  return mergedColumnTypes;
	};
	/**
	 * Computes width for flex columns.
	 * Based on CSS Flexbox specification:
	 * https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths
	 */

	function computeFlexColumnsWidth({
	  initialFreeSpace,
	  totalFlexUnits,
	  flexColumns
	}) {
	  const flexColumnsLookup = {
	    all: {},
	    frozenFields: [],
	    freeze: field => {
	      const value = flexColumnsLookup.all[field];

	      if (value && value.frozen !== true) {
	        flexColumnsLookup.all[field].frozen = true;
	        flexColumnsLookup.frozenFields.push(field);
	      }
	    }
	  }; // Step 5 of https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths

	  function loopOverFlexItems() {
	    // 5a: If all the flex items on the line are frozen, free space has been distributed.
	    if (flexColumnsLookup.frozenFields.length === flexColumns.length) {
	      return;
	    }

	    const violationsLookup = {
	      min: {},
	      max: {}
	    };
	    let remainingFreeSpace = initialFreeSpace;
	    let flexUnits = totalFlexUnits;
	    let totalViolation = 0; // 5b: Calculate the remaining free space

	    flexColumnsLookup.frozenFields.forEach(field => {
	      remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;
	      flexUnits -= flexColumnsLookup.all[field].flex;
	    });

	    for (let i = 0; i < flexColumns.length; i += 1) {
	      const column = flexColumns[i];

	      if (flexColumnsLookup.all[column.field] && flexColumnsLookup.all[column.field].frozen === true) {
	        // eslint-disable-next-line no-continue
	        continue;
	      } // 5c: Distribute remaining free space proportional to the flex factors


	      const widthPerFlexUnit = remainingFreeSpace / flexUnits;
	      let computedWidth = widthPerFlexUnit * column.flex; // 5d: Fix min/max violations

	      if (computedWidth < column.minWidth) {
	        totalViolation += column.minWidth - computedWidth;
	        computedWidth = column.minWidth;
	        violationsLookup.min[column.field] = true;
	      } else if (computedWidth > column.maxWidth) {
	        totalViolation += column.maxWidth - computedWidth;
	        computedWidth = column.maxWidth;
	        violationsLookup.max[column.field] = true;
	      }

	      flexColumnsLookup.all[column.field] = {
	        frozen: false,
	        computedWidth,
	        flex: column.flex
	      };
	    } // 5e: Freeze over-flexed items


	    if (totalViolation < 0) {
	      // Freeze all the items with max violations
	      Object.keys(violationsLookup.max).forEach(field => {
	        flexColumnsLookup.freeze(field);
	      });
	    } else if (totalViolation > 0) {
	      // Freeze all the items with min violations
	      Object.keys(violationsLookup.min).forEach(field => {
	        flexColumnsLookup.freeze(field);
	      });
	    } else {
	      // Freeze all items
	      flexColumns.forEach(({
	        field
	      }) => {
	        flexColumnsLookup.freeze(field);
	      });
	    } // 5f: Return to the start of this loop


	    loopOverFlexItems();
	  }

	  loopOverFlexItems();
	  return flexColumnsLookup.all;
	}
	/**
	 * Compute the `computedWidth` (ie: the width the column should have during rendering) based on the `width` / `flex` / `minWidth` / `maxWidth` properties of `GridColDef`.
	 * The columns already have been merged with there `type` default values for `minWidth`, `maxWidth` and `width`, thus the `!` for those properties below.
	 * TODO: Unit test this function in depth and only keep basic cases for the whole grid testing.
	 * TODO: Improve the `GridColDef` typing to reflect the fact that `minWidth` / `maxWidth` and `width` can't be null after the merge with the `type` default values.
	 */

	const hydrateColumnsWidth = (rawState, viewportInnerWidth) => {
	  const columnsLookup = {};
	  let totalFlexUnits = 0;
	  let widthAllocatedBeforeFlex = 0;
	  const flexColumns = []; // For the non-flex columns, compute their width
	  // For the flex columns, compute there minimum width and how much width must be allocated during the flex allocation

	  rawState.all.forEach(columnField => {
	    const newColumn = _extends({}, rawState.lookup[columnField]);

	    if (rawState.columnVisibilityModel[columnField] === false) {
	      newColumn.computedWidth = 0;
	    } else {
	      let computedWidth;

	      if (newColumn.flex && newColumn.flex > 0) {
	        totalFlexUnits += newColumn.flex;
	        computedWidth = 0;
	        flexColumns.push(newColumn);
	      } else {
	        computedWidth = clamp(newColumn.width, newColumn.minWidth, newColumn.maxWidth);
	      }

	      widthAllocatedBeforeFlex += computedWidth;
	      newColumn.computedWidth = computedWidth;
	    }

	    columnsLookup[columnField] = newColumn;
	  });
	  const initialFreeSpace = Math.max(viewportInnerWidth - widthAllocatedBeforeFlex, 0); // Allocate the remaining space to the flex columns

	  if (totalFlexUnits > 0 && viewportInnerWidth > 0) {
	    const computedColumnWidths = computeFlexColumnsWidth({
	      initialFreeSpace,
	      totalFlexUnits,
	      flexColumns
	    });
	    Object.keys(computedColumnWidths).forEach(field => {
	      columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;
	    });
	  }

	  return _extends({}, rawState, {
	    lookup: columnsLookup
	  });
	};
	/**
	 * Apply the order and the dimensions of the initial state.
	 * The columns not registered in `orderedFields` will be placed after the imported columns.
	 */

	const applyInitialState = (columnsState, initialState) => {
	  if (!initialState) {
	    return columnsState;
	  }

	  const {
	    orderedFields = [],
	    dimensions = {}
	  } = initialState;
	  const columnsWithUpdatedDimensions = Object.keys(dimensions);

	  if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {
	    return columnsState;
	  }

	  const orderedFieldsLookup = {};
	  const cleanOrderedFields = [];

	  for (let i = 0; i < orderedFields.length; i += 1) {
	    const field = orderedFields[i]; // Ignores the fields in the initialState that matches no field on the current column state

	    if (columnsState.lookup[field]) {
	      orderedFieldsLookup[field] = true;
	      cleanOrderedFields.push(field);
	    }
	  }

	  const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.all : [...cleanOrderedFields, ...columnsState.all.filter(field => !orderedFieldsLookup[field])];

	  const newColumnLookup = _extends({}, columnsState.lookup);

	  for (let i = 0; i < columnsWithUpdatedDimensions.length; i += 1) {
	    const field = columnsWithUpdatedDimensions[i];

	    const newColDef = _extends({}, newColumnLookup[field], {
	      hasBeenResized: true
	    });

	    Object.entries(dimensions[field]).forEach(([key, value]) => {
	      newColDef[key] = value === -1 ? Infinity : value;
	    });
	    newColumnLookup[field] = newColDef;
	  }

	  const newColumnsState = {
	    all: newOrderedFields,
	    lookup: newColumnLookup
	  };
	  return newColumnsState;
	};
	/**
	 * @deprecated Should have been internal only, you can inline the logic.
	 */

	const getGridColDef = (columnTypes, type) => {
	  if (!type) {
	    return columnTypes[DEFAULT_GRID_COL_TYPE_KEY];
	  }

	  if (!columnTypes[type]) {
	    return columnTypes[DEFAULT_GRID_COL_TYPE_KEY];
	  }

	  return columnTypes[type];
	};
	const createColumnsState = ({
	  apiRef,
	  columnsToUpsert,
	  initialState,
	  columnTypes,
	  currentColumnVisibilityModel = gridColumnVisibilityModelSelector(apiRef),
	  shouldRegenColumnVisibilityModelFromColumns,
	  keepOnlyColumnsToUpsert = false
	}) => {
	  var _apiRef$current$getRo, _apiRef$current$getRo2, _apiRef$current, _apiRef$current$getRo3;

	  const isInsideStateInitializer = !apiRef.current.state.columns;
	  let columnsStateWithoutColumnVisibilityModel;

	  if (isInsideStateInitializer) {
	    columnsStateWithoutColumnVisibilityModel = {
	      all: [],
	      lookup: {}
	    };
	  } else {
	    const currentState = gridColumnsSelector(apiRef.current.state);
	    columnsStateWithoutColumnVisibilityModel = {
	      all: keepOnlyColumnsToUpsert ? [] : [...currentState.all],
	      lookup: _extends({}, currentState.lookup) // Will be cleaned later if keepOnlyColumnsToUpsert=true

	    };
	  }

	  let columnsToKeep = {};

	  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
	    columnsToKeep = Object.keys(columnsStateWithoutColumnVisibilityModel.lookup).reduce((acc, key) => _extends({}, acc, {
	      [key]: false
	    }), {});
	  }

	  const columnsToUpsertLookup = {};
	  columnsToUpsert.forEach(newColumn => {
	    const {
	      field
	    } = newColumn;
	    columnsToUpsertLookup[field] = true;
	    columnsToKeep[field] = true;
	    let existingState = columnsStateWithoutColumnVisibilityModel.lookup[field];

	    if (existingState == null) {
	      // New Column
	      existingState = _extends({}, getGridColDef(columnTypes, newColumn.type), {
	        // TODO v6: Inline `getGridColDef`
	        field,
	        hasBeenResized: false
	      });
	      columnsStateWithoutColumnVisibilityModel.all.push(field);
	    } else if (keepOnlyColumnsToUpsert) {
	      columnsStateWithoutColumnVisibilityModel.all.push(field);
	    }

	    let hasBeenResized = existingState.hasBeenResized;
	    COLUMNS_DIMENSION_PROPERTIES.forEach(key => {
	      if (newColumn[key] !== undefined) {
	        hasBeenResized = true;

	        if (newColumn[key] === -1) {
	          newColumn[key] = Infinity;
	        }
	      }
	    });
	    columnsStateWithoutColumnVisibilityModel.lookup[field] = _extends({}, existingState, {
	      hide: newColumn.hide == null ? false : newColumn.hide
	    }, newColumn, {
	      hasBeenResized
	    });
	  });

	  if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
	    Object.keys(columnsStateWithoutColumnVisibilityModel.lookup).forEach(field => {
	      if (!columnsToKeep[field]) {
	        delete columnsStateWithoutColumnVisibilityModel.lookup[field];
	      }
	    });
	  }

	  const columnsLookupBeforePreProcessing = _extends({}, columnsStateWithoutColumnVisibilityModel.lookup);

	  const columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors('hydrateColumns', columnsStateWithoutColumnVisibilityModel); // TODO v6: remove the sync between the columns `hide` option and the model.

	  let columnVisibilityModel = {};

	  if (shouldRegenColumnVisibilityModelFromColumns) {
	    let hasModelChanged = false;

	    const newColumnVisibilityModel = _extends({}, currentColumnVisibilityModel);

	    if (isInsideStateInitializer) {
	      columnsStateWithPreProcessing.all.forEach(field => {
	        newColumnVisibilityModel[field] = !columnsStateWithoutColumnVisibilityModel.lookup[field].hide;
	      });
	    } else if (keepOnlyColumnsToUpsert) {
	      // At this point, `keepOnlyColumnsToUpsert` has a new meaning: keep the columns
	      // passed via `columnToUpsert` + columns added by the pre-processors. We do the following
	      // cleanup because a given column may have been removed from the `columns` prop but it still
	      // exists in the state.
	      Object.keys(newColumnVisibilityModel).forEach(field => {
	        if (!columnsStateWithPreProcessing.lookup[field]) {
	          delete newColumnVisibilityModel[field];
	          hasModelChanged = true;
	        }
	      });
	    }

	    columnsStateWithPreProcessing.all.forEach(field => {
	      // If neither the `columnsToUpsert` nor the pre-processors updated the column,
	      // Then we don't want to update the visibility status of the column in the model.
	      if (!columnsToUpsertLookup[field] && columnsLookupBeforePreProcessing[field] === columnsStateWithPreProcessing.lookup[field]) {
	        return;
	      } // We always assume that a column not in the model is visible by default. However, there's an
	      // edge case where the column is not in the model but it also doesn't exist in the `columns`
	      // prop, meaning that the column is being added. In that case, we assume that the column was
	      // not visible before for it be added to the model.


	      let isVisibleBefore = currentColumnVisibilityModel[field];

	      if (isVisibleBefore === undefined) {
	        if (isInsideStateInitializer) {
	          isVisibleBefore = true;
	        } else {
	          const currentState = gridColumnsSelector(apiRef.current.state);
	          isVisibleBefore = !!currentState.lookup[field];
	        }
	      }

	      const isVisibleAfter = !columnsStateWithPreProcessing.lookup[field].hide;

	      if (isVisibleAfter !== isVisibleBefore) {
	        hasModelChanged = true;
	        newColumnVisibilityModel[field] = isVisibleAfter;
	      }
	    });

	    if (hasModelChanged || isInsideStateInitializer) {
	      columnVisibilityModel = newColumnVisibilityModel;
	    } else {
	      columnVisibilityModel = currentColumnVisibilityModel;
	    }
	  } else {
	    columnVisibilityModel = currentColumnVisibilityModel;
	  }

	  const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);

	  const columnsState = _extends({}, columnsStateWithPortableColumns, {
	    columnVisibilityModel
	  });

	  return hydrateColumnsWidth(columnsState, (_apiRef$current$getRo = (_apiRef$current$getRo2 = (_apiRef$current = apiRef.current).getRootDimensions) == null ? void 0 : (_apiRef$current$getRo3 = _apiRef$current$getRo2.call(_apiRef$current)) == null ? void 0 : _apiRef$current$getRo3.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0);
	};
	const mergeColumnsState = columnsState => state => _extends({}, state, {
	  columns: columnsState
	});
	function getFirstNonSpannedColumnToRender({
	  firstColumnToRender,
	  apiRef,
	  firstRowToRender,
	  lastRowToRender,
	  visibleRows
	}) {
	  let firstNonSpannedColumnToRender = firstColumnToRender;

	  for (let i = firstRowToRender; i < lastRowToRender; i += 1) {
	    const row = visibleRows[i];

	    if (row) {
	      const rowId = visibleRows[i].id;
	      const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);

	      if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {
	        firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;
	      }
	    }
	  }

	  return firstNonSpannedColumnToRender;
	}
	function getFirstColumnIndexToRender({
	  firstColumnIndex,
	  minColumnIndex,
	  columnBuffer,
	  firstRowToRender,
	  lastRowToRender,
	  apiRef,
	  visibleRows
	}) {
	  const initialFirstColumnToRender = Math.max(firstColumnIndex - columnBuffer, minColumnIndex);
	  const firstColumnToRender = getFirstNonSpannedColumnToRender({
	    firstColumnToRender: initialFirstColumnToRender,
	    apiRef,
	    firstRowToRender,
	    lastRowToRender,
	    visibleRows
	  });
	  return firstColumnToRender;
	}

	const HideGridColMenuItem = props => {
	  const {
	    column,
	    onClick
	  } = props;
	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const timeoutRef = react.exports.useRef();
	  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
	  const columnsWithMenu = visibleColumns.filter(col => col.disableColumnMenu !== true); // do not allow to hide the last column with menu

	  const disabled = columnsWithMenu.length === 1;
	  const toggleColumn = react.exports.useCallback(event => {
	    /**
	     * Disabled `MenuItem` would trigger `click` event
	     * after imperative `.click()` call on HTML element.
	     * Also, click is triggered in testing environment as well.
	     */
	    if (disabled) {
	      return;
	    }

	    onClick(event); // time for the transition

	    timeoutRef.current = setTimeout(() => {
	      apiRef.current.setColumnVisibility(column == null ? void 0 : column.field, false);
	    }, 100);
	  }, [apiRef, column == null ? void 0 : column.field, onClick, disabled]);
	  react.exports.useEffect(() => {
	    return () => clearTimeout(timeoutRef.current);
	  }, []);

	  if (rootProps.disableColumnSelector) {
	    return null;
	  }

	  if (column.hideable === false) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(MenuItem$1, {
	    onClick: toggleColumn,
	    disabled: disabled,
	    children: apiRef.current.getLocaleText('columnMenuHideColumn')
	  });
	};

	const SortGridMenuItems = props => {
	  const {
	    column,
	    onClick
	  } = props;
	  const apiRef = useGridApiContext();
	  const sortModel = useGridSelector(apiRef, gridSortModelSelector);
	  const sortDirection = react.exports.useMemo(() => {
	    if (!column) {
	      return null;
	    }

	    const sortItem = sortModel.find(item => item.field === column.field);
	    return sortItem == null ? void 0 : sortItem.sort;
	  }, [column, sortModel]);
	  const onSortMenuItemClick = react.exports.useCallback(event => {
	    onClick(event);
	    const direction = event.currentTarget.getAttribute('data-value') || null;
	    apiRef.current.sortColumn(column, direction);
	  }, [apiRef, column, onClick]);

	  if (!column || !column.sortable) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(react.exports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(MenuItem$1, {
	      onClick: onSortMenuItemClick,
	      disabled: sortDirection == null,
	      children: apiRef.current.getLocaleText('columnMenuUnsort')
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(MenuItem$1, {
	      onClick: onSortMenuItemClick,
	      "data-value": "asc",
	      disabled: sortDirection === 'asc',
	      children: apiRef.current.getLocaleText('columnMenuSortAsc')
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(MenuItem$1, {
	      onClick: onSortMenuItemClick,
	      "data-value": "desc",
	      disabled: sortDirection === 'desc',
	      children: apiRef.current.getLocaleText('columnMenuSortDesc')
	    })]
	  });
	};

	const GridColumnMenu = /*#__PURE__*/react.exports.forwardRef(function GridColumnMenu(props, ref) {
	  const {
	    hideMenu,
	    currentColumn
	  } = props;
	  const apiRef = useGridApiContext();
	  const defaultButtons = [/*#__PURE__*/jsxRuntime.exports.jsx(SortGridMenuItems, {
	    onClick: hideMenu,
	    column: currentColumn
	  }),
	  /*#__PURE__*/
	  // TODO update types to allow `onClick` and `column` to be optional
	  jsxRuntime.exports.jsx(GridFilterMenuItem, {
	    onClick: hideMenu,
	    column: currentColumn
	  }), /*#__PURE__*/jsxRuntime.exports.jsx(HideGridColMenuItem, {
	    onClick: hideMenu,
	    column: currentColumn
	  }), /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnsMenuItem, {
	    onClick: hideMenu,
	    column: currentColumn
	  })];
	  const preProcessedButtons = apiRef.current.unstable_applyPipeProcessors('columnMenu', defaultButtons, currentColumn);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnMenuContainer, _extends({
	    ref: ref
	  }, props, {
	    children: preProcessedButtons.map((button, index) => /*#__PURE__*/react.exports.cloneElement(button, {
	      key: index,
	      onClick: hideMenu,
	      column: currentColumn
	    }))
	  }));
	});

	const _excluded$q = ["className"];

	const useUtilityClasses$g = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['panelContent']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridPanelContentRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'PanelContent',
	  overridesResolver: (props, styles) => styles.panelContent
	})({
	  display: 'flex',
	  flexDirection: 'column',
	  overflow: 'auto',
	  flex: '1 1',
	  maxHeight: 400
	});

	function GridPanelContent(props) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$q);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$g(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridPanelContentRoot, _extends({
	    className: clsx(className, classes.root)
	  }, other));
	}

	const _excluded$p = ["className"];

	const useUtilityClasses$f = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['panelFooter']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridPanelFooterRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'PanelFooter',
	  overridesResolver: (props, styles) => styles.panelFooter
	})(({
	  theme
	}) => ({
	  padding: theme.spacing(0.5),
	  display: 'flex',
	  justifyContent: 'space-between'
	}));

	function GridPanelFooter(props) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$p);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$f(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridPanelFooterRoot, _extends({
	    className: clsx(className, classes.root)
	  }, other));
	}

	const _excluded$o = ["className"];

	const useUtilityClasses$e = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['panelHeader']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridPanelHeaderRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'PanelHeader',
	  overridesResolver: (props, styles) => styles.panelHeader
	})(({
	  theme
	}) => ({
	  padding: theme.spacing(1)
	}));

	function GridPanelHeader(props) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$o);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$e(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridPanelHeaderRoot, _extends({
	    className: clsx(className, classes.root)
	  }, other));
	}

	const _excluded$n = ["className"];

	const useUtilityClasses$d = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['panelWrapper']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridPanelWrapperRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'PanelWrapper',
	  overridesResolver: (props, styles) => styles.panelWrapper
	})({
	  display: 'flex',
	  flexDirection: 'column',
	  flex: 1,
	  '&:focus': {
	    outline: 0
	  }
	});

	const isEnabled = () => true;

	const GridPanelWrapper = /*#__PURE__*/react.exports.forwardRef(function GridPanelWrapper(props, ref) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$n);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$d(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(FocusTrap, {
	    open: true,
	    disableEnforceFocus: true,
	    isEnabled: isEnabled,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(GridPanelWrapperRoot, _extends({
	      ref: ref,
	      tabIndex: -1,
	      className: clsx(className, classes.root)
	    }, other))
	  });
	});

	// A guide to feature toggling (deprecated)
	//
	// The feature toggle is:
	// - independent from the NODE_ENV
	// - isn't pruning code in production, as the objective is to eventually ship the code.
	// - doesn't allow to cherry-pick which feature to enable
	//
	// By default, the experimental features are only enabled in:
	// - the local environment
	// - the pull request previews
	//
	// Reviewers can force the value with the local storage and the GRID_EXPERIMENTAL_ENABLED key:
	// - 'true' => force it to be enabled
	// - 'false' => force it to be disabled
	//
	// Developers (users) are discouraged to enable the experimental feature by setting the GRID_EXPERIMENTAL_ENABLED env.
	// Instead, prefer exposing experimental APIs, for instance, a prop or a new `unstable_` module.
	const GRID_EXPERIMENTAL_ENABLED = false;

	const _excluded$m = ["sort", "searchPredicate", "autoFocusSearchField"];

	const useUtilityClasses$c = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['columnsPanel'],
	    columnsPanelRow: ['columnsPanelRow']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridColumnsPanelRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'ColumnsPanel',
	  overridesResolver: (props, styles) => styles.columnsPanel
	})(() => ({
	  padding: '8px 0px 8px 8px'
	}));
	const GridColumnsPanelRowRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'ColumnsPanelRow',
	  overridesResolver: (props, styles) => styles.columnsPanelRow
	})(({
	  theme
	}) => ({
	  display: 'flex',
	  justifyContent: 'space-between',
	  padding: '1px 8px 1px 7px',
	  [`& .${switchClasses$1.root}`]: {
	    marginRight: theme.spacing(0.5)
	  }
	}));
	const GridIconButtonRoot = styled$1(IconButton$1)({
	  justifyContent: 'flex-end'
	});
	const collator$1 = new Intl.Collator();

	const defaultSearchPredicate = (column, searchValue) => {
	  return (column.headerName || column.field).toLowerCase().indexOf(searchValue) > -1;
	};

	function GridColumnsPanel(props) {
	  var _rootProps$components, _rootProps$components3, _rootProps$components4;

	  const apiRef = useGridApiContext();
	  const searchInputRef = react.exports.useRef(null);
	  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);
	  const columnVisibilityModel = useGridSelector(apiRef, gridColumnVisibilityModelSelector);
	  const rootProps = useGridRootProps();
	  const [searchValue, setSearchValue] = react.exports.useState('');
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$c(ownerState);

	  const {
	    sort,
	    searchPredicate = defaultSearchPredicate,
	    autoFocusSearchField = true
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$m);

	  const sortedColumns = react.exports.useMemo(() => {
	    switch (sort) {
	      case 'asc':
	        return [...columns].sort((a, b) => collator$1.compare(a.headerName || a.field, b.headerName || b.field));

	      case 'desc':
	        return [...columns].sort((a, b) => -collator$1.compare(a.headerName || a.field, b.headerName || b.field));

	      default:
	        return columns;
	    }
	  }, [columns, sort]);

	  const toggleColumn = event => {
	    const {
	      name: field
	    } = event.target;
	    apiRef.current.setColumnVisibility(field, columnVisibilityModel[field] === false);
	  };

	  const toggleAllColumns = react.exports.useCallback(isVisible => {
	    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {
	      if (isVisible) {
	        return apiRef.current.setColumnVisibilityModel({});
	      }

	      return apiRef.current.setColumnVisibilityModel(Object.fromEntries(columns.filter(col => col.hideable !== false).map(col => [col.field, false])));
	    } // TODO v6: Remove


	    return apiRef.current.updateColumns(columns.map(col => {
	      if (col.hideable !== false) {
	        return {
	          field: col.field,
	          hide: !isVisible
	        };
	      }

	      return col;
	    }));
	  }, [apiRef, columns]);
	  const handleSearchValueChange = react.exports.useCallback(event => {
	    setSearchValue(event.target.value);
	  }, []);
	  const currentColumns = react.exports.useMemo(() => {
	    if (!searchValue) {
	      return sortedColumns;
	    }

	    const searchValueToCheck = searchValue.toLowerCase();
	    return sortedColumns.filter(column => searchPredicate(column, searchValueToCheck));
	  }, [sortedColumns, searchValue, searchPredicate]);
	  const firstSwitchRef = react.exports.useRef(null);
	  react.exports.useEffect(() => {
	    if (autoFocusSearchField) {
	      searchInputRef.current.focus();
	    } else if (firstSwitchRef.current && typeof firstSwitchRef.current.focus === 'function') {
	      firstSwitchRef.current.focus();
	    }
	  }, [autoFocusSearchField]);
	  let firstHideableColumnFound = false;

	  const isFirstHideableColumn = column => {
	    if (firstHideableColumnFound === false && column.hideable !== false) {
	      firstHideableColumnFound = true;
	      return true;
	    }

	    return false;
	  };

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(GridPanelWrapper, _extends({}, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(GridPanelHeader, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseTextField, _extends({
	        label: apiRef.current.getLocaleText('columnsPanelTextFieldLabel'),
	        placeholder: apiRef.current.getLocaleText('columnsPanelTextFieldPlaceholder'),
	        inputRef: searchInputRef,
	        value: searchValue,
	        onChange: handleSearchValueChange,
	        variant: "standard",
	        fullWidth: true
	      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField))
	    }), /*#__PURE__*/jsxRuntime.exports.jsx(GridPanelContent, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnsPanelRoot, {
	        className: classes.root,
	        children: currentColumns.map(column => {
	          var _rootProps$components2;

	          return /*#__PURE__*/jsxRuntime.exports.jsxs(GridColumnsPanelRowRoot, {
	            className: classes.columnsPanelRow,
	            children: [/*#__PURE__*/jsxRuntime.exports.jsx(FormControlLabel$1, {
	              control: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseSwitch, _extends({
	                disabled: column.hideable === false,
	                checked: columnVisibilityModel[column.field] !== false,
	                onClick: toggleColumn,
	                name: column.field,
	                size: "small",
	                inputRef: isFirstHideableColumn(column) ? firstSwitchRef : undefined
	              }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSwitch)),
	              label: column.headerName || column.field
	            }), !rootProps.disableColumnReorder && GRID_EXPERIMENTAL_ENABLED && /*#__PURE__*/jsxRuntime.exports.jsx(GridIconButtonRoot, {
	              draggable: true,
	              "aria-label": apiRef.current.getLocaleText('columnsPanelDragIconLabel'),
	              title: apiRef.current.getLocaleText('columnsPanelDragIconLabel'),
	              size: "small",
	              disabled: true,
	              children: /*#__PURE__*/jsxRuntime.exports.jsx(GridDragIcon, {})
	            })]
	          }, column.field);
	        })
	      })
	    }), /*#__PURE__*/jsxRuntime.exports.jsxs(GridPanelFooter, {
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseButton, _extends({
	        onClick: () => toggleAllColumns(false)
	      }, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseButton, {
	        children: apiRef.current.getLocaleText('columnsPanelHideAllButton')
	      })), /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseButton, _extends({
	        onClick: () => toggleAllColumns(true)
	      }, (_rootProps$components4 = rootProps.componentsProps) == null ? void 0 : _rootProps$components4.baseButton, {
	        children: apiRef.current.getLocaleText('columnsPanelShowAllButton')
	      }))]
	    })]
	  }));
	}

	const _excluded$l = ["children", "className", "classes"];
	const gridPanelClasses = generateUtilityClasses('MuiDataGrid', ['panel', 'paper']);
	const GridPanelRoot = styled$1(MUIPopper, {
	  name: 'MuiDataGrid',
	  slot: 'Panel',
	  overridesResolver: (props, styles) => styles.panel
	})(({
	  theme
	}) => ({
	  zIndex: theme.zIndex.modal
	}));
	const GridPaperRoot = styled$1(Paper$1, {
	  name: 'MuiDataGrid',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})(({
	  theme
	}) => ({
	  backgroundColor: theme.palette.background.paper,
	  minWidth: 300,
	  maxHeight: 450,
	  display: 'flex'
	}));
	const GridPanel = /*#__PURE__*/react.exports.forwardRef((props, ref) => {
	  var _apiRef$current$colum;

	  const {
	    children,
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$l);

	  const apiRef = useGridApiContext();
	  const classes = gridPanelClasses;
	  const [isPlaced, setIsPlaced] = react.exports.useState(false);
	  const handleClickAway = react.exports.useCallback(() => {
	    apiRef.current.hidePreferences();
	  }, [apiRef]);
	  const handleKeyDown = react.exports.useCallback(event => {
	    if (isEscapeKey(event.key)) {
	      apiRef.current.hidePreferences();
	    }
	  }, [apiRef]);
	  const modifiers = react.exports.useMemo(() => [{
	    name: 'flip',
	    enabled: false
	  }, {
	    name: 'isPlaced',
	    enabled: true,
	    phase: 'main',
	    fn: () => {
	      setIsPlaced(true);
	    },
	    effect: () => () => {
	      setIsPlaced(false);
	    }
	  }], []);
	  const anchorEl = (_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current;

	  if (!anchorEl) {
	    return null;
	  }

	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridPanelRoot, _extends({
	    ref: ref,
	    placement: "bottom-start",
	    className: clsx(className, classes.panel),
	    anchorEl: anchorEl,
	    modifiers: modifiers
	  }, other, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(ClickAwayListener, {
	      mouseEvent: "onMouseUp",
	      onClickAway: handleClickAway,
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(GridPaperRoot, {
	        className: classes.paper,
	        elevation: 8,
	        onKeyDown: handleKeyDown,
	        children: isPlaced && children
	      })
	    })
	  }));
	});

	const GridPreferencesPanel = /*#__PURE__*/react.exports.forwardRef(function GridPreferencesPanel(props, ref) {
	  var _preferencePanelState, _rootProps$components, _rootProps$components2;

	  const apiRef = useGridApiContext();
	  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);
	  const rootProps = useGridRootProps();
	  const preferencePanelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);
	  const panelContent = apiRef.current.unstable_applyPipeProcessors('preferencePanel', null, (_preferencePanelState = preferencePanelState.openedPanelValue) != null ? _preferencePanelState : GridPreferencePanelsValue.filters);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.Panel, _extends({
	    ref: ref,
	    as: rootProps.components.BasePopper,
	    open: columns.length > 0 && preferencePanelState.open
	  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.panel, props, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.basePopper, {
	    children: panelContent
	  }));
	});

	const _excluded$k = ["item", "hasMultipleFilters", "deleteFilter", "applyFilterChanges", "multiFilterOperator", "showMultiFilterOperators", "disableMultiFilterOperator", "applyMultiFilterOperatorChanges", "focusElementRef", "linkOperators", "columnsSort", "deleteIconProps", "linkOperatorInputProps", "operatorInputProps", "columnInputProps", "valueInputProps", "children"],
	      _excluded2$4 = ["InputComponentProps"];

	const useUtilityClasses$b = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['filterForm'],
	    deleteIcon: ['filterFormDeleteIcon'],
	    linkOperatorInput: ['filterFormLinkOperatorInput'],
	    columnInput: ['filterFormColumnInput'],
	    operatorInput: ['filterFormOperatorInput'],
	    valueInput: ['filterFormValueInput']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridFilterFormRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'FilterForm',
	  overridesResolver: (props, styles) => styles.filterForm
	})(({
	  theme
	}) => ({
	  display: 'flex',
	  padding: theme.spacing(1)
	}));
	const FilterFormDeleteIcon = styled$1(MUIFormControl, {
	  name: 'MuiDataGrid',
	  slot: 'FilterFormDeleteIcon',
	  overridesResolver: (_, styles) => styles.filterFormDeleteIcon
	})(({
	  theme
	}) => ({
	  flexShrink: 0,
	  justifyContent: 'flex-end',
	  marginRight: theme.spacing(0.5),
	  marginBottom: theme.spacing(0.2)
	}));
	const FilterFormLinkOperatorInput = styled$1(MUIFormControl, {
	  name: 'MuiDataGrid',
	  slot: 'FilterFormLinkOperatorInput',
	  overridesResolver: (_, styles) => styles.filterFormLinkOperatorInput
	})({
	  minWidth: 55,
	  marginRight: 5,
	  justifyContent: 'end'
	});
	const FilterFormColumnInput = styled$1(MUIFormControl, {
	  name: 'MuiDataGrid',
	  slot: 'FilterFormColumnInput',
	  overridesResolver: (_, styles) => styles.filterFormColumnInput
	})({
	  width: 150
	});
	const FilterFormOperatorInput = styled$1(MUIFormControl, {
	  name: 'MuiDataGrid',
	  slot: 'FilterFormOperatorInput',
	  overridesResolver: (_, styles) => styles.filterFormOperatorInput
	})({
	  width: 120
	});
	const FilterFormValueInput = styled$1(MUIFormControl, {
	  name: 'MuiDataGrid',
	  slot: 'FilterFormValueInput',
	  overridesResolver: (_, styles) => styles.filterFormValueInput
	})({
	  width: 190
	});

	const getLinkOperatorLocaleKey = linkOperator => {
	  switch (linkOperator) {
	    case GridLinkOperator.And:
	      return 'filterPanelOperatorAnd';

	    case GridLinkOperator.Or:
	      return 'filterPanelOperatorOr';

	    default:
	      throw new Error('MUI: Invalid `linkOperator` property in the `GridFilterPanel`.');
	  }
	};

	const getColumnLabel = col => col.headerName || col.field;

	const collator = new Intl.Collator();
	const GridFilterForm = /*#__PURE__*/react.exports.forwardRef(function GridFilterForm(props, ref) {
	  var _rootProps$components, _rootProps$components2, _baseSelectProps$nati, _rootProps$components3, _rootProps$components4, _rootProps$components5, _currentColumn$filter2;

	  const {
	    item,
	    hasMultipleFilters,
	    deleteFilter,
	    applyFilterChanges,
	    multiFilterOperator,
	    showMultiFilterOperators,
	    disableMultiFilterOperator,
	    applyMultiFilterOperatorChanges,
	    focusElementRef,
	    linkOperators = [GridLinkOperator.And, GridLinkOperator.Or],
	    columnsSort,
	    deleteIconProps = {},
	    linkOperatorInputProps = {},
	    operatorInputProps = {},
	    columnInputProps = {},
	    valueInputProps = {}
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$k);

	  const apiRef = useGridApiContext();
	  const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);
	  const columnSelectId = useId();
	  const columnSelectLabelId = useId();
	  const operatorSelectId = useId();
	  const operatorSelectLabelId = useId();
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$b(ownerState);
	  const valueRef = react.exports.useRef(null);
	  const filterSelectorRef = react.exports.useRef(null);
	  const hasLinkOperatorColumn = hasMultipleFilters && linkOperators.length > 0;
	  const baseFormControlProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseFormControl) || {};
	  const baseSelectProps = ((_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect) || {};
	  const isBaseSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
	  const OptionComponent = isBaseSelectNative ? 'option' : MenuItem$1;

	  const {
	    InputComponentProps
	  } = valueInputProps,
	        valueInputPropsOther = _objectWithoutPropertiesLoose(valueInputProps, _excluded2$4);

	  const sortedFilterableColumns = react.exports.useMemo(() => {
	    switch (columnsSort) {
	      case 'asc':
	        return filterableColumns.sort((a, b) => collator.compare(getColumnLabel(a), getColumnLabel(b)));

	      case 'desc':
	        return filterableColumns.sort((a, b) => -collator.compare(getColumnLabel(a), getColumnLabel(b)));

	      default:
	        return filterableColumns;
	    }
	  }, [filterableColumns, columnsSort]);
	  const currentColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;
	  const currentOperator = react.exports.useMemo(() => {
	    var _currentColumn$filter;

	    if (!item.operatorValue || !currentColumn) {
	      return null;
	    }

	    return (_currentColumn$filter = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter.find(operator => operator.value === item.operatorValue);
	  }, [item, currentColumn]);
	  const changeColumn = react.exports.useCallback(event => {
	    const columnField = event.target.value;
	    const column = apiRef.current.getColumn(columnField);

	    if (column.field === currentColumn.field) {
	      // column did not change
	      return;
	    } // try to keep the same operator when column change


	    const newOperator = column.filterOperators.find(operator => operator.value === item.operatorValue) || column.filterOperators[0]; // Erase filter value if the input component is modified

	    const eraseItemValue = !newOperator.InputComponent || newOperator.InputComponent !== (currentOperator == null ? void 0 : currentOperator.InputComponent);
	    applyFilterChanges(_extends({}, item, {
	      columnField,
	      operatorValue: newOperator.value,
	      value: eraseItemValue ? undefined : item.value
	    }));
	  }, [apiRef, applyFilterChanges, item, currentColumn, currentOperator]);
	  const changeOperator = react.exports.useCallback(event => {
	    const operatorValue = event.target.value;
	    const newOperator = currentColumn == null ? void 0 : currentColumn.filterOperators.find(operator => operator.value === operatorValue);
	    const eraseItemValue = !(newOperator != null && newOperator.InputComponent) || (newOperator == null ? void 0 : newOperator.InputComponent) !== (currentOperator == null ? void 0 : currentOperator.InputComponent);
	    applyFilterChanges(_extends({}, item, {
	      operatorValue,
	      value: eraseItemValue ? undefined : item.value
	    }));
	  }, [applyFilterChanges, item, currentColumn, currentOperator]);
	  const changeLinkOperator = react.exports.useCallback(event => {
	    const linkOperator = event.target.value === GridLinkOperator.And.toString() ? GridLinkOperator.And : GridLinkOperator.Or;
	    applyMultiFilterOperatorChanges(linkOperator);
	  }, [applyMultiFilterOperatorChanges]);

	  const handleDeleteFilter = () => {
	    if (rootProps.disableMultipleColumnsFiltering) {
	      if (item.value === undefined) {
	        deleteFilter(item);
	      } else {
	        // TODO v6: simplify the behavior by always remove the filter form
	        applyFilterChanges(_extends({}, item, {
	          value: undefined
	        }));
	      }
	    } else {
	      deleteFilter(item);
	    }
	  };

	  react.exports.useImperativeHandle(focusElementRef, () => ({
	    focus: () => {
	      if (currentOperator != null && currentOperator.InputComponent) {
	        var _valueRef$current;

	        valueRef == null ? void 0 : (_valueRef$current = valueRef.current) == null ? void 0 : _valueRef$current.focus();
	      } else {
	        filterSelectorRef.current.focus();
	      }
	    }
	  }), [currentOperator]);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(GridFilterFormRoot, _extends({
	    ref: ref,
	    className: classes.root
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(FilterFormDeleteIcon, _extends({
	      variant: "standard",
	      as: rootProps.components.BaseFormControl
	    }, baseFormControlProps, deleteIconProps, {
	      className: clsx(classes.deleteIcon, baseFormControlProps.className, deleteIconProps.className),
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(IconButton$1, {
	        "aria-label": apiRef.current.getLocaleText('filterPanelDeleteIconLabel'),
	        title: apiRef.current.getLocaleText('filterPanelDeleteIconLabel'),
	        onClick: handleDeleteFilter,
	        size: "small",
	        children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.FilterPanelDeleteIcon, {
	          fontSize: "small"
	        })
	      })
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(FilterFormLinkOperatorInput, _extends({
	      variant: "standard",
	      as: rootProps.components.BaseFormControl
	    }, baseFormControlProps, linkOperatorInputProps, {
	      sx: _extends({
	        display: hasLinkOperatorColumn ? 'flex' : 'none',
	        visibility: showMultiFilterOperators ? 'visible' : 'hidden'
	      }, baseFormControlProps.sx || {}, linkOperatorInputProps.sx || {}),
	      className: clsx(classes.linkOperatorInput, baseFormControlProps.className, linkOperatorInputProps.className),
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseSelect, _extends({
	        inputProps: {
	          'aria-label': apiRef.current.getLocaleText('filterPanelLinkOperator')
	        },
	        value: multiFilterOperator,
	        onChange: changeLinkOperator,
	        disabled: !!disableMultiFilterOperator || linkOperators.length === 1,
	        native: isBaseSelectNative
	      }, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseSelect, {
	        children: linkOperators.map(linkOperator => /*#__PURE__*/jsxRuntime.exports.jsx(OptionComponent, {
	          value: linkOperator.toString(),
	          children: apiRef.current.getLocaleText(getLinkOperatorLocaleKey(linkOperator))
	        }, linkOperator.toString()))
	      }))
	    })), /*#__PURE__*/jsxRuntime.exports.jsxs(FilterFormColumnInput, _extends({
	      variant: "standard",
	      as: rootProps.components.BaseFormControl
	    }, baseFormControlProps, columnInputProps, {
	      className: clsx(classes.columnInput, baseFormControlProps.className, columnInputProps.className),
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx(InputLabel$1, {
	        htmlFor: columnSelectId,
	        id: columnSelectLabelId,
	        children: apiRef.current.getLocaleText('filterPanelColumns')
	      }), /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseSelect, _extends({
	        labelId: columnSelectLabelId,
	        id: columnSelectId,
	        label: apiRef.current.getLocaleText('filterPanelColumns'),
	        value: item.columnField || '',
	        onChange: changeColumn,
	        native: isBaseSelectNative
	      }, (_rootProps$components4 = rootProps.componentsProps) == null ? void 0 : _rootProps$components4.baseSelect, {
	        children: sortedFilterableColumns.map(col => /*#__PURE__*/jsxRuntime.exports.jsx(OptionComponent, {
	          value: col.field,
	          children: getColumnLabel(col)
	        }, col.field))
	      }))]
	    })), /*#__PURE__*/jsxRuntime.exports.jsxs(FilterFormOperatorInput, _extends({
	      variant: "standard",
	      as: rootProps.components.BaseFormControl
	    }, baseFormControlProps, operatorInputProps, {
	      className: clsx(classes.operatorInput, baseFormControlProps.className, operatorInputProps.className),
	      children: [/*#__PURE__*/jsxRuntime.exports.jsx(InputLabel$1, {
	        htmlFor: operatorSelectId,
	        id: operatorSelectLabelId,
	        children: apiRef.current.getLocaleText('filterPanelOperators')
	      }), /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseSelect, _extends({
	        labelId: operatorSelectLabelId,
	        label: apiRef.current.getLocaleText('filterPanelOperators'),
	        id: operatorSelectId,
	        value: item.operatorValue,
	        onChange: changeOperator,
	        native: isBaseSelectNative,
	        inputRef: filterSelectorRef
	      }, (_rootProps$components5 = rootProps.componentsProps) == null ? void 0 : _rootProps$components5.baseSelect, {
	        children: currentColumn == null ? void 0 : (_currentColumn$filter2 = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter2.map(operator => /*#__PURE__*/jsxRuntime.exports.jsx(OptionComponent, {
	          value: operator.value,
	          children: operator.label || apiRef.current.getLocaleText(`filterOperator${capitalize(operator.value)}`)
	        }, operator.value))
	      }))]
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(FilterFormValueInput, _extends({
	      variant: "standard",
	      as: rootProps.components.BaseFormControl
	    }, baseFormControlProps, valueInputPropsOther, {
	      className: clsx(classes.valueInput, baseFormControlProps.className, valueInputPropsOther.className),
	      children: currentOperator != null && currentOperator.InputComponent ? /*#__PURE__*/jsxRuntime.exports.jsx(currentOperator.InputComponent, _extends({
	        apiRef: apiRef,
	        item: item,
	        applyValue: applyFilterChanges,
	        focusElementRef: valueRef
	      }, currentOperator.InputComponentProps, InputComponentProps)) : null
	    }))]
	  }));
	});

	const _excluded$j = ["linkOperators", "columnsSort", "filterFormProps", "children"];
	const GridFilterPanel = /*#__PURE__*/react.exports.forwardRef(function GridFilterPanel(props, ref) {
	  var _rootProps$components;

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);
	  const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);
	  const lastFilterRef = react.exports.useRef(null);

	  const {
	    linkOperators = [GridLinkOperator.And, GridLinkOperator.Or],
	    columnsSort,
	    filterFormProps
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$j);

	  const applyFilter = react.exports.useCallback(item => {
	    apiRef.current.upsertFilterItem(item);
	  }, [apiRef]);
	  const applyFilterLinkOperator = react.exports.useCallback(operator => {
	    apiRef.current.setFilterLinkOperator(operator);
	  }, [apiRef]);
	  const getDefaultItem = react.exports.useCallback(() => {
	    const firstColumnWithOperator = filterableColumns.find(colDef => {
	      var _colDef$filterOperato;

	      return (_colDef$filterOperato = colDef.filterOperators) == null ? void 0 : _colDef$filterOperato.length;
	    });

	    if (!firstColumnWithOperator) {
	      return null;
	    }

	    return {
	      columnField: firstColumnWithOperator.field,
	      operatorValue: firstColumnWithOperator.filterOperators[0].value,
	      id: Math.round(Math.random() * 1e5)
	    };
	  }, [filterableColumns]);
	  const items = react.exports.useMemo(() => {
	    if (filterModel.items.length) {
	      return filterModel.items;
	    }

	    const defaultItem = getDefaultItem();
	    return defaultItem ? [defaultItem] : [];
	  }, [filterModel.items, getDefaultItem]);
	  const hasMultipleFilters = items.length > 1;

	  const addNewFilter = () => {
	    const defaultItem = getDefaultItem();

	    if (!defaultItem) {
	      return;
	    }

	    apiRef.current.upsertFilterItems([...items, defaultItem]);
	  };

	  const deleteFilter = react.exports.useCallback(item => {
	    const shouldCloseFilterPanel = items.length === 1;
	    apiRef.current.deleteFilterItem(item);

	    if (shouldCloseFilterPanel) {
	      apiRef.current.hideFilterPanel();
	    }
	  }, [apiRef, items.length]);
	  react.exports.useEffect(() => {
	    if (linkOperators.length > 0 && filterModel.linkOperator && !linkOperators.includes(filterModel.linkOperator)) {
	      applyFilterLinkOperator(linkOperators[0]);
	    }
	  }, [linkOperators, applyFilterLinkOperator, filterModel.linkOperator]);
	  react.exports.useEffect(() => {
	    if (items.length > 0) {
	      lastFilterRef.current.focus();
	    }
	  }, [items.length]);
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(GridPanelWrapper, _extends({
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(GridPanelContent, {
	      children: items.map((item, index) => /*#__PURE__*/jsxRuntime.exports.jsx(GridFilterForm, _extends({
	        item: item,
	        applyFilterChanges: applyFilter,
	        deleteFilter: deleteFilter,
	        hasMultipleFilters: hasMultipleFilters,
	        showMultiFilterOperators: index > 0,
	        multiFilterOperator: filterModel.linkOperator,
	        disableMultiFilterOperator: index !== 1,
	        applyMultiFilterOperatorChanges: applyFilterLinkOperator,
	        focusElementRef: index === items.length - 1 ? lastFilterRef : null,
	        linkOperators: linkOperators,
	        columnsSort: columnsSort
	      }, filterFormProps), item.id == null ? index : item.id))
	    }), !rootProps.disableMultipleColumnsFiltering && /*#__PURE__*/jsxRuntime.exports.jsx(GridPanelFooter, {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.BaseButton, _extends({
	        onClick: addNewFilter,
	        startIcon: /*#__PURE__*/jsxRuntime.exports.jsx(GridAddIcon, {})
	      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseButton, {
	        children: apiRef.current.getLocaleText('filterPanelAddFilter')
	      }))
	    })]
	  }));
	});

	const _excluded$i = ["hideMenu", "options"],
	      _excluded2$3 = ["hideMenu", "options"];
	const GridCsvExportMenuItem = props => {
	  const apiRef = useGridApiContext();

	  const {
	    hideMenu,
	    options
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$i);

	  return /*#__PURE__*/jsxRuntime.exports.jsx(MenuItem$1, _extends({
	    onClick: () => {
	      apiRef.current.exportDataAsCsv(options);
	      hideMenu == null ? void 0 : hideMenu();
	    }
	  }, other, {
	    children: apiRef.current.getLocaleText('toolbarExportCSV')
	  }));
	};
	const GridPrintExportMenuItem = props => {
	  const apiRef = useGridApiContext();

	  const {
	    hideMenu,
	    options
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded2$3);

	  return /*#__PURE__*/jsxRuntime.exports.jsx(MenuItem$1, _extends({
	    onClick: () => {
	      apiRef.current.exportDataAsPrint(options);
	      hideMenu == null ? void 0 : hideMenu();
	    }
	  }, other, {
	    children: apiRef.current.getLocaleText('toolbarExportPrint')
	  }));
	};

	const getDefaultGridFilterModel = () => ({
	  items: [],
	  linkOperator: GridLinkOperator.And,
	  quickFilterValues: [],
	  quickFilterLogicOperator: GridLinkOperator.And
	});

	const _excluded$h = ["className", "rowCount", "visibleRowCount"];

	const useUtilityClasses$a = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['rowCount']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridRowCountRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'RowCount',
	  overridesResolver: (props, styles) => styles.rowCount
	})(({
	  theme
	}) => ({
	  alignItems: 'center',
	  display: 'flex',
	  margin: theme.spacing(0, 2)
	}));
	const GridRowCount = /*#__PURE__*/react.exports.forwardRef(function GridRowCount(props, ref) {
	  const {
	    className,
	    rowCount,
	    visibleRowCount
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$h);

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$a(ownerState);

	  if (rowCount === 0) {
	    return null;
	  }

	  const text = visibleRowCount < rowCount ? apiRef.current.getLocaleText('footerTotalVisibleRows')(visibleRowCount, rowCount) : rowCount.toLocaleString();
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(GridRowCountRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other, {
	    children: [apiRef.current.getLocaleText('footerTotalRows'), " ", text]
	  }));
	});

	const _excluded$g = ["className", "selectedRowCount"];

	const useUtilityClasses$9 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['selectedRowCount']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridSelectedRowCountRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'SelectedRowCount',
	  overridesResolver: (props, styles) => styles.selectedRowCount
	})(({
	  theme
	}) => ({
	  alignItems: 'center',
	  display: 'flex',
	  margin: theme.spacing(0, 2),
	  visibility: 'hidden',
	  width: 0,
	  height: 0,
	  [theme.breakpoints.up('sm')]: {
	    visibility: 'visible',
	    width: 'auto',
	    height: 'auto'
	  }
	}));
	const GridSelectedRowCount = /*#__PURE__*/react.exports.forwardRef(function GridSelectedRowCount(props, ref) {
	  const {
	    className,
	    selectedRowCount
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$g);

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$9(ownerState);
	  const rowSelectedText = apiRef.current.getLocaleText('footerRowSelected')(selectedRowCount);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridSelectedRowCountRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other, {
	    children: rowSelectedText
	  }));
	});

	const GridFooter = /*#__PURE__*/react.exports.forwardRef(function GridFooter(props, ref) {
	  var _rootProps$components;

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const totalTopLevelRowCount = useGridSelector(apiRef, gridTopLevelRowCountSelector);
	  const selectedRowCount = useGridSelector(apiRef, selectedGridRowsCountSelector);
	  const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);
	  const selectedRowCountElement = !rootProps.hideFooterSelectedRowCount && selectedRowCount > 0 ? /*#__PURE__*/jsxRuntime.exports.jsx(GridSelectedRowCount, {
	    selectedRowCount: selectedRowCount
	  }) : /*#__PURE__*/jsxRuntime.exports.jsx("div", {});
	  const rowCountElement = !rootProps.hideFooterRowCount && !rootProps.pagination ? /*#__PURE__*/jsxRuntime.exports.jsx(GridRowCount, {
	    rowCount: totalTopLevelRowCount,
	    visibleRowCount: visibleTopLevelRowCount
	  }) : null;

	  const paginationElement = rootProps.pagination && !rootProps.hideFooterPagination && rootProps.components.Pagination && /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.Pagination, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.pagination));

	  return /*#__PURE__*/jsxRuntime.exports.jsxs(GridFooterContainer, _extends({
	    ref: ref
	  }, props, {
	    children: [selectedRowCountElement, rowCountElement, paginationElement]
	  }));
	});

	const GridHeader = /*#__PURE__*/react.exports.forwardRef(function GridHeader(props, ref) {
	  var _rootProps$components, _rootProps$components2;

	  const rootProps = useGridRootProps();
	  return /*#__PURE__*/jsxRuntime.exports.jsxs("div", _extends({
	    ref: ref
	  }, props, {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.PreferencesPanel, _extends({}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.preferencesPanel)), rootProps.components.Toolbar && /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.Toolbar, _extends({}, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.toolbar))]
	  }));
	});

	const GridLoadingOverlay = /*#__PURE__*/react.exports.forwardRef(function GridLoadingOverlay(props, ref) {
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridOverlay, _extends({
	    ref: ref
	  }, props, {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(CircularProgress$1, {})
	  }));
	});

	const GridNoRowsOverlay = /*#__PURE__*/react.exports.forwardRef(function GridNoRowsOverlay(props, ref) {
	  const apiRef = useGridApiContext();
	  const noRowsLabel = apiRef.current.getLocaleText('noRowsLabel');
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridOverlay, _extends({
	    ref: ref
	  }, props, {
	    children: noRowsLabel
	  }));
	});

	const GridPaginationRoot = styled$1(TablePagination$1)(({
	  theme
	}) => ({
	  [`& .${tablePaginationClasses$1.selectLabel}`]: {
	    display: 'none',
	    [theme.breakpoints.up('sm')]: {
	      display: 'block'
	    }
	  },
	  [`& .${tablePaginationClasses$1.input}`]: {
	    display: 'none',
	    [theme.breakpoints.up('sm')]: {
	      display: 'inline-flex'
	    }
	  }
	}));
	const GridPagination = /*#__PURE__*/react.exports.forwardRef(function GridPagination(props, ref) {
	  var _rootProps$rowsPerPag;

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const paginationState = useGridSelector(apiRef, gridPaginationSelector);
	  const lastPage = react.exports.useMemo(() => Math.floor(paginationState.rowCount / (paginationState.pageSize || 1)), [paginationState.rowCount, paginationState.pageSize]);
	  const handlePageSizeChange = react.exports.useCallback(event => {
	    const newPageSize = Number(event.target.value);
	    apiRef.current.setPageSize(newPageSize);
	  }, [apiRef]);
	  const handlePageChange = react.exports.useCallback((event, page) => {
	    apiRef.current.setPage(page);
	  }, [apiRef]);

	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridPaginationRoot, _extends({
	    ref: ref,
	    component: "div",
	    count: paginationState.rowCount,
	    page: paginationState.page <= lastPage ? paginationState.page : lastPage,
	    rowsPerPageOptions: (_rootProps$rowsPerPag = rootProps.rowsPerPageOptions) != null && _rootProps$rowsPerPag.includes(paginationState.pageSize) ? rootProps.rowsPerPageOptions : [],
	    rowsPerPage: paginationState.pageSize,
	    onPageChange: handlePageChange,
	    onRowsPerPageChange: handlePageSizeChange
	  }, apiRef.current.getLocaleText('MuiTablePagination'), props));
	});

	const getVisibleRows = (apiRef, props) => {
	  let rows;
	  let range;

	  if (props.pagination && props.paginationMode === 'client') {
	    range = gridPaginationRowRangeSelector(apiRef);
	    rows = gridPaginatedVisibleSortedGridRowEntriesSelector(apiRef);
	  } else {
	    rows = gridVisibleSortedRowEntriesSelector(apiRef);

	    if (rows.length === 0) {
	      range = null;
	    } else {
	      range = {
	        firstRowIndex: 0,
	        lastRowIndex: rows.length - 1
	      };
	    }
	  }

	  return {
	    rows,
	    range
	  };
	};
	/**
	 * Computes the list of rows that are reachable by scroll.
	 * Depending on whether pagination is enabled, it will return the rows in the current page.
	 * - If the pagination is disabled or in server mode, it equals all the visible rows.
	 * - If the row tree has several layers, it contains up to `state.pageSize` top level rows and all their descendants.
	 * - If the row tree is flat, it only contains up to `state.pageSize` rows.
	 */

	const useGridVisibleRows = (apiRef, props) => {
	  const response = getVisibleRows(apiRef, props);
	  return react.exports.useMemo(() => ({
	    rows: response.rows,
	    range: response.range
	  }), [response.rows, response.range]);
	};

	// Can't import from pro package - hence duplication
	const GRID_DETAIL_PANEL_TOGGLE_FIELD = '__detail_panel_toggle__';

	const _excluded$f = ["selected", "rowId", "row", "index", "style", "position", "rowHeight", "className", "visibleColumns", "renderedColumns", "containerWidth", "firstColumnToRender", "lastColumnToRender", "cellFocus", "cellTabIndex", "editRowsState", "isLastVisible", "onClick", "onDoubleClick", "onMouseEnter", "onMouseLeave"],
	      _excluded2$2 = ["changeReason"];

	const useUtilityClasses$8 = ownerState => {
	  const {
	    editable,
	    editing,
	    selected,
	    isLastVisible,
	    rowHeight,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['row', selected && 'selected', editable && 'row--editable', editing && 'row--editing', isLastVisible && 'row--lastVisible', rowHeight === 'auto' && 'row--dynamicHeight']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const EmptyCell = ({
	  width
	}) => {
	  if (!width) {
	    return null;
	  }

	  const style = {
	    width
	  };
	  return /*#__PURE__*/jsxRuntime.exports.jsx("div", {
	    className: "MuiDataGrid-cell",
	    style: style
	  }); // TODO change to .MuiDataGrid-emptyCell or .MuiDataGrid-rowFiller
	};

	const GridRow = /*#__PURE__*/react.exports.forwardRef(function GridRow(props, refProp) {
	  var _apiRef$current$getRo;

	  const {
	    selected,
	    rowId,
	    row,
	    index,
	    style: styleProp,
	    position,
	    rowHeight,
	    className,
	    visibleColumns,
	    renderedColumns,
	    containerWidth,
	    firstColumnToRender,
	    cellFocus,
	    cellTabIndex,
	    editRowsState,
	    isLastVisible = false,
	    onClick,
	    onDoubleClick,
	    onMouseEnter,
	    onMouseLeave
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$f);

	  const apiRef = useGridApiContext();
	  const ref = react.exports.useRef(null);
	  const rootProps = useGridRootProps();
	  const currentPage = useGridVisibleRows(apiRef, rootProps);
	  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);
	  const sortModel = useGridSelector(apiRef, gridSortModelSelector);
	  const treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);
	  const headerGroupingMaxDepth = useGridSelector(apiRef, gridDensityHeaderGroupingMaxDepthSelector);
	  const handleRef = useForkRef(ref, refProp);
	  const ariaRowIndex = index + headerGroupingMaxDepth + 2; // 1 for the header row and 1 as it's 1-based

	  const {
	    hasScrollX,
	    hasScrollY
	  } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {
	    hasScrollX: false,
	    hasScrollY: false
	  };
	  const ownerState = {
	    selected,
	    isLastVisible,
	    classes: rootProps.classes,
	    editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,
	    editable: rootProps.editMode === GridEditModes.Row,
	    rowHeight
	  };
	  const classes = useUtilityClasses$8(ownerState);
	  react.exports.useLayoutEffect(() => {
	    if (rowHeight === 'auto' && ref.current && typeof ResizeObserver === 'undefined') {
	      // Fallback for IE
	      apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight, position);
	    }
	  }, [apiRef, rowHeight, rowId, position]);
	  react.exports.useLayoutEffect(() => {
	    if (currentPage.range) {
	      // The index prop is relative to the rows from all pages. As example, the index prop of the
	      // first row is 5 if pageSize=5 and page=1. However, the index used by the virtualization
	      // doesn't care about pagination and considers the rows from the current page only, so the
	      // first row always has index=0. We need to subtract the index of the first row to make it
	      // compatible with the index used by the virtualization.
	      const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId); // pinned rows are not part of the visible rows

	      if (rowIndex != null) {
	        apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);
	      }
	    }

	    const rootElement = ref.current;
	    const hasFixedHeight = rowHeight !== 'auto';

	    if (!rootElement || hasFixedHeight || typeof ResizeObserver === 'undefined') {
	      return undefined;
	    }

	    const resizeObserver = new ResizeObserver(entries => {
	      const [entry] = entries;
	      const height = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;
	      apiRef.current.unstable_storeRowHeightMeasurement(rowId, height, position);
	    });
	    resizeObserver.observe(rootElement);
	    return () => resizeObserver.disconnect();
	  }, [apiRef, currentPage.range, index, rowHeight, rowId, position]);
	  const publish = react.exports.useCallback((eventName, propHandler) => event => {
	    // Ignore portal
	    // The target is not an element when triggered by a Select inside the cell
	    // See https://github.com/mui/material-ui/issues/10534
	    if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) {
	      return;
	    } // The row might have been deleted


	    if (!apiRef.current.getRow(rowId)) {
	      return;
	    }

	    apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);

	    if (propHandler) {
	      propHandler(event);
	    }
	  }, [apiRef, rowId]);
	  const publishClick = react.exports.useCallback(event => {
	    const cell = findParentElementFromClassName(event.target, gridClasses.cell);
	    const field = cell == null ? void 0 : cell.getAttribute('data-field'); // Check if the field is available because the cell that fills the empty
	    // space of the row has no field.

	    if (field) {
	      // User clicked in the checkbox added by checkboxSelection
	      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
	        return;
	      } // User opened a detail panel


	      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
	        return;
	      } // User reorders a row


	      if (field === '__reorder__') {
	        return;
	      } // User is editing a cell


	      if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {
	        return;
	      } // User clicked a button from the "actions" column type


	      const column = apiRef.current.getColumn(field);

	      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {
	        return;
	      }
	    }

	    publish('rowClick', onClick)(event);
	  }, [apiRef, onClick, publish, rowId]);
	  const getCell = react.exports.useCallback((column, cellProps) => {
	    var _rootProps$components;

	    const cellParams = apiRef.current.getCellParams(rowId, column.field);
	    const classNames = [];
	    const disableDragEvents = rootProps.disableColumnReorder && column.disableReorder || !rootProps.rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;

	    if (column.cellClassName) {
	      classNames.push(clsx(typeof column.cellClassName === 'function' ? column.cellClassName(cellParams) : column.cellClassName));
	    }

	    const editCellState = editRowsState[rowId] ? editRowsState[rowId][column.field] : null;
	    let content = null;

	    if (editCellState == null && column.renderCell) {
	      var _rootProps$classes;

	      content = column.renderCell(_extends({}, cellParams, {
	        api: apiRef.current
	      })); // TODO move to GridCell

	      classNames.push(clsx(gridClasses['cell--withRenderer'], (_rootProps$classes = rootProps.classes) == null ? void 0 : _rootProps$classes['cell--withRenderer']));
	    }

	    if (editCellState != null && column.renderEditCell) {
	      var _rootProps$classes2;

	      let updatedRow = row;

	      if (apiRef.current.unstable_getRowWithUpdatedValues) {
	        // Only the new editing API has this method
	        updatedRow = apiRef.current.unstable_getRowWithUpdatedValues(rowId, column.field);
	      }

	      const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded2$2);

	      const params = _extends({}, cellParams, {
	        row: updatedRow
	      }, editCellStateRest, {
	        api: apiRef.current
	      });

	      content = column.renderEditCell(params); // TODO move to GridCell

	      classNames.push(clsx(gridClasses['cell--editing'], (_rootProps$classes2 = rootProps.classes) == null ? void 0 : _rootProps$classes2['cell--editing']));
	    }

	    if (rootProps.getCellClassName) {
	      // TODO move to GridCell
	      classNames.push(rootProps.getCellClassName(cellParams));
	    }

	    const hasFocus = cellFocus !== null && cellFocus.id === rowId && cellFocus.field === column.field;
	    const tabIndex = cellTabIndex !== null && cellTabIndex.id === rowId && cellTabIndex.field === column.field && cellParams.cellMode === 'view' ? 0 : -1;
	    return /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.Cell, _extends({
	      value: cellParams.value,
	      field: column.field,
	      width: cellProps.width,
	      rowId: rowId,
	      height: rowHeight,
	      showRightBorder: cellProps.showRightBorder,
	      formattedValue: cellParams.formattedValue,
	      align: column.align || 'left',
	      cellMode: cellParams.cellMode,
	      colIndex: cellProps.indexRelativeToAllColumns,
	      isEditable: cellParams.isEditable,
	      hasFocus: hasFocus,
	      tabIndex: tabIndex,
	      className: clsx(classNames),
	      colSpan: cellProps.colSpan,
	      disableDragEvents: disableDragEvents
	    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.cell, {
	      children: content
	    }), column.field);
	  }, [apiRef, cellTabIndex, editRowsState, cellFocus, rootProps, row, rowHeight, rowId, treeDepth, sortModel.length]);
	  const sizes = apiRef.current.unstable_getRowInternalSizes(rowId);
	  let minHeight = rowHeight;

	  if (minHeight === 'auto' && sizes) {
	    let numberOfBaseSizes = 0;
	    const maximumSize = Object.entries(sizes).reduce((acc, [key, size]) => {
	      const isBaseHeight = /^base[A-Z]/.test(key);

	      if (!isBaseHeight) {
	        return acc;
	      }

	      numberOfBaseSizes += 1;

	      if (size > acc) {
	        return size;
	      }

	      return acc;
	    }, 0);

	    if (maximumSize > 0 && numberOfBaseSizes > 1) {
	      minHeight = maximumSize;
	    }
	  }

	  const style = _extends({}, styleProp, {
	    maxHeight: rowHeight === 'auto' ? 'none' : rowHeight,
	    // max-height doesn't support "auto"
	    minHeight
	  });

	  if (sizes != null && sizes.spacingTop) {
	    const property = rootProps.rowSpacingType === 'border' ? 'borderTopWidth' : 'marginTop';
	    style[property] = sizes.spacingTop;
	  }

	  if (sizes != null && sizes.spacingBottom) {
	    const property = rootProps.rowSpacingType === 'border' ? 'borderBottomWidth' : 'marginBottom';
	    let propertyValue = style[property]; // avoid overriding existing value

	    if (typeof propertyValue !== 'number') {
	      propertyValue = parseInt(propertyValue || '0', 10);
	    }

	    propertyValue += sizes.spacingBottom;
	    style[property] = propertyValue;
	  }

	  const rowClassNames = apiRef.current.unstable_applyPipeProcessors('rowClassName', [], rowId);

	  if (typeof rootProps.getRowClassName === 'function') {
	    var _currentPage$range;

	    const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);

	    const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {
	      isFirstVisible: indexRelativeToCurrentPage === 0,
	      isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
	      indexRelativeToCurrentPage
	    });

	    rowClassNames.push(rootProps.getRowClassName(rowParams));
	  }

	  const randomNumber = randomNumberBetween(10000, 20, 80);
	  const cells = [];

	  for (let i = 0; i < renderedColumns.length; i += 1) {
	    const column = renderedColumns[i];
	    const indexRelativeToAllColumns = firstColumnToRender + i;
	    const isLastColumn = indexRelativeToAllColumns === visibleColumns.length - 1;
	    const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;
	    const showRightBorder = !isLastColumn ? rootProps.showCellRightBorder : !removeLastBorderRight && rootProps.disableExtendRowFullWidth;
	    const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);

	    if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
	      if (row) {
	        const {
	          colSpan,
	          width
	        } = cellColSpanInfo.cellProps;
	        const cellProps = {
	          width,
	          colSpan,
	          showRightBorder,
	          indexRelativeToAllColumns
	        };
	        cells.push(getCell(column, cellProps));
	      } else {
	        const {
	          width
	        } = cellColSpanInfo.cellProps;
	        const contentWidth = Math.round(randomNumber());
	        cells.push( /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.SkeletonCell, {
	          width: width,
	          contentWidth: contentWidth,
	          field: column.field,
	          align: column.align
	        }, column.field));
	      }
	    }
	  }

	  const emptyCellWidth = containerWidth - columnsTotalWidth;
	  const eventHandlers = row ? {
	    onClick: publishClick,
	    onDoubleClick: publish('rowDoubleClick', onDoubleClick),
	    onMouseEnter: publish('rowMouseEnter', onMouseEnter),
	    onMouseLeave: publish('rowMouseLeave', onMouseLeave)
	  } : null;
	  return /*#__PURE__*/jsxRuntime.exports.jsxs("div", _extends({
	    ref: handleRef,
	    "data-id": rowId,
	    "data-rowindex": index,
	    role: "row",
	    className: clsx(...rowClassNames, classes.root, className),
	    "aria-rowindex": ariaRowIndex,
	    "aria-selected": selected,
	    style: style
	  }, eventHandlers, other, {
	    children: [cells, emptyCellWidth > 0 && /*#__PURE__*/jsxRuntime.exports.jsx(EmptyCell, {
	      width: emptyCellWidth
	    })]
	  }));
	});

	// If no effect ran after this amount of time, we assume that the render was not committed by React
	const CLEANUP_TIMER_LOOP_MILLIS = 1000;
	class TimerBasedCleanupTracking {
	  constructor(timeout = CLEANUP_TIMER_LOOP_MILLIS) {
	    this.timeouts = new Map();
	    this.cleanupTimeout = CLEANUP_TIMER_LOOP_MILLIS;
	    this.cleanupTimeout = timeout;
	  }

	  register(object, unsubscribe, unregisterToken) {
	    if (!this.timeouts) {
	      this.timeouts = new Map();
	    }

	    const timeout = setTimeout(() => {
	      if (typeof unsubscribe === 'function') {
	        unsubscribe();
	      }

	      this.timeouts.delete(unregisterToken.cleanupToken);
	    }, this.cleanupTimeout);
	    this.timeouts.set(unregisterToken.cleanupToken, timeout);
	  }

	  unregister(unregisterToken) {
	    const timeout = this.timeouts.get(unregisterToken.cleanupToken);

	    if (timeout) {
	      this.timeouts.delete(unregisterToken.cleanupToken);
	      clearTimeout(timeout);
	    }
	  }

	  reset() {
	    if (this.timeouts) {
	      this.timeouts.forEach((value, key) => {
	        this.unregister({
	          cleanupToken: key
	        });
	      });
	      this.timeouts = undefined;
	    }
	  }

	}

	class FinalizationRegistryBasedCleanupTracking {
	  constructor() {
	    this.registry = new FinalizationRegistry(unsubscribe => {
	      if (typeof unsubscribe === 'function') {
	        unsubscribe();
	      }
	    });
	  }

	  register(object, unsubscribe, unregisterToken) {
	    this.registry.register(object, unsubscribe, unregisterToken);
	  }

	  unregister(unregisterToken) {
	    this.registry.unregister(unregisterToken);
	  } // eslint-disable-next-line class-methods-use-this


	  reset() {}

	}

	/**
	 * Signal to the underlying logic what version of the public component API
	 * of the data grid is exposed.
	 */
	var GridSignature;

	(function (GridSignature) {
	  GridSignature["DataGrid"] = "DataGrid";
	  GridSignature["DataGridPro"] = "DataGridPro";
	})(GridSignature || (GridSignature = {}));

	// We use class to make it easier to detect in heap snapshots by name
	class ObjectToBeRetainedByReact {} // Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts
	// Check https://github.com/facebook/react/issues/15317 to get more information


	function createUseGridApiEventHandler(registryContainer) {
	  let cleanupTokensCounter = 0;
	  return function useGridApiEventHandler(apiRef, eventName, handler, options) {
	    if (registryContainer.registry === null) {
	      registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();
	    }

	    const [objectRetainedByReact] = react.exports.useState(new ObjectToBeRetainedByReact());
	    const subscription = react.exports.useRef(null);
	    const handlerRef = react.exports.useRef();
	    handlerRef.current = handler;
	    const cleanupTokenRef = react.exports.useRef(null);

	    if (!subscription.current && handlerRef.current) {
	      const enhancedHandler = (params, event, details) => {
	        if (!event.defaultMuiPrevented) {
	          var _handlerRef$current;

	          (_handlerRef$current = handlerRef.current) == null ? void 0 : _handlerRef$current.call(handlerRef, params, event, details);
	        }
	      };

	      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
	      cleanupTokensCounter += 1;
	      cleanupTokenRef.current = {
	        cleanupToken: cleanupTokensCounter
	      };
	      registryContainer.registry.register(objectRetainedByReact, // The callback below will be called once this reference stops being retained
	      () => {
	        var _subscription$current;

	        (_subscription$current = subscription.current) == null ? void 0 : _subscription$current.call(subscription);
	        subscription.current = null;
	        cleanupTokenRef.current = null;
	      }, cleanupTokenRef.current);
	    } else if (!handlerRef.current && subscription.current) {
	      subscription.current();
	      subscription.current = null;

	      if (cleanupTokenRef.current) {
	        registryContainer.registry.unregister(cleanupTokenRef.current);
	        cleanupTokenRef.current = null;
	      }
	    }

	    react.exports.useEffect(() => {
	      if (!subscription.current && handlerRef.current) {
	        const enhancedHandler = (params, event, details) => {
	          if (!event.defaultMuiPrevented) {
	            var _handlerRef$current2;

	            (_handlerRef$current2 = handlerRef.current) == null ? void 0 : _handlerRef$current2.call(handlerRef, params, event, details);
	          }
	        };

	        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
	      }

	      if (cleanupTokenRef.current && registryContainer.registry) {
	        // If the effect was called, it means that this render was committed
	        // so we can trust the cleanup function to remove the listener.
	        registryContainer.registry.unregister(cleanupTokenRef.current);
	        cleanupTokenRef.current = null;
	      }

	      return () => {
	        var _subscription$current2;

	        (_subscription$current2 = subscription.current) == null ? void 0 : _subscription$current2.call(subscription);
	        subscription.current = null;
	      };
	    }, [apiRef, eventName, options]);
	  };
	}
	const registryContainer = {
	  registry: null
	}; // TODO: move to @mui/x-data-grid/internals
	const useGridApiEventHandler = createUseGridApiEventHandler(registryContainer);
	const optionsSubscriberOptions = {
	  isFirst: true
	};
	function useGridApiOptionHandler(apiRef, eventName, handler) {
	  // Validate that only one per event name?
	  useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);
	}

	const CLIFF = 1;
	const SLOP = 1.5;

	const useUtilityClasses$7 = ownerState => {
	  const {
	    scrollDirection,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['scrollArea', `scrollArea--${scrollDirection}`]
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridScrollAreaRawRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'ScrollArea',
	  overridesResolver: (props, styles) => [{
	    [`&.${gridClasses['scrollArea--left']}`]: styles['scrollArea--left']
	  }, {
	    [`&.${gridClasses['scrollArea--right']}`]: styles['scrollArea--right']
	  }, styles.scrollArea]
	})(() => ({
	  position: 'absolute',
	  top: 0,
	  zIndex: 101,
	  width: 20,
	  bottom: 0,
	  [`&.${gridClasses['scrollArea--left']}`]: {
	    left: 0
	  },
	  [`&.${gridClasses['scrollArea--right']}`]: {
	    right: 0
	  }
	}));

	function GridScrollAreaRaw(props) {
	  const {
	    scrollDirection
	  } = props;
	  const rootRef = react.exports.useRef(null);
	  const apiRef = useGridApiContext();
	  const timeout = react.exports.useRef();
	  const [dragging, setDragging] = react.exports.useState(false);
	  const height = useGridSelector(apiRef, gridDensityHeaderHeightSelector);
	  const scrollPosition = react.exports.useRef({
	    left: 0,
	    top: 0
	  });
	  const rootProps = useGridRootProps();

	  const ownerState = _extends({}, props, {
	    classes: rootProps.classes
	  });

	  const classes = useUtilityClasses$7(ownerState);
	  const handleScrolling = react.exports.useCallback(newScrollPosition => {
	    scrollPosition.current = newScrollPosition;
	  }, []);
	  const handleDragOver = react.exports.useCallback(event => {
	    let offset;

	    if (scrollDirection === 'left') {
	      offset = event.clientX - rootRef.current.getBoundingClientRect().right;
	    } else if (scrollDirection === 'right') {
	      offset = Math.max(1, event.clientX - rootRef.current.getBoundingClientRect().left);
	    } else {
	      throw new Error('MUI: Wrong drag direction');
	    }

	    offset = (offset - CLIFF) * SLOP + CLIFF;
	    clearTimeout(timeout.current); // Avoid freeze and inertia.

	    timeout.current = setTimeout(() => {
	      apiRef.current.scroll({
	        left: scrollPosition.current.left + offset,
	        top: scrollPosition.current.top
	      });
	    });
	  }, [scrollDirection, apiRef]);
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(timeout.current);
	    };
	  }, []);
	  const toggleDragging = react.exports.useCallback(() => {
	    setDragging(prevDragging => !prevDragging);
	  }, []);
	  useGridApiEventHandler(apiRef, 'rowsScroll', handleScrolling);
	  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', toggleDragging);
	  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', toggleDragging);
	  return dragging ? /*#__PURE__*/jsxRuntime.exports.jsx(GridScrollAreaRawRoot, {
	    ref: rootRef,
	    className: clsx(classes.root),
	    onDragOver: handleDragOver,
	    style: {
	      height
	    }
	  }) : null;
	}
	const GridScrollArea = /*#__PURE__*/react.exports.memo(GridScrollAreaRaw);

	const GridContextProvider = ({
	  apiRef,
	  props,
	  children
	}) => {
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridRootPropsContext.Provider, {
	    value: props,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(GridApiContext.Provider, {
	      value: apiRef,
	      children: children
	    })
	  });
	};

	const forceDebug = localStorageAvailable() && window.localStorage.getItem('DEBUG') != null;

	const noop = () => {};

	const noopLogger = {
	  debug: noop,
	  info: noop,
	  warn: noop,
	  error: noop
	};
	const LOG_LEVELS = ['debug', 'info', 'warn', 'error'];

	function getAppender(name, logLevel, appender = console) {
	  const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);

	  if (minLogLevelIdx === -1) {
	    throw new Error(`MUI: Log level ${logLevel} not recognized.`);
	  }

	  const logger = LOG_LEVELS.reduce((loggerObj, method, idx) => {
	    if (idx >= minLogLevelIdx) {
	      loggerObj[method] = (...args) => {
	        const [message, ...other] = args;
	        appender[method](`MUI: ${name} - ${message}`, ...other);
	      };
	    } else {
	      loggerObj[method] = noop;
	    }

	    return loggerObj;
	  }, {});
	  return logger;
	}

	const useGridLoggerFactory = (apiRef, props) => {
	  apiRef.current.getLogger = react.exports.useCallback(name => {
	    if (forceDebug) {
	      return getAppender(name, 'debug', props.logger);
	    }

	    if (!props.logLevel) {
	      return noopLogger;
	    }

	    return getAppender(name, props.logLevel.toString(), props.logger);
	  }, [props.logLevel, props.logger]);
	};

	function useGridApiMethod(apiRef, apiMethods, // TODO: Remove `apiName
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	apiName) {
	  const apiMethodsRef = react.exports.useRef(apiMethods);
	  const [apiMethodsNames] = react.exports.useState(Object.keys(apiMethods));
	  const installMethods = react.exports.useCallback(() => {
	    if (!apiRef.current) {
	      return;
	    }

	    apiMethodsNames.forEach(methodName => {
	      if (!apiRef.current.hasOwnProperty(methodName)) {
	        apiRef.current[methodName] = (...args) => apiMethodsRef.current[methodName](...args);
	      }
	    });
	  }, [apiMethodsNames, apiRef]);
	  react.exports.useEffect(() => {
	    apiMethodsRef.current = apiMethods;
	  }, [apiMethods]);
	  react.exports.useEffect(() => {
	    installMethods();
	  }, [installMethods]);
	  installMethods();
	}

	// Used https://gist.github.com/mudge/5830382 as a starting point.
	// See https://github.com/browserify/events/blob/master/events.js for
	// the Node.js (https://nodejs.org/api/events.html) polyfill used by webpack.
	class EventManager {
	  constructor() {
	    this.maxListeners = 10;
	    this.warnOnce = false;
	    this.events = {};
	  }

	  on(eventName, listener, options = {}) {
	    let collection = this.events[eventName];

	    if (!collection) {
	      collection = {
	        highPriority: new Map(),
	        regular: new Map()
	      };
	      this.events[eventName] = collection;
	    }

	    if (options.isFirst) {
	      collection.highPriority.set(listener, true);
	    } else {
	      collection.regular.set(listener, true);
	    }
	  }

	  removeListener(eventName, listener) {
	    if (this.events[eventName]) {
	      this.events[eventName].regular.delete(listener);
	      this.events[eventName].highPriority.delete(listener);
	    }
	  }

	  removeAllListeners() {
	    this.events = {};
	  }

	  emit(eventName, ...args) {
	    const collection = this.events[eventName];

	    if (!collection) {
	      return;
	    }

	    const highPriorityListeners = Array.from(collection.highPriority.keys());
	    const regularListeners = Array.from(collection.regular.keys());

	    for (let i = highPriorityListeners.length - 1; i >= 0; i -= 1) {
	      const listener = highPriorityListeners[i];

	      if (collection.highPriority.has(listener)) {
	        listener.apply(this, args);
	      }
	    }

	    for (let i = 0; i < regularListeners.length; i += 1) {
	      const listener = regularListeners[i];

	      if (collection.regular.has(listener)) {
	        listener.apply(this, args);
	      }
	    }
	  }

	  once(eventName, listener) {
	    // eslint-disable-next-line consistent-this
	    const that = this;
	    this.on(eventName, function oneTimeListener(...args) {
	      that.removeListener(eventName, oneTimeListener);
	      listener.apply(that, args);
	    });
	  }

	}

	const isSyntheticEvent = event => {
	  return event.isPropagationStopped !== undefined;
	};

	let globalId = 0;
	function useGridApiInitialization(inputApiRef, props) {
	  const apiRef = react.exports.useRef();

	  if (!apiRef.current) {
	    apiRef.current = {
	      unstable_eventManager: new EventManager(),
	      unstable_caches: {},
	      state: {},
	      instanceId: globalId
	    };
	    globalId += 1;
	  }

	  react.exports.useImperativeHandle(inputApiRef, () => apiRef.current, [apiRef]);
	  const publishEvent = react.exports.useCallback((...args) => {
	    const [name, params, event = {}] = args;
	    event.defaultMuiPrevented = false;

	    if (isSyntheticEvent(event) && event.isPropagationStopped()) {
	      return;
	    }

	    const details = props.signature === GridSignature.DataGridPro ? {
	      api: apiRef.current
	    } : {};
	    apiRef.current.unstable_eventManager.emit(name, params, event, details);
	  }, [apiRef, props.signature]);
	  const subscribeEvent = react.exports.useCallback((event, handler, options) => {
	    apiRef.current.unstable_eventManager.on(event, handler, options);
	    const api = apiRef.current;
	    return () => {
	      api.unstable_eventManager.removeListener(event, handler);
	    };
	  }, [apiRef]);
	  const showError = react.exports.useCallback(args => {
	    apiRef.current.publishEvent('componentError', args);
	  }, [apiRef]);
	  useGridApiMethod(apiRef, {
	    subscribeEvent,
	    publishEvent,
	    showError
	  });
	  react.exports.useEffect(() => {
	    const api = apiRef.current;
	    return () => {
	      unstable_resetCreateSelectorCache(api.instanceId);
	      api.publishEvent('unmount');
	    };
	  }, [apiRef]);
	  return apiRef;
	}

	function useGridErrorHandler(apiRef, props) {
	  const handleError = react.exports.useCallback(args => {
	    // We are handling error here, to set up the handler as early as possible and be able to catch error thrown at init time.
	    apiRef.current.setState(state => _extends({}, state, {
	      error: args
	    }));
	  }, [apiRef]);
	  react.exports.useEffect(() => {
	    if (props.error) {
	      handleError({
	        error: props.error
	      });
	    } else {
	      handleError(null);
	    }
	  }, [handleError, props.error]);
	  useGridApiEventHandler(apiRef, 'componentError', handleError);
	}

	const useGridLocaleText = (apiRef, props) => {
	  const getLocaleText = react.exports.useCallback(key => {
	    if (props.localeText[key] == null) {
	      throw new Error(`Missing translation for key ${key}.`);
	    }

	    return props.localeText[key];
	  }, [props.localeText]);
	  const localeTextApi = {
	    getLocaleText
	  };
	  useGridApiMethod(apiRef, localeTextApi);
	};

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  }, _typeof(obj);
	}

	function _toPrimitive(input, hint) {
	  if (_typeof(input) !== "object" || input === null) return input;
	  var prim = input[Symbol.toPrimitive];
	  if (prim !== undefined) {
	    var res = prim.call(input, hint || "default");
	    if (_typeof(res) !== "object") return res;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return (hint === "string" ? String : Number)(input);
	}

	function _toPropertyKey(arg) {
	  var key = _toPrimitive(arg, "string");
	  return _typeof(key) === "symbol" ? key : String(key);
	}

	/**
	 * Implement the Pipeline Pattern
	 *
	 * More information and detailed example in (TODO add link to technical doc when ready)
	 *
	 * Some plugins contains custom logic to enrich data provided by other plugins or components.
	 * For instance, the row grouping plugin needs to add / remove the grouping columns when the grid columns are updated.
	 *
	 * =====================================================================================================================
	 *
	 * The plugin containing the custom logic must use:
	 *
	 * - `useGridRegisterPipeProcessor` to register their processor.
	 *
	 * - `apiRef.current.unstable_requestPipeProcessorsApplication` to imperatively re-apply a group.
	 *   This method should be used in last resort.
	 *   Most of the time, the application should be triggered by an update on the deps of the processor.
	 *
	 * =====================================================================================================================
	 *
	 * The plugin or component that needs to enrich its data must use:
	 *
	 * - `apiRef.current.unstable_applyPipeProcessors` to run in chain all the processors of a given group.
	 *
	 * - `useGridRegisterPipeApplier` to re-apply the whole pipe when requested.
	 *   The applier will be called when:
	 *   * a processor is registered.
	 *   * `apiRef.current.unstable_requestPipeProcessorsApplication` is called for the given group.
	 */
	const useGridPipeProcessing = apiRef => {
	  const processorsCache = react.exports.useRef({});
	  const runAppliers = react.exports.useCallback(groupCache => {
	    if (!groupCache) {
	      return;
	    }

	    Object.values(groupCache.appliers).forEach(callback => {
	      callback();
	    });
	  }, []);
	  const registerPipeProcessor = react.exports.useCallback((group, id, processor) => {
	    if (!processorsCache.current[group]) {
	      processorsCache.current[group] = {
	        processors: new Map(),
	        appliers: {}
	      };
	    }

	    const groupCache = processorsCache.current[group];
	    const oldProcessor = groupCache.processors.get(id);

	    if (oldProcessor !== processor) {
	      groupCache.processors.set(id, processor);
	      runAppliers(groupCache);
	    }

	    return () => {
	      processorsCache.current[group].processors.set(id, null);
	    };
	  }, [runAppliers]);
	  const registerPipeApplier = react.exports.useCallback((group, id, applier) => {
	    if (!processorsCache.current[group]) {
	      processorsCache.current[group] = {
	        processors: new Map(),
	        appliers: {}
	      };
	    }

	    processorsCache.current[group].appliers[id] = applier;
	    return () => {
	      const _appliers = processorsCache.current[group].appliers,
	            otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(_toPropertyKey));

	      processorsCache.current[group].appliers = otherAppliers;
	    };
	  }, []);
	  const requestPipeProcessorsApplication = react.exports.useCallback(group => {
	    const groupCache = processorsCache.current[group];
	    runAppliers(groupCache);
	  }, [runAppliers]);
	  const applyPipeProcessors = react.exports.useCallback((...args) => {
	    const [group, value, context] = args;

	    if (!processorsCache.current[group]) {
	      return value;
	    }

	    const preProcessors = Array.from(processorsCache.current[group].processors.values());
	    return preProcessors.reduce((acc, preProcessor) => {
	      if (!preProcessor) {
	        return acc;
	      }

	      return preProcessor(acc, context);
	    }, value);
	  }, []);
	  const preProcessingApi = {
	    unstable_registerPipeProcessor: registerPipeProcessor,
	    unstable_registerPipeApplier: registerPipeApplier,
	    unstable_requestPipeProcessorsApplication: requestPipeProcessorsApplication,
	    unstable_applyPipeProcessors: applyPipeProcessors
	  };
	  useGridApiMethod(apiRef, preProcessingApi);
	};

	const useFirstRender = callback => {
	  const isFirstRender = react.exports.useRef(true);

	  if (isFirstRender.current) {
	    isFirstRender.current = false;
	    callback();
	  }
	};

	const useGridRegisterPipeProcessor = (apiRef, group, callback) => {
	  const cleanup = react.exports.useRef();
	  const id = react.exports.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
	  const registerPreProcessor = react.exports.useCallback(() => {
	    cleanup.current = apiRef.current.unstable_registerPipeProcessor(group, id.current, callback);
	  }, [apiRef, callback, group]);
	  useFirstRender(() => {
	    registerPreProcessor();
	  });
	  const isFirstRender = react.exports.useRef(true);
	  react.exports.useEffect(() => {
	    if (isFirstRender.current) {
	      isFirstRender.current = false;
	    } else {
	      registerPreProcessor();
	    }

	    return () => {
	      if (cleanup.current) {
	        cleanup.current();
	        cleanup.current = null;
	      }
	    };
	  }, [registerPreProcessor]);
	};

	const useGridRegisterPipeApplier = (apiRef, group, callback) => {
	  const cleanup = react.exports.useRef();
	  const id = react.exports.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
	  const registerPreProcessor = react.exports.useCallback(() => {
	    cleanup.current = apiRef.current.unstable_registerPipeApplier(group, id.current, callback);
	  }, [apiRef, callback, group]);
	  useFirstRender(() => {
	    registerPreProcessor();
	  });
	  const isFirstRender = react.exports.useRef(true);
	  react.exports.useEffect(() => {
	    if (isFirstRender.current) {
	      isFirstRender.current = false;
	    } else {
	      registerPreProcessor();
	    }

	    return () => {
	      if (cleanup.current) {
	        cleanup.current();
	        cleanup.current = null;
	      }
	    };
	  }, [registerPreProcessor]);
	};

	const useGridRegisterStrategyProcessor = (apiRef, strategyName, group, processor) => {
	  const registerPreProcessor = react.exports.useCallback(() => {
	    apiRef.current.unstable_registerStrategyProcessor(strategyName, group, processor);
	  }, [apiRef, processor, group, strategyName]);
	  useFirstRender(() => {
	    registerPreProcessor();
	  });
	  const isFirstRender = react.exports.useRef(true);
	  react.exports.useEffect(() => {
	    if (isFirstRender.current) {
	      isFirstRender.current = false;
	    } else {
	      registerPreProcessor();
	    }
	  }, [registerPreProcessor]);
	};

	const GRID_DEFAULT_STRATEGY = 'none';
	const GRID_STRATEGIES_PROCESSORS = {
	  rowTreeCreation: 'rowTree',
	  filtering: 'rowTree',
	  sorting: 'rowTree'
	};

	/**
	 * Implements a variant of the Strategy Pattern (see https://en.wikipedia.org/wiki/Strategy_pattern)
	 *
	 * More information and detailed example in (TODO add link to technical doc when ready)
	 *
	 * Some plugins contains custom logic that must only be applied if the right strategy is active.
	 * For instance, the row grouping plugin has a custom filtering algorithm.
	 * This algorithm must be applied by the filtering plugin if the row grouping is the current way of grouping rows,
	 * but not if the tree data is the current way of grouping rows.
	 *
	 * =====================================================================================================================
	 *
	 * The plugin containing the custom logic must use:
	 *
	 * - `useGridRegisterStrategyProcessor` to register their processor.
	 *   When the processor of the active strategy changes, it will fire `"activeStrategyProcessorChange"` to re-apply the processor.
	 *
	 * - `apiRef.current.unstable_setStrategyAvailability` to tell if their strategy can be used.
	 *
	 * =====================================================================================================================
	 *
	 * The plugin or component that needs to apply the custom logic of the current strategy must use:
	 *
	 * - `apiRef.current.unstable_applyStrategyProcessor` to run the processor of the active strategy for a given processor name.
	 *
	 * - the "strategyAvailabilityChange" event to update something when the active strategy changes.
	 *    Warning: Be careful not to apply the processor several times.
	 *    For instance "rowsSet" is fired by `useGridRows` whenever the active strategy changes.
	 *    So listening to both would most likely run your logic twice.
	 *
	 * - The "activeStrategyProcessorChange" event to update something when the processor of the active strategy changes.
	 *
	 * =====================================================================================================================
	 *
	 * Each processor name is part of a strategy group which can only have one active strategy at the time.
	 * For now, there is only one strategy group named `rowTree` which customize
	 * - row tree creation algorithm.
	 * - sorting algorithm.
	 * - filtering algorithm.
	 */
	const useGridStrategyProcessing = apiRef => {
	  const availableStrategies = react.exports.useRef(new Map());
	  const strategiesCache = react.exports.useRef({});
	  const registerStrategyProcessor = react.exports.useCallback((strategyName, processorName, processor) => {
	    const cleanup = () => {
	      const _ref = strategiesCache.current[processorName],
	            otherProcessors = _objectWithoutPropertiesLoose(_ref, [strategyName].map(_toPropertyKey));

	      strategiesCache.current[processorName] = otherProcessors;
	    };

	    if (!strategiesCache.current[processorName]) {
	      strategiesCache.current[processorName] = {};
	    }

	    const groupPreProcessors = strategiesCache.current[processorName];
	    const previousProcessor = groupPreProcessors[strategyName];
	    groupPreProcessors[strategyName] = processor;

	    if (!previousProcessor || previousProcessor === processor) {
	      return cleanup;
	    }

	    if (strategyName === apiRef.current.unstable_getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName])) {
	      apiRef.current.publishEvent('activeStrategyProcessorChange', processorName);
	    }

	    return cleanup;
	  }, [apiRef]);
	  const applyStrategyProcessor = react.exports.useCallback((processorName, params) => {
	    const activeStrategy = apiRef.current.unstable_getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName]);

	    if (activeStrategy == null) {
	      throw new Error("Can't apply a strategy processor before defining an active strategy");
	    }

	    const groupCache = strategiesCache.current[processorName];

	    if (!groupCache || !groupCache[activeStrategy]) {
	      throw new Error(`No processor found for processor "${processorName}" on strategy "${activeStrategy}"`);
	    }

	    const processor = groupCache[activeStrategy];
	    return processor(params);
	  }, [apiRef]);
	  const getActiveStrategy = react.exports.useCallback(strategyGroup => {
	    var _availableStrategyEnt;

	    const strategyEntries = Array.from(availableStrategies.current.entries());
	    const availableStrategyEntry = strategyEntries.find(([, strategy]) => {
	      if (strategy.group !== strategyGroup) {
	        return false;
	      }

	      return strategy.isAvailable();
	    });
	    return (_availableStrategyEnt = availableStrategyEntry == null ? void 0 : availableStrategyEntry[0]) != null ? _availableStrategyEnt : GRID_DEFAULT_STRATEGY;
	  }, []);
	  const setStrategyAvailability = react.exports.useCallback((strategyGroup, strategyName, isAvailable) => {
	    availableStrategies.current.set(strategyName, {
	      group: strategyGroup,
	      isAvailable
	    });
	    apiRef.current.publishEvent('strategyAvailabilityChange');
	  }, [apiRef]);
	  const strategyProcessingApi = {
	    unstable_registerStrategyProcessor: registerStrategyProcessor,
	    unstable_applyStrategyProcessor: applyStrategyProcessor,
	    unstable_getActiveStrategy: getActiveStrategy,
	    unstable_setStrategyAvailability: setStrategyAvailability
	  };
	  useGridApiMethod(apiRef, strategyProcessingApi);
	};

	const useGridNativeEventListener = (apiRef, ref, eventName, handler, options) => {
	  const logger = useGridLogger(apiRef, 'useNativeEventListener');
	  const [added, setAdded] = react.exports.useState(false);
	  const handlerRef = react.exports.useRef(handler);
	  const wrapHandler = react.exports.useCallback(event => {
	    return handlerRef.current && handlerRef.current(event);
	  }, []);
	  react.exports.useEffect(() => {
	    handlerRef.current = handler;
	  }, [handler]);
	  react.exports.useEffect(() => {
	    let targetElement;

	    if (isFunction(ref)) {
	      targetElement = ref();
	    } else {
	      targetElement = ref && ref.current ? ref.current : null;
	    }

	    if (targetElement && eventName && !added) {
	      logger.debug(`Binding native ${eventName} event`);
	      targetElement.addEventListener(eventName, wrapHandler, options);
	      const boundElem = targetElement;
	      setAdded(true);

	      const unsubscribe = () => {
	        logger.debug(`Clearing native ${eventName} event`);
	        boundElem.removeEventListener(eventName, wrapHandler, options);
	      };

	      apiRef.current.subscribeEvent('unmount', unsubscribe);
	    }
	  }, [ref, wrapHandler, eventName, added, logger, options, apiRef]);
	};

	const _excluded$e = ["stateId"];
	const useGridStateInitialization = (apiRef, props) => {
	  const controlStateMapRef = react.exports.useRef({});
	  const [, rawForceUpdate] = react.exports.useState();
	  const registerControlState = react.exports.useCallback(controlStateItem => {
	    const {
	      stateId
	    } = controlStateItem,
	          others = _objectWithoutPropertiesLoose(controlStateItem, _excluded$e);

	    controlStateMapRef.current[stateId] = _extends({}, others, {
	      stateId
	    });
	  }, []);
	  const setState = react.exports.useCallback((state, reason) => {
	    let newState;

	    if (isFunction(state)) {
	      newState = state(apiRef.current.state);
	    } else {
	      newState = state;
	    }

	    if (apiRef.current.state === newState) {
	      return false;
	    }

	    let ignoreSetState = false; // Apply the control state constraints

	    const updatedControlStateIds = [];
	    Object.keys(controlStateMapRef.current).forEach(stateId => {
	      const controlState = controlStateMapRef.current[stateId];
	      const oldSubState = controlState.stateSelector(apiRef.current.state, apiRef.current.instanceId);
	      const newSubState = controlState.stateSelector(newState, apiRef.current.instanceId);

	      if (newSubState === oldSubState) {
	        return;
	      }

	      updatedControlStateIds.push({
	        stateId: controlState.stateId,
	        hasPropChanged: newSubState !== controlState.propModel
	      }); // The state is controlled, the prop should always win

	      if (controlState.propModel !== undefined && newSubState !== controlState.propModel) {
	        ignoreSetState = true;
	      }
	    });

	    if (updatedControlStateIds.length > 1) {
	      // Each hook modify its own state, and it should not leak
	      // Events are here to forward to other hooks and apply changes.
	      // You are trying to update several states in a no isolated way.
	      throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map(el => el.stateId).join(', ')} in the same transaction.`);
	    }

	    if (!ignoreSetState) {
	      // We always assign it as we mutate rows for perf reason.
	      apiRef.current.state = newState;

	      if (apiRef.current.publishEvent) {
	        apiRef.current.publishEvent('stateChange', newState);
	      }
	    }

	    if (updatedControlStateIds.length === 1) {
	      const {
	        stateId,
	        hasPropChanged
	      } = updatedControlStateIds[0];
	      const controlState = controlStateMapRef.current[stateId];
	      const model = controlState.stateSelector(newState, apiRef.current.instanceId);

	      if (controlState.propOnChange && hasPropChanged) {
	        const details = props.signature === GridSignature.DataGridPro ? {
	          api: apiRef.current,
	          reason
	        } : {
	          reason
	        };
	        controlState.propOnChange(model, details);
	      }

	      if (!ignoreSetState) {
	        apiRef.current.publishEvent(controlState.changeEvent, model, {
	          reason
	        });
	      }
	    }

	    return !ignoreSetState;
	  }, [apiRef, props.signature]);
	  const updateControlState = react.exports.useCallback((key, state, reason) => {
	    return apiRef.current.setState(previousState => {
	      return _extends({}, previousState, {
	        [key]: state(previousState[key])
	      });
	    }, reason);
	  }, [apiRef]);
	  const forceUpdate = react.exports.useCallback(() => rawForceUpdate(() => apiRef.current.state), [apiRef]);
	  const stateApi = {
	    setState,
	    forceUpdate,
	    unstable_updateControlState: updateControlState,
	    unstable_registerControlState: registerControlState
	  };
	  useGridApiMethod(apiRef, stateApi);
	};

	/**
	 * Initialize the technical pieces of the DataGrid (logger, state, ...) that any DataGrid implementation needs
	 */

	const useGridInitialization = (inputApiRef, props) => {
	  const apiRef = useGridApiInitialization(inputApiRef, props);
	  useGridLoggerFactory(apiRef, props);
	  useGridErrorHandler(apiRef, props);
	  useGridStateInitialization(apiRef, props);
	  useGridPipeProcessing(apiRef);
	  useGridStrategyProcessing(apiRef);
	  useGridLocaleText(apiRef, props);
	  return apiRef;
	};

	const useGridInitializeState = (initializer, apiRef, props) => {
	  const isInitialized = react.exports.useRef(false);

	  if (!isInitialized.current) {
	    apiRef.current.state = initializer(apiRef.current.state, props, apiRef);
	    isInitialized.current = true;
	  }
	};

	function writeToClipboardPolyfill(data) {
	  const span = document.createElement('span');
	  span.style.whiteSpace = 'pre';
	  span.style.userSelect = 'all';
	  span.style.opacity = '0px';
	  span.textContent = data;
	  document.body.appendChild(span);
	  const range = document.createRange();
	  range.selectNode(span);
	  const selection = window.getSelection();
	  selection.removeAllRanges();
	  selection.addRange(range);

	  try {
	    document.execCommand('copy');
	  } finally {
	    document.body.removeChild(span);
	  }
	}
	/**
	 * @requires useGridCsvExport (method)
	 * @requires useGridSelection (method)
	 */


	const useGridClipboard = apiRef => {
	  const copySelectedRowsToClipboard = react.exports.useCallback((includeHeaders = false) => {
	    if (apiRef.current.getSelectedRows().size === 0) {
	      return;
	    }

	    const data = apiRef.current.getDataAsCsv({
	      includeHeaders,
	      delimiter: '\t'
	    });

	    if (navigator.clipboard) {
	      navigator.clipboard.writeText(data).catch(() => {
	        writeToClipboardPolyfill(data);
	      });
	    } else {
	      writeToClipboardPolyfill(data);
	    }
	  }, [apiRef]);
	  const handleKeydown = react.exports.useCallback(event => {
	    var _window$getSelection;

	    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey; // event.key === 'c' is not enough as alt+c can lead to ©, ç, or other characters on macOS.
	    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would
	    // be wrong with a Dvorak keyboard (as if pressing J).

	    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {
	      return;
	    } // Do nothing if there's a native selection


	    if (((_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.toString()) !== '') {
	      return;
	    }

	    apiRef.current.unstable_copySelectedRowsToClipboard(event.altKey);
	  }, [apiRef]);
	  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);
	  const clipboardApi = {
	    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard
	  };
	  useGridApiMethod(apiRef, clipboardApi);
	};

	const gridColumnMenuSelector = state => state.columnMenu;

	const columnMenuStateInitializer = state => _extends({}, state, {
	  columnMenu: {
	    open: false
	  }
	});
	/**
	 * @requires useGridColumnResize (event)
	 * @requires useGridInfiniteLoader (event)
	 */

	const useGridColumnMenu = apiRef => {
	  const logger = useGridLogger(apiRef, 'useGridColumnMenu');
	  /**
	   * API METHODS
	   */

	  const showColumnMenu = react.exports.useCallback(field => {
	    const shouldUpdate = apiRef.current.setState(state => {
	      if (state.columnMenu.open && state.columnMenu.field === field) {
	        return state;
	      }

	      logger.debug('Opening Column Menu');
	      return _extends({}, state, {
	        columnMenu: {
	          open: true,
	          field
	        }
	      });
	    });

	    if (shouldUpdate) {
	      apiRef.current.hidePreferences();
	      apiRef.current.forceUpdate();
	    }
	  }, [apiRef, logger]);
	  const hideColumnMenu = react.exports.useCallback(() => {
	    const shouldUpdate = apiRef.current.setState(state => {
	      if (!state.columnMenu.open && state.columnMenu.field === undefined) {
	        return state;
	      }

	      logger.debug('Hiding Column Menu');
	      return _extends({}, state, {
	        columnMenu: _extends({}, state.columnMenu, {
	          open: false,
	          field: undefined
	        })
	      });
	    });

	    if (shouldUpdate) {
	      apiRef.current.forceUpdate();
	    }
	  }, [apiRef, logger]);
	  const toggleColumnMenu = react.exports.useCallback(field => {
	    logger.debug('Toggle Column Menu');
	    const columnMenu = gridColumnMenuSelector(apiRef.current.state);

	    if (!columnMenu.open || columnMenu.field !== field) {
	      showColumnMenu(field);
	    } else {
	      hideColumnMenu();
	    }
	  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);
	  const columnMenuApi = {
	    showColumnMenu,
	    hideColumnMenu,
	    toggleColumnMenu
	  };
	  useGridApiMethod(apiRef, columnMenuApi);
	  /**
	   * EVENTS
	   */

	  const handleColumnHeaderFocus = react.exports.useCallback((params, event) => {
	    // Check if the column menu button received focus
	    if (!event.target.classList.contains(gridClasses.menuIconButton)) {
	      return;
	    } // Check if there's an element which lost focus


	    if (!event.relatedTarget) {
	      return;
	    } // `true` if the focus was on the column menu itself, not on any item


	    const columnMenuLostFocus = event.relatedTarget.classList.contains(gridClasses.menuList); // `true` if the focus was on an item from the column menu

	    const columnMenuItemLostFocus = event.relatedTarget.getAttribute('role') === 'menuitem';

	    if (columnMenuLostFocus || columnMenuItemLostFocus) {
	      apiRef.current.setColumnHeaderFocus(params.field);
	    }
	  }, [apiRef]);
	  useGridApiEventHandler(apiRef, 'columnResizeStart', hideColumnMenu);
	  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);
	  useGridApiEventHandler(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);
	  useGridApiEventHandler(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);
	};

	const columnsStateInitializer = (state, props, apiRef) => {
	  var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;

	  const isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);
	  apiRef.current.unstable_caches.columns = {
	    isUsingColumnVisibilityModel
	  };
	  const columnsTypes = computeColumnTypes(props.columnTypes);
	  const columnsState = createColumnsState({
	    apiRef,
	    columnTypes: columnsTypes,
	    columnsToUpsert: props.columns,
	    initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,
	    shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,
	    currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},
	    keepOnlyColumnsToUpsert: true
	  });
	  return _extends({}, state, {
	    columns: columnsState
	  });
	};
	/**
	 * @requires useGridParamsApi (method)
	 * @requires useGridDimensions (method, event) - can be after
	 * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns
	 */

	function useGridColumns(apiRef, props) {
	  var _props$initialState5, _props$componentsProp2;

	  const logger = useGridLogger(apiRef, 'useGridColumns');
	  const columnTypes = react.exports.useMemo(() => computeColumnTypes(props.columnTypes), [props.columnTypes]);
	  const previousColumnsProp = react.exports.useRef(props.columns);
	  const previousColumnTypesProp = react.exports.useRef(columnTypes);
	  apiRef.current.unstable_registerControlState({
	    stateId: 'visibleColumns',
	    propModel: props.columnVisibilityModel,
	    propOnChange: props.onColumnVisibilityModelChange,
	    stateSelector: gridColumnVisibilityModelSelector,
	    changeEvent: 'columnVisibilityModelChange'
	  });
	  const setGridColumnsState = react.exports.useCallback(columnsState => {
	    logger.debug('Updating columns state.');
	    apiRef.current.setState(mergeColumnsState(columnsState));
	    apiRef.current.forceUpdate();
	    apiRef.current.publishEvent('columnsChange', columnsState.all);
	  }, [logger, apiRef]);
	  /**
	   * API METHODS
	   */

	  const getColumn = react.exports.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);
	  const getAllColumns = react.exports.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);
	  const getVisibleColumns = react.exports.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);
	  const getColumnsMeta = react.exports.useCallback(() => gridColumnsMetaSelector(apiRef), [apiRef]);
	  const getColumnIndex = react.exports.useCallback((field, useVisibleColumns = true) => {
	    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);
	    return columns.findIndex(col => col.field === field);
	  }, [apiRef]);
	  const getColumnPosition = react.exports.useCallback(field => {
	    const index = getColumnIndex(field);
	    return gridColumnPositionsSelector(apiRef)[index];
	  }, [apiRef, getColumnIndex]);
	  const setColumnVisibilityModel = react.exports.useCallback(model => {
	    const currentModel = gridColumnVisibilityModelSelector(apiRef);

	    if (currentModel !== model) {
	      apiRef.current.setState(state => _extends({}, state, {
	        columns: createColumnsState({
	          apiRef,
	          columnTypes,
	          columnsToUpsert: [],
	          initialState: undefined,
	          shouldRegenColumnVisibilityModelFromColumns: false,
	          currentColumnVisibilityModel: model,
	          keepOnlyColumnsToUpsert: false
	        })
	      }));
	      apiRef.current.forceUpdate();
	    }
	  }, [apiRef, columnTypes]);
	  const updateColumns = react.exports.useCallback(columns => {
	    const columnsState = createColumnsState({
	      apiRef,
	      columnTypes,
	      columnsToUpsert: columns,
	      initialState: undefined,
	      shouldRegenColumnVisibilityModelFromColumns: true,
	      keepOnlyColumnsToUpsert: false
	    });
	    setGridColumnsState(columnsState);
	  }, [apiRef, setGridColumnsState, columnTypes]);
	  const updateColumn = react.exports.useCallback(column => apiRef.current.updateColumns([column]), [apiRef]);
	  const setColumnVisibility = react.exports.useCallback((field, isVisible) => {
	    // We keep updating the `hide` option of `GridColDef` when not controlling the model to avoid any breaking change.
	    // `updateColumns` take care of updating the model itself if needs be.
	    // TODO v6: stop using the `hide` field even when the model is not defined
	    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {
	      var _columnVisibilityMode;

	      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
	      const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;

	      if (isVisible !== isCurrentlyVisible) {
	        const newModel = _extends({}, columnVisibilityModel, {
	          [field]: isVisible
	        });

	        apiRef.current.setColumnVisibilityModel(newModel);
	      }
	    } else {
	      const column = apiRef.current.getColumn(field);

	      const newColumn = _extends({}, column, {
	        hide: !isVisible
	      });

	      apiRef.current.updateColumns([newColumn]);
	      const params = {
	        field,
	        colDef: newColumn,
	        isVisible
	      };
	      apiRef.current.publishEvent('columnVisibilityChange', params);
	    }
	  }, [apiRef]);
	  const setColumnIndex = react.exports.useCallback((field, targetIndexPosition) => {
	    const allColumns = gridColumnFieldsSelector(apiRef);
	    const oldIndexPosition = allColumns.findIndex(col => col === field);

	    if (oldIndexPosition === targetIndexPosition) {
	      return;
	    }

	    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);
	    const updatedColumns = [...allColumns];
	    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];
	    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);
	    setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {
	      all: updatedColumns
	    }));
	    const params = {
	      field,
	      element: apiRef.current.getColumnHeaderElement(field),
	      colDef: apiRef.current.getColumn(field),
	      targetIndex: targetIndexPosition,
	      oldIndex: oldIndexPosition
	    };
	    apiRef.current.publishEvent('columnOrderChange', params);
	  }, [apiRef, logger, setGridColumnsState]);
	  const setColumnWidth = react.exports.useCallback((field, width) => {
	    logger.debug(`Updating column ${field} width to ${width}`);
	    const column = apiRef.current.getColumn(field);

	    const newColumn = _extends({}, column, {
	      width
	    });

	    apiRef.current.updateColumns([newColumn]);
	    apiRef.current.publishEvent('columnWidthChange', {
	      element: apiRef.current.getColumnHeaderElement(field),
	      colDef: newColumn,
	      width
	    });
	  }, [apiRef, logger]);
	  const columnApi = {
	    getColumn,
	    getAllColumns,
	    getColumnIndex,
	    getColumnPosition,
	    getVisibleColumns,
	    getColumnsMeta,
	    updateColumn,
	    updateColumns,
	    setColumnVisibilityModel,
	    setColumnVisibility,
	    setColumnIndex,
	    setColumnWidth
	  };
	  useGridApiMethod(apiRef, columnApi);
	  /**
	   * PRE-PROCESSING
	   */

	  const stateExportPreProcessing = react.exports.useCallback((prevState, context) => {
	    const columnsStateToExport = {};

	    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {
	      var _props$initialState$c2, _props$initialState4, _props$initialState4$;

	      const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);
	      const shouldExportColumnVisibilityModel = // Always export if the `exportOnlyDirtyModels` property is activated
	      !context.exportOnlyDirtyModels || // Always export if the model is controlled
	      props.columnVisibilityModel != null || // Always export if the model has been initialized
	      // TODO v6 Do a nullish check instead to export even if the initial model equals "{}"
	      Object.keys((_props$initialState$c2 = (_props$initialState4 = props.initialState) == null ? void 0 : (_props$initialState4$ = _props$initialState4.columns) == null ? void 0 : _props$initialState4$.columnVisibilityModel) != null ? _props$initialState$c2 : {}).length > 0 || // Always export if the model is not empty
	      Object.keys(columnVisibilityModelToExport).length > 0;

	      if (shouldExportColumnVisibilityModel) {
	        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;
	      }
	    }

	    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);
	    const columns = gridColumnDefinitionsSelector(apiRef);
	    const dimensions = {};
	    columns.forEach(colDef => {
	      if (colDef.hasBeenResized) {
	        const colDefDimensions = {};
	        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {
	          let propertyValue = colDef[propertyName];

	          if (propertyValue === Infinity) {
	            propertyValue = -1;
	          }

	          colDefDimensions[propertyName] = propertyValue;
	        });
	        dimensions[colDef.field] = colDefDimensions;
	      }
	    });

	    if (Object.keys(dimensions).length > 0) {
	      columnsStateToExport.dimensions = dimensions;
	    }

	    return _extends({}, prevState, {
	      columns: columnsStateToExport
	    });
	  }, [apiRef, props.columnVisibilityModel, (_props$initialState5 = props.initialState) == null ? void 0 : _props$initialState5.columns]);
	  const stateRestorePreProcessing = react.exports.useCallback((params, context) => {
	    var _context$stateToResto;

	    const columnVisibilityModelToImport = apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : undefined;
	    const initialState = context.stateToRestore.columns;

	    if (columnVisibilityModelToImport == null && initialState == null) {
	      return params;
	    }

	    const columnsState = createColumnsState({
	      apiRef,
	      columnTypes,
	      columnsToUpsert: [],
	      initialState,
	      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,
	      currentColumnVisibilityModel: columnVisibilityModelToImport,
	      keepOnlyColumnsToUpsert: false
	    });
	    apiRef.current.setState(mergeColumnsState(columnsState));

	    if (initialState != null) {
	      apiRef.current.publishEvent('columnsChange', columnsState.all);
	    }

	    return params;
	  }, [apiRef, columnTypes]);
	  const preferencePanelPreProcessing = react.exports.useCallback((initialValue, value) => {
	    if (value === GridPreferencePanelsValue.columns) {
	      var _props$componentsProp;

	      const ColumnsPanel = props.components.ColumnsPanel;
	      return /*#__PURE__*/jsxRuntime.exports.jsx(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));
	    }

	    return initialValue;
	  }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);
	  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);
	  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);
	  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);
	  /**
	   * EVENTS
	   */

	  const prevInnerWidth = react.exports.useRef(null);

	  const handleGridSizeChange = viewportInnerSize => {
	    if (prevInnerWidth.current !== viewportInnerSize.width) {
	      prevInnerWidth.current = viewportInnerSize.width;
	      setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));
	    }
	  };

	  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);
	  useGridApiOptionHandler(apiRef, 'columnVisibilityChange', props.onColumnVisibilityChange);
	  /**
	   * APPLIERS
	   */

	  const hydrateColumns = react.exports.useCallback(() => {
	    logger.info(`Columns pipe processing have changed, regenerating the columns`);
	    const columnsState = createColumnsState({
	      apiRef,
	      columnTypes,
	      columnsToUpsert: [],
	      initialState: undefined,
	      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,
	      keepOnlyColumnsToUpsert: false
	    });
	    setGridColumnsState(columnsState);
	  }, [apiRef, logger, setGridColumnsState, columnTypes]);
	  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);
	  /**
	   * EFFECTS
	   */
	  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`
	  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one

	  const isFirstRender = react.exports.useRef(true);
	  react.exports.useEffect(() => {
	    if (isFirstRender.current) {
	      isFirstRender.current = false;
	      return;
	    }

	    logger.info(`GridColumns have changed, new length ${props.columns.length}`);

	    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {
	      return;
	    }

	    const columnsState = createColumnsState({
	      apiRef,
	      columnTypes,
	      initialState: undefined,
	      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`
	      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,
	      columnsToUpsert: props.columns,
	      keepOnlyColumnsToUpsert: true
	    });
	    previousColumnsProp.current = props.columns;
	    previousColumnTypesProp.current = columnTypes;
	    setGridColumnsState(columnsState);
	  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);
	  react.exports.useEffect(() => {
	    if (props.columnVisibilityModel !== undefined) {
	      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);
	    }
	  }, [apiRef, logger, props.columnVisibilityModel]);
	}

	/**
	 * @category ColumnGrouping
	 * @ignore - do not document.
	 */
	const gridColumnGroupingSelector = state => state.columnGrouping;
	const gridColumnGroupsLookupSelector = createSelector(gridColumnGroupingSelector, columnGrouping => columnGrouping.lookup);

	const _excluded$d = ["groupId", "children"];
	function hasGroupPath(lookupElement) {
	  return lookupElement.groupPath !== undefined;
	}

	// This is the recurrence function that help writing `unwrapGroupingColumnModel()`
	const recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplet) => {
	  if (isLeaf(columnGroupNode)) {
	    if (unwrappedGroupingModelToComplet[columnGroupNode.field] !== undefined) {
	      throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurrs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplet[columnGroupNode.field].join(' > ')}`, `- ${parents.join(' > ')}`].join('\n'));
	    }

	    unwrappedGroupingModelToComplet[columnGroupNode.field] = parents;
	    return;
	  }

	  const {
	    groupId,
	    children
	  } = columnGroupNode;
	  children.forEach(child => {
	    recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplet);
	  });
	};
	/**
	 * This is a function that provide for each column the array of its parents.
	 * Parents are ordered from the root to the leaf.
	 * @param columnGroupingModel The model such as provided in DataGrid props
	 * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`
	 */


	const unwrapGroupingColumnModel = columnGroupingModel => {
	  if (!columnGroupingModel) {
	    return {};
	  }

	  const unwrappedSubTree = {};
	  columnGroupingModel.forEach(columnGroupNode => {
	    recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);
	  });
	  return unwrappedSubTree;
	};

	const createGroupLookup = columnGroupingModel => {
	  let groupLookup = {};
	  columnGroupingModel.forEach(node => {
	    if (isLeaf(node)) {
	      return;
	    }

	    const {
	      groupId,
	      children
	    } = node,
	          other = _objectWithoutPropertiesLoose(node, _excluded$d);

	    if (!groupId) {
	      throw new Error('MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.');
	    }

	    if (!children) {
	      console.warn(`MUI: group groupId=${groupId} has no children.`);
	    }

	    const groupParam = _extends({}, other, {
	      groupId
	    });

	    const subTreeLookup = createGroupLookup(children);

	    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {
	      throw new Error(`MUI: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);
	    }

	    groupLookup = _extends({}, groupLookup, subTreeLookup, {
	      [groupId]: groupParam
	    });
	  });
	  return _extends({}, groupLookup);
	};

	const columnGroupsStateInitializer = (state, props) => {
	  var _props$columnGrouping;

	  const groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);
	  return _extends({}, state, {
	    columnGrouping: {
	      lookup: groupLookup,
	      groupCollapsedModel: {}
	    }
	  });
	};
	/**
	 * @requires useGridColumns (method, event)
	 * @requires useGridParamsApi (method)
	 */

	const useGridColumnGrouping = (apiRef, props) => {
	  var _props$experimentalFe2;

	  /**
	   * API METHODS
	   */
	  const getColumnGroupPath = react.exports.useCallback(field => {
	    var _columnLookup$field$g, _columnLookup$field;

	    const columnLookup = gridColumnLookupSelector(apiRef);
	    return (_columnLookup$field$g = (_columnLookup$field = columnLookup[field]) == null ? void 0 : _columnLookup$field.groupPath) != null ? _columnLookup$field$g : [];
	  }, [apiRef]);
	  const getAllGroupDetails = react.exports.useCallback(() => {
	    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);
	    return columnGroupLookup;
	  }, [apiRef]);
	  const columnGroupingApi = {
	    unstable_getColumnGroupPath: getColumnGroupPath,
	    unstable_getAllGroupDetails: getAllGroupDetails
	  };
	  useGridApiMethod(apiRef, columnGroupingApi);
	  /**
	   * EFFECTS
	   */
	  // The effect does not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`
	  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one

	  const isFirstRender = react.exports.useRef(true);
	  react.exports.useEffect(() => {
	    var _props$experimentalFe, _props$columnGrouping2;

	    if (isFirstRender.current) {
	      isFirstRender.current = false;
	      return;
	    }

	    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {
	      return;
	    }

	    const groupLookup = createGroupLookup((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);
	    apiRef.current.setState(state => _extends({}, state, {
	      columnGrouping: _extends({}, state.columnGrouping, {
	        lookup: groupLookup
	      })
	    }));
	  }, [apiRef, props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);
	};

	const COMPACT_DENSITY_FACTOR = 0.7;
	const COMFORTABLE_DENSITY_FACTOR = 1.3; // TODO v6: revise keeping headerHeight and rowHeight in state

	const getUpdatedDensityState = (newDensity, newHeaderHeight, newRowHeight, newMaxDepth) => {
	  switch (newDensity) {
	    case GridDensityTypes.Compact:
	      return {
	        value: newDensity,
	        headerHeight: Math.floor(newHeaderHeight * COMPACT_DENSITY_FACTOR),
	        rowHeight: Math.floor(newRowHeight * COMPACT_DENSITY_FACTOR),
	        headerGroupingMaxDepth: newMaxDepth,
	        factor: COMPACT_DENSITY_FACTOR
	      };

	    case GridDensityTypes.Comfortable:
	      return {
	        value: newDensity,
	        headerHeight: Math.floor(newHeaderHeight * COMFORTABLE_DENSITY_FACTOR),
	        rowHeight: Math.floor(newRowHeight * COMFORTABLE_DENSITY_FACTOR),
	        headerGroupingMaxDepth: newMaxDepth,
	        factor: COMFORTABLE_DENSITY_FACTOR
	      };

	    default:
	      return {
	        value: newDensity,
	        headerHeight: newHeaderHeight,
	        rowHeight: newRowHeight,
	        headerGroupingMaxDepth: newMaxDepth,
	        factor: 1
	      };
	  }
	};

	const densityStateInitializer = (state, props) => {
	  // TODO: think about improving this initialization. Could it be done in the useColumn initializer?
	  // TODO: manage to remove ts-ignore
	  let maxDepth;

	  if (props.columnGroupingModel == null || Object.keys(props.columnGroupingModel).length === 0) {
	    maxDepth = 0;
	  } else {
	    const unwrappedGroupingColumnModel = unwrapGroupingColumnModel(props.columnGroupingModel);
	    const columnsState = state.columns;
	    const visibleColumns = columnsState.all.filter(field => columnsState.columnVisibilityModel[field] !== false);

	    if (visibleColumns.length === 0) {
	      maxDepth = 0;
	    } else {
	      maxDepth = Math.max(...visibleColumns.map(field => {
	        var _unwrappedGroupingCol, _unwrappedGroupingCol2;

	        return (_unwrappedGroupingCol = (_unwrappedGroupingCol2 = unwrappedGroupingColumnModel[field]) == null ? void 0 : _unwrappedGroupingCol2.length) != null ? _unwrappedGroupingCol : 0;
	      }));
	    }
	  }

	  return _extends({}, state, {
	    density: getUpdatedDensityState(props.density, props.headerHeight, props.rowHeight, maxDepth)
	  });
	};
	const useGridDensity = (apiRef, props) => {
	  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
	  const maxDepth = visibleColumns.length > 0 ? Math.max(...visibleColumns.map(column => {
	    var _column$groupPath$len, _column$groupPath;

	    return (_column$groupPath$len = (_column$groupPath = column.groupPath) == null ? void 0 : _column$groupPath.length) != null ? _column$groupPath$len : 0;
	  })) : 0;
	  const logger = useGridLogger(apiRef, 'useDensity');
	  const setDensity = react.exports.useCallback((newDensity, newHeaderHeight = props.headerHeight, newRowHeight = props.rowHeight, newMaxDepth = maxDepth) => {
	    logger.debug(`Set grid density to ${newDensity}`);
	    apiRef.current.setState(state => {
	      const currentDensityState = gridDensitySelector(state);
	      const newDensityState = getUpdatedDensityState(newDensity, newHeaderHeight, newRowHeight, newMaxDepth);

	      if (isDeepEqual(currentDensityState, newDensityState)) {
	        return state;
	      }

	      return _extends({}, state, {
	        density: newDensityState
	      });
	    });
	    apiRef.current.forceUpdate();
	  }, [logger, apiRef, props.headerHeight, props.rowHeight, maxDepth]);
	  react.exports.useEffect(() => {
	    apiRef.current.setDensity(props.density, props.headerHeight, props.rowHeight, maxDepth);
	  }, [apiRef, props.density, props.rowHeight, props.headerHeight, maxDepth]);
	  const densityApi = {
	    setDensity
	  };
	  useGridApiMethod(apiRef, densityApi);
	};

	/**
	 * I have hesitated to use https://github.com/eligrey/FileSaver.js.
	 * If we get bug reports that this project solves, we should consider using it.
	 *
	 * Related resources.
	 * https://blog.logrocket.com/programmatic-file-downloads-in-the-browser-9a5186298d5c/
	 * https://github.com/mbrn/filefy/blob/ec4ed0b7415d93be7158c23029f2ea1fa0b8e2d9/src/core/BaseBuilder.ts
	 * https://unpkg.com/browse/@progress/kendo-file-saver@1.0.7/dist/es/save-as.js
	 * https://github.com/ag-grid/ag-grid/blob/9565c219b6210aa85fa833c929d0728f9d163a91/community-modules/csv-export/src/csvExport/downloader.ts
	 */
	function exportAs(blob, extension = 'csv', filename = document.title || 'untitled') {
	  const fullName = `${filename}.${extension}`; // Test download attribute first
	  // https://github.com/eligrey/FileSaver.js/issues/193

	  if ('download' in HTMLAnchorElement.prototype) {
	    // Create an object URL for the blob object
	    const url = URL.createObjectURL(blob); // Create a new anchor element

	    const a = document.createElement('a');
	    a.href = url;
	    a.download = fullName; // Programmatically trigger a click on the anchor element
	    // Useful if you want the download to happen automatically
	    // Without attaching the anchor element to the DOM

	    a.click(); // https://github.com/eligrey/FileSaver.js/issues/205

	    setTimeout(() => {
	      URL.revokeObjectURL(url);
	    });
	    return;
	  }

	  throw new Error('MUI: exportAs not supported');
	}

	const serializeCellValue = (value, delimiterCharacter) => {
	  if (typeof value === 'string') {
	    const formattedValue = value.replace(/"/g, '""'); // Make sure value containing delimiter or line break won't be split into multiple rows

	    if ([delimiterCharacter, '\n', '\r'].some(delimiter => formattedValue.includes(delimiter))) {
	      return `"${formattedValue}"`;
	    }

	    return formattedValue;
	  }

	  return value;
	};

	buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);

	const serializeRow = (id, columns, getCellParams, delimiterCharacter) => columns.map(column => {
	  const cellParams = getCellParams(id, column.field);

	  return serializeCellValue(cellParams.formattedValue, delimiterCharacter);
	});

	function buildCSV(options) {
	  const {
	    columns,
	    rowIds,
	    getCellParams,
	    delimiterCharacter,
	    includeHeaders
	  } = options;
	  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter)}\r\n`, '').trim();

	  if (!includeHeaders) {
	    return CSVBody;
	  }

	  const CSVHead = `${columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => serializeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\r\n`;
	  return `${CSVHead}${CSVBody}`.trim();
	}

	const getColumnsToExport = ({
	  apiRef,
	  options
	}) => {
	  const columns = gridColumnDefinitionsSelector(apiRef);

	  if (options.fields) {
	    return options.fields.map(field => columns.find(column => column.field === field)).filter(column => !!column);
	  }

	  const validColumns = options.allColumns ? columns : gridVisibleColumnDefinitionsSelector(apiRef);
	  return validColumns.filter(column => !column.disableExport);
	};
	const defaultGetRowsToExport = ({
	  apiRef
	}) => {
	  var _pinnedRows$top, _pinnedRows$bottom;

	  const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);
	  const rowTree = gridRowTreeSelector(apiRef);
	  const selectedRows = apiRef.current.getSelectedRows();
	  const bodyRows = filteredSortedRowIds.filter(id => {
	    var _rowTree$id$position;

	    return ((_rowTree$id$position = rowTree[id].position) != null ? _rowTree$id$position : 'body') === 'body';
	  });
	  const pinnedRows = gridPinnedRowsSelector(apiRef);
	  const topPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.map(row => row.id)) || [];
	  const bottomPinnedRowsIds = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.map(row => row.id)) || [];
	  bodyRows.unshift(...topPinnedRowsIds);
	  bodyRows.push(...bottomPinnedRowsIds);

	  if (selectedRows.size > 0) {
	    return bodyRows.filter(id => selectedRows.has(id));
	  }

	  return bodyRows;
	};

	const useGridCsvExport = apiRef => {
	  const logger = useGridLogger(apiRef, 'useGridCsvExport');
	  const getDataAsCsv = react.exports.useCallback((options = {}) => {
	    var _options$getRowsToExp, _options$includeHeade;

	    logger.debug(`Get data as CSV`);
	    const exportedColumns = getColumnsToExport({
	      apiRef,
	      options
	    });
	    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;
	    const exportedRowIds = getRowsToExport({
	      apiRef
	    });
	    return buildCSV({
	      columns: exportedColumns,
	      rowIds: exportedRowIds,
	      getCellParams: apiRef.current.getCellParams,
	      delimiterCharacter: options.delimiter || ',',
	      includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true
	    });
	  }, [logger, apiRef]);
	  const exportDataAsCsv = react.exports.useCallback(options => {
	    logger.debug(`Export data as CSV`);
	    const csv = getDataAsCsv(options);
	    const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {
	      type: 'text/csv'
	    });
	    exportAs(blob, 'csv', options == null ? void 0 : options.fileName);
	  }, [logger, getDataAsCsv]);
	  const csvExportApi = {
	    getDataAsCsv,
	    exportDataAsCsv
	  };
	  useGridApiMethod(apiRef, csvExportApi);
	  /**
	   * PRE-PROCESSING
	   */

	  const addExportMenuButtons = react.exports.useCallback((initialValue, options) => {
	    var _options$csvOptions;

	    if ((_options$csvOptions = options.csvOptions) != null && _options$csvOptions.disableToolbarButton) {
	      return initialValue;
	    }

	    return [...initialValue, {
	      component: /*#__PURE__*/jsxRuntime.exports.jsx(GridCsvExportMenuItem, {
	        options: options.csvOptions
	      }),
	      componentName: 'csvExport'
	    }];
	  }, []);
	  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);
	};

	const gridRowsMetaSelector = state => state.rowsMeta;

	/**
	 * @requires useGridColumns (state)
	 * @requires useGridFilter (state)
	 * @requires useGridSorting (state)
	 * @requires useGridParamsApi (method)
	 */
	const useGridPrintExport = (apiRef, props) => {
	  const logger = useGridLogger(apiRef, 'useGridPrintExport');
	  const doc = react.exports.useRef(null);
	  const previousGridState = react.exports.useRef(null);
	  const previousColumnVisibility = react.exports.useRef({});
	  react.exports.useEffect(() => {
	    doc.current = ownerDocument(apiRef.current.rootElementRef.current);
	  }, [apiRef]); // Returns a promise because updateColumns triggers state update and
	  // the new state needs to be in place before the grid can be sized correctly

	  const updateGridColumnsForPrint = react.exports.useCallback((fields, allColumns) => new Promise(resolve => {
	    if (!fields && !allColumns) {
	      resolve();
	      return;
	    }

	    const exportedColumnFields = getColumnsToExport({
	      apiRef,
	      options: {
	        fields,
	        allColumns
	      }
	    }).map(column => column.field);
	    const columns = gridColumnDefinitionsSelector(apiRef);
	    const newColumnVisibilityModel = {};
	    columns.forEach(column => {
	      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);
	    });
	    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);
	    resolve();
	  }), [apiRef]);
	  const buildPrintWindow = react.exports.useCallback(title => {
	    const iframeEl = document.createElement('iframe');
	    iframeEl.id = 'grid-print-window'; // Without this 'onload' event won't fire in some browsers

	    iframeEl.src = window.location.href;
	    iframeEl.style.position = 'absolute';
	    iframeEl.style.width = '0px';
	    iframeEl.style.height = '0px';
	    iframeEl.title = title || document.title;
	    return iframeEl;
	  }, []);
	  const handlePrintWindowLoad = react.exports.useCallback((printWindow, options) => {
	    var _printWindow$contentW, _querySelector, _querySelector2;

	    const normalizeOptions = _extends({
	      copyStyles: true,
	      hideToolbar: false,
	      hideFooter: false
	    }, options); // Some agents, such as IE11 and Enzyme (as of 2 Jun 2020) continuously call the
	    // `onload` callback. This ensures that it is only called once.


	    printWindow.onload = null;
	    const printDoc = printWindow.contentDocument || ((_printWindow$contentW = printWindow.contentWindow) == null ? void 0 : _printWindow$contentW.document);

	    if (!printDoc) {
	      return;
	    }

	    const totalHeaderHeight = gridDensityTotalHeaderHeightSelector(apiRef);
	    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);
	    const gridRootElement = apiRef.current.rootElementRef.current;
	    const gridClone = gridRootElement.cloneNode(true);
	    const gridCloneViewport = gridClone.querySelector(`.${gridClasses.virtualScroller}`); // Expand the viewport window to prevent clipping

	    gridCloneViewport.style.height = 'auto';
	    gridCloneViewport.style.width = 'auto';
	    gridCloneViewport.parentElement.style.width = 'auto';
	    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row

	    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);
	    gridMain.style.overflow = 'visible';
	    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);
	    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);
	    columnHeadersInner.style.width = '100%';
	    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;
	    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;

	    if (normalizeOptions.hideToolbar) {
	      var _gridClone$querySelec;

	      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();
	      gridToolbarElementHeight = 0;
	    }

	    if (normalizeOptions.hideFooter) {
	      var _gridClone$querySelec2;

	      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();
	      gridFooterElementHeight = 0;
	    } // Expand container height to accommodate all rows


	    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + totalHeaderHeight + gridToolbarElementHeight + gridFooterElementHeight}px`; // Remove all loaded elements from the current host

	    printDoc.body.innerHTML = '';
	    printDoc.body.appendChild(gridClone);
	    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;

	    if (typeof defaultPageStyle === 'string') {
	      // TODO custom styles should always win
	      const styleElement = printDoc.createElement('style');
	      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));
	      printDoc.head.appendChild(styleElement);
	    }

	    if (normalizeOptions.bodyClassName) {
	      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));
	    }

	    if (normalizeOptions.copyStyles) {
	      const headStyleElements = doc.current.querySelectorAll("style, link[rel='stylesheet']");

	      for (let i = 0; i < headStyleElements.length; i += 1) {
	        const node = headStyleElements[i];

	        if (node.tagName === 'STYLE') {
	          const newHeadStyleElements = printDoc.createElement(node.tagName);
	          const sheet = node.sheet;

	          if (sheet) {
	            let styleCSS = ''; // NOTE: for-of is not supported by IE

	            for (let j = 0; j < sheet.cssRules.length; j += 1) {
	              if (typeof sheet.cssRules[j].cssText === 'string') {
	                styleCSS += `${sheet.cssRules[j].cssText}\r\n`;
	              }
	            }

	            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));
	            printDoc.head.appendChild(newHeadStyleElements);
	          }
	        } else if (node.getAttribute('href')) {
	          // If `href` tag is empty, avoid loading these links
	          const newHeadStyleElements = printDoc.createElement(node.tagName);

	          for (let j = 0; j < node.attributes.length; j += 1) {
	            const attr = node.attributes[j];

	            if (attr) {
	              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');
	            }
	          }

	          printDoc.head.appendChild(newHeadStyleElements);
	        }
	      }
	    } // Trigger print


	    {
	      printWindow.contentWindow.print();
	    }
	  }, [apiRef, doc]);
	  const handlePrintWindowAfterPrint = react.exports.useCallback(printWindow => {
	    var _previousGridState$cu, _previousGridState$cu2;

	    // Remove the print iframe
	    doc.current.body.removeChild(printWindow); // Revert grid to previous state

	    apiRef.current.restoreState(previousGridState.current || {});

	    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {
	      // if the apiRef.current.exportState(); did not exported the column visibility, we update it
	      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);
	    }

	    apiRef.current.unstable_enableVirtualization(); // Clear local state

	    previousGridState.current = null;
	    previousColumnVisibility.current = {};
	  }, [apiRef]);
	  const exportDataAsPrint = react.exports.useCallback(async options => {
	    logger.debug(`Export data as Print`);

	    if (!apiRef.current.rootElementRef.current) {
	      throw new Error('MUI: No grid root element available.');
	    }

	    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled

	    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);

	    if (props.pagination) {
	      const visibleRowCount = gridVisibleRowCountSelector(apiRef);
	      apiRef.current.setPageSize(visibleRowCount);
	    }

	    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);
	    apiRef.current.unstable_disableVirtualization();
	    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);
	    doc.current.body.appendChild(printWindow);

	    {
	      printWindow.onload = () => handlePrintWindowLoad(printWindow, options);

	      printWindow.contentWindow.onafterprint = () => handlePrintWindowAfterPrint(printWindow);
	    }
	  }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);
	  const printExportApi = {
	    exportDataAsPrint
	  };
	  useGridApiMethod(apiRef, printExportApi);
	  /**
	   * PRE-PROCESSING
	   */

	  const addExportMenuButtons = react.exports.useCallback((initialValue, options) => {
	    var _options$printOptions;

	    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {
	      return initialValue;
	    }

	    return [...initialValue, {
	      component: /*#__PURE__*/jsxRuntime.exports.jsx(GridPrintExportMenuItem, {
	        options: options.printOptions
	      }),
	      componentName: 'printExport'
	    }];
	  }, []);
	  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);
	};

	const _excluded$c = ["rowsBeforePartialUpdates"];
	/**
	 * A helper function to check if the id provided is valid.
	 * @param {GridRowId} id Id as [[GridRowId]].
	 * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].
	 * @param {string} detailErrorMessage A custom error message to display for invalid IDs
	 */

	function checkGridRowIdIsValid(id, row, detailErrorMessage = 'A row was provided without id in the rows prop:') {
	  if (id == null) {
	    throw new Error(['MUI: The data grid component requires all rows to have a unique `id` property.', 'Alternatively, you can use the `getRowId` prop to specify a custom id for each row.', detailErrorMessage, JSON.stringify(row)].join('\n'));
	  }
	}
	const getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {
	  const id = getRowId ? getRowId(rowModel) : rowModel.id;
	  checkGridRowIdIsValid(id, rowModel, detailErrorMessage);
	  return id;
	};
	const createRowsInternalCache = ({
	  rows,
	  getRowId,
	  loading,
	  rowCount
	}) => {
	  const cache = {
	    rowsBeforePartialUpdates: rows,
	    loadingPropBeforePartialUpdates: loading,
	    rowCountPropBeforePartialUpdates: rowCount,
	    idRowsLookup: {},
	    idToIdLookup: {},
	    ids: []
	  };

	  for (let i = 0; i < rows.length; i += 1) {
	    const row = rows[i];
	    const id = getRowIdFromRowModel(row, getRowId);
	    cache.idRowsLookup[id] = row;
	    cache.idToIdLookup[id] = id;
	    cache.ids.push(id);
	  }

	  return cache;
	};
	const getRowsStateFromCache = ({
	  apiRef,
	  previousTree,
	  rowCountProp,
	  loadingProp
	}) => {
	  const _apiRef$current$unsta = apiRef.current.unstable_caches.rows,
	        cacheForGrouping = _objectWithoutPropertiesLoose(_apiRef$current$unsta, _excluded$c);

	  const rowCount = rowCountProp != null ? rowCountProp : 0;
	  const groupingResponse = apiRef.current.unstable_applyStrategyProcessor('rowTreeCreation', _extends({}, cacheForGrouping, {
	    previousTree
	  }));
	  const processedGroupingResponse = apiRef.current.unstable_applyPipeProcessors('hydrateRows', groupingResponse);
	  const dataTopLevelRowCount = processedGroupingResponse.treeDepth === 1 ? processedGroupingResponse.ids.length : Object.values(processedGroupingResponse.tree).filter(node => node.parent == null && !node.isPinned).length;
	  return _extends({}, processedGroupingResponse, {
	    groupingResponseBeforeRowHydration: groupingResponse,
	    loading: loadingProp,
	    totalRowCount: Math.max(rowCount, processedGroupingResponse.ids.length),
	    totalTopLevelRowCount: Math.max(rowCount, dataTopLevelRowCount)
	  });
	};
	const getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {
	  var _tree$parentId;

	  const children = (_tree$parentId = tree[parentId]) == null ? void 0 : _tree$parentId.children;

	  if (children == null) {
	    return [];
	  }

	  const validDescendants = [];

	  for (let i = 0; i < children.length; i += 1) {
	    const child = children[i];
	    const childNode = tree[child];

	    if (!skipAutoGeneratedRows || !childNode.isAutoGenerated) {
	      validDescendants.push(child);
	    }

	    validDescendants.push(...getTreeNodeDescendants(tree, childNode.id, skipAutoGeneratedRows));
	  }

	  return validDescendants;
	};
	function calculatePinnedRowsHeight(apiRef) {
	  var _pinnedRows$top, _pinnedRows$bottom;

	  const pinnedRows = gridPinnedRowsSelector(apiRef);
	  const topPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.reduce((acc, value) => {
	    acc += apiRef.current.unstable_getRowHeight(value.id);
	    return acc;
	  }, 0)) || 0;
	  const bottomPinnedRowsHeight = (pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.reduce((acc, value) => {
	    acc += apiRef.current.unstable_getRowHeight(value.id);
	    return acc;
	  }, 0)) || 0;
	  return {
	    top: topPinnedRowsHeight,
	    bottom: bottomPinnedRowsHeight
	  };
	}

	/**
	 * Adds default values to the optional fields of a filter items.
	 * @param {GridFilterItem} item The raw filter item.
	 * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.
	 * @return {GridFilterItem} The clean filter item with an uniq ID and an always-defined operatorValue.
	 * TODO: Make the typing reflect the different between GridFilterInputItem and GridFilterItem.
	 */
	const cleanFilterItem = (item, apiRef) => {
	  const cleanItem = _extends({}, item);

	  if (cleanItem.id == null) {
	    cleanItem.id = Math.round(Math.random() * 1e5);
	  }

	  if (cleanItem.operatorValue == null) {
	    // Selects a default operator
	    // We don't use `apiRef.current.getColumn` because it is not ready during state initialization
	    const column = gridColumnLookupSelector(apiRef)[cleanItem.columnField];
	    cleanItem.operatorValue = column && column.filterOperators[0].value;
	  }

	  return cleanItem;
	};
	const filterModelDisableMultiColumnsFilteringWarning = buildWarning(['MUI: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');
	const filterModelMissingItemIdWarning = buildWarning("MUI: The 'id' field is required on `filterModel.items` when you use multiple filters.", 'error');
	const filterModelMissingItemOperatorWarning = buildWarning(['MUI: One of your filtering item have no `operatorValue` provided.', 'This property will become required on `@mui/x-data-grid@6.X`.']);
	const sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {
	  const hasSeveralItems = model.items.length > 1;
	  let items;

	  if (hasSeveralItems && disableMultipleColumnsFiltering) {
	    filterModelDisableMultiColumnsFilteringWarning();
	    items = [model.items[0]];
	  } else {
	    items = model.items;
	  }

	  const hasItemsWithoutIds = hasSeveralItems && items.some(item => item.id == null);
	  const hasItemWithoutOperator = items.some(item => item.operatorValue == null);

	  if (hasItemsWithoutIds) {
	    filterModelMissingItemIdWarning();
	  }

	  if (hasItemWithoutOperator) {
	    filterModelMissingItemOperatorWarning();
	  }

	  if (hasItemWithoutOperator || hasItemsWithoutIds) {
	    return _extends({}, model, {
	      items: items.map(item => cleanFilterItem(item, apiRef))
	    });
	  }

	  if (model.items !== items) {
	    return _extends({}, model, {
	      items
	    });
	  }

	  return model;
	};
	const mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => filteringState => _extends({}, filteringState, {
	  filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)
	});

	const getFilterCallbackFromItem = (filterItem, apiRef) => {
	  if (!filterItem.columnField || !filterItem.operatorValue) {
	    return null;
	  }

	  const column = apiRef.current.getColumn(filterItem.columnField);

	  if (!column) {
	    return null;
	  }

	  let parsedValue;

	  if (column.valueParser) {
	    var _filterItem$value;

	    const parser = column.valueParser;
	    parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map(x => parser(x)) : parser(filterItem.value);
	  } else {
	    parsedValue = filterItem.value;
	  }

	  const newFilterItem = _extends({}, filterItem, {
	    value: parsedValue
	  });

	  const filterOperators = column.filterOperators;

	  if (!(filterOperators != null && filterOperators.length)) {
	    throw new Error(`MUI: No filter operators found for column '${column.field}'.`);
	  }

	  const filterOperator = filterOperators.find(operator => operator.value === newFilterItem.operatorValue);

	  if (!filterOperator) {
	    throw new Error(`MUI: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operatorValue}'.`);
	  }

	  const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);

	  if (typeof applyFilterOnRow !== 'function') {
	    return null;
	  }

	  const fn = rowId => {
	    const cellParams = apiRef.current.getCellParams(rowId, newFilterItem.columnField);
	    return applyFilterOnRow(cellParams);
	  };

	  return {
	    fn,
	    item: newFilterItem
	  };
	};
	/**
	 * Generates a method to easily check if a row is matching the current filter model.
	 * @param {GridFilterModel} filterModel The model with which we want to filter the rows.
	 * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.
	 * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.
	 */


	const buildAggregatedFilterItemsApplier = (filterModel, apiRef) => {
	  const {
	    items
	  } = filterModel;
	  const appliers = items.map(item => getFilterCallbackFromItem(item, apiRef)).filter(callback => !!callback);

	  if (appliers.length === 0) {
	    return null;
	  }

	  return (rowId, shouldApplyFilter) => {
	    const resultPerItemId = {};
	    const filteredAppliers = shouldApplyFilter ? appliers.filter(applier => shouldApplyFilter(applier.item.columnField)) : appliers;
	    filteredAppliers.forEach(applier => {
	      resultPerItemId[applier.item.id] = applier.fn(rowId);
	    });
	    return resultPerItemId;
	  };
	};
	/**
	 * Generates a method to easily check if a row is matching the current quick filter.
	 * @param {any[]} values The model with which we want to filter the rows.
	 * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.
	 * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.
	 */

	const buildAggregatedQuickFilterApplier = (filterModel, apiRef) => {
	  const {
	    quickFilterValues = []
	  } = filterModel;

	  if (quickFilterValues.length === 0) {
	    return null;
	  }

	  const columnsFields = gridColumnFieldsSelector(apiRef);
	  const appliersPerColumnField = {};
	  columnsFields.forEach(field => {
	    const column = apiRef.current.getColumn(field);
	    const getApplyQuickFilterFn = column == null ? void 0 : column.getApplyQuickFilterFn;

	    if (!getApplyQuickFilterFn) {
	      return;
	    }

	    appliersPerColumnField[field] = quickFilterValues.map(value => getApplyQuickFilterFn(value, column, apiRef));
	  }); // If some value does not have an applier we ignore them

	  const sanitizedQuickFilterValues = quickFilterValues.filter((value, index) => Object.keys(appliersPerColumnField).some(field => appliersPerColumnField[field][index] != null));

	  if (sanitizedQuickFilterValues.length === 0) {
	    return null;
	  }

	  return (rowId, shouldApplyFilter) => {
	    const usedCellParams = {};
	    const columnsFieldsToFilter = [];
	    Object.keys(appliersPerColumnField).forEach(columnField => {
	      if (!shouldApplyFilter || shouldApplyFilter(columnField)) {
	        usedCellParams[columnField] = apiRef.current.getCellParams(rowId, columnField);
	        columnsFieldsToFilter.push(columnField);
	      }
	    });
	    const quickFilterValueResult = {};
	    sanitizedQuickFilterValues.forEach((value, index) => {
	      const isPassing = columnsFieldsToFilter.some(field => {
	        var _appliersPerColumnFie, _appliersPerColumnFie2;

	        if (appliersPerColumnField[field][index] == null) {
	          return false;
	        }

	        return (_appliersPerColumnFie = (_appliersPerColumnFie2 = appliersPerColumnField[field])[index]) == null ? void 0 : _appliersPerColumnFie.call(_appliersPerColumnFie2, usedCellParams[field]);
	      });
	      quickFilterValueResult[value] = isPassing;
	    });
	    return quickFilterValueResult;
	  };
	};
	const buildAggregatedFilterApplier = (filterModel, apiRef) => {
	  const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef);
	  const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);
	  return (rowId, shouldApplyFilter) => ({
	    passingFilterItems: isRowMatchingFilterItems && isRowMatchingFilterItems(rowId, shouldApplyFilter),
	    passingQuickFilterValues: isRowMatchingQuickFilter && isRowMatchingQuickFilter(rowId, shouldApplyFilter)
	  });
	};
	const passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef) => {
	  var _filterModel$quickFil, _filterModel$linkOper;

	  const cleanedFilterItems = filterModel.items.filter(item => getFilterCallbackFromItem(item, apiRef) !== null);
	  const cleanedAllFilterItemResults = allFilterItemResults.filter(result => result != null);
	  const cleanedAllQuickFilterResults = allQuickFilterResults.filter(result => result != null); // Defaultize operators

	  const quickFilterLogicOperator = (_filterModel$quickFil = filterModel.quickFilterLogicOperator) != null ? _filterModel$quickFil : getDefaultGridFilterModel().quickFilterLogicOperator;
	  const linkOperator = (_filterModel$linkOper = filterModel.linkOperator) != null ? _filterModel$linkOper : getDefaultGridFilterModel().linkOperator; // get result for filter items model

	  if (cleanedAllFilterItemResults.length > 0) {
	    // Return true if the item pass with one of the rows
	    const filterItemPredicate = item => {
	      return cleanedAllFilterItemResults.some(filterItemResult => filterItemResult[item.id]);
	    };

	    if (linkOperator === GridLinkOperator.And) {
	      const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);

	      if (!passesAllFilters) {
	        return false;
	      }
	    } else {
	      const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);

	      if (!passesSomeFilters) {
	        return false;
	      }
	    }
	  } // get result for quick filter model


	  if (cleanedAllQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {
	    // Return true if the item pass with one of the rows
	    const quickFilterValuePredicate = value => {
	      return cleanedAllQuickFilterResults.some(quickFilterValueResult => quickFilterValueResult[value]);
	    };

	    if (quickFilterLogicOperator === GridLinkOperator.And) {
	      const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);

	      if (!passesAllQuickFilterValues) {
	        return false;
	      }
	    } else {
	      const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);

	      if (!passesSomeQuickFilterValues) {
	        return false;
	      }
	    }
	  }

	  return true;
	};

	const filterStateInitializer = (state, props, apiRef) => {
	  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;

	  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();
	  return _extends({}, state, {
	    filter: {
	      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),
	      visibleRowsLookup: {},
	      filteredDescendantCountLookup: {}
	    }
	  });
	};
	/**
	 * @requires useGridColumns (method, event)
	 * @requires useGridParamsApi (method)
	 * @requires useGridRows (event)
	 */

	const useGridFilter = (apiRef, props) => {
	  var _props$initialState3, _props$initialState3$, _props$componentsProp2;

	  const logger = useGridLogger(apiRef, 'useGridFilter');
	  apiRef.current.unstable_registerControlState({
	    stateId: 'filter',
	    propModel: props.filterModel,
	    propOnChange: props.onFilterModelChange,
	    stateSelector: gridFilterModelSelector,
	    changeEvent: 'filterModelChange'
	  });
	  const updateFilteredRows = react.exports.useCallback(() => {
	    apiRef.current.setState(state => {
	      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);
	      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;
	      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {
	        isRowMatchingFilters,
	        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()
	      });
	      return _extends({}, state, {
	        filter: _extends({}, state.filter, filteringResult)
	      });
	    });
	    apiRef.current.publishEvent('filteredRowsSet');
	  }, [props.filterMode, apiRef]);
	  /**
	   * API METHODS
	   */

	  const applyFilters = react.exports.useCallback(() => {
	    updateFilteredRows();
	    apiRef.current.forceUpdate();
	  }, [apiRef, updateFilteredRows]);
	  const upsertFilterItem = react.exports.useCallback(item => {
	    const filterModel = gridFilterModelSelector(apiRef);
	    const items = [...filterModel.items];
	    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);

	    if (itemIndex === -1) {
	      items.push(item);
	    } else {
	      items[itemIndex] = item;
	    }

	    apiRef.current.setFilterModel(_extends({}, filterModel, {
	      items
	    }), 'upsertFilterItem');
	  }, [apiRef]);
	  const upsertFilterItems = react.exports.useCallback(items => {
	    const filterModel = gridFilterModelSelector(apiRef);
	    const existingItems = [...filterModel.items];
	    items.forEach(item => {
	      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);

	      if (itemIndex === -1) {
	        existingItems.push(item);
	      } else {
	        existingItems[itemIndex] = item;
	      }
	    });
	    apiRef.current.setFilterModel(_extends({}, filterModel, {
	      items
	    }), 'upsertFilterItems');
	  }, [apiRef]);
	  const deleteFilterItem = react.exports.useCallback(itemToDelete => {
	    const filterModel = gridFilterModelSelector(apiRef);
	    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);

	    if (items.length === filterModel.items.length) {
	      return;
	    }

	    apiRef.current.setFilterModel(_extends({}, filterModel, {
	      items
	    }), 'deleteFilterItem');
	  }, [apiRef]);
	  const showFilterPanel = react.exports.useCallback(targetColumnField => {
	    logger.debug('Displaying filter panel');

	    if (targetColumnField) {
	      const filterModel = gridFilterModelSelector(apiRef);
	      const filterItemsWithValue = filterModel.items.filter(item => {
	        var _column$filterOperato;

	        if (item.value !== undefined) {
	          return true;
	        }

	        const column = apiRef.current.getColumn(item.columnField);
	        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operatorValue);
	        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.
	        // So we don't want to remove them from the filter model if `item.value === undefined`.
	        // See https://github.com/mui/mui-x/issues/5402

	        if (requiresFilterValue) {
	          return false;
	        }

	        return true;
	      });
	      let newFilterItems;
	      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);

	      if (filterItemOnTarget) {
	        newFilterItems = filterItemsWithValue;
	      } else if (props.disableMultipleColumnsFiltering) {
	        newFilterItems = [cleanFilterItem({
	          columnField: targetColumnField
	        }, apiRef)];
	      } else {
	        newFilterItems = [...filterItemsWithValue, cleanFilterItem({
	          columnField: targetColumnField
	        }, apiRef)];
	      }

	      apiRef.current.setFilterModel(_extends({}, filterModel, {
	        items: newFilterItems
	      }));
	    }

	    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);
	  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
	  const hideFilterPanel = react.exports.useCallback(() => {
	    logger.debug('Hiding filter panel');
	    apiRef.current.hidePreferences();
	  }, [apiRef, logger]);
	  const setFilterLinkOperator = react.exports.useCallback(linkOperator => {
	    const filterModel = gridFilterModelSelector(apiRef);

	    if (filterModel.linkOperator === linkOperator) {
	      return;
	    }

	    apiRef.current.setFilterModel(_extends({}, filterModel, {
	      linkOperator
	    }), 'changeLogicOperator');
	  }, [apiRef]);
	  const setQuickFilterValues = react.exports.useCallback(values => {
	    const filterModel = gridFilterModelSelector(apiRef);

	    if (isDeepEqual(filterModel.quickFilterValues, values)) {
	      return;
	    }

	    apiRef.current.setFilterModel(_extends({}, filterModel, {
	      quickFilterValues: [...values]
	    }));
	  }, [apiRef]);
	  const setFilterModel = react.exports.useCallback((model, reason) => {
	    const currentModel = gridFilterModelSelector(apiRef);

	    if (currentModel !== model) {
	      logger.debug('Setting filter model');
	      apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);
	      apiRef.current.unstable_applyFilters();
	    }
	  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
	  const getVisibleRowModels = react.exports.useCallback(() => {
	    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);
	    return new Map(visibleSortedRows.map(row => [row.id, row.model]));
	  }, [apiRef]);
	  const filterApi = {
	    setFilterLinkOperator,
	    unstable_applyFilters: applyFilters,
	    deleteFilterItem,
	    upsertFilterItem,
	    upsertFilterItems,
	    setFilterModel,
	    showFilterPanel,
	    hideFilterPanel,
	    getVisibleRowModels,
	    setQuickFilterValues
	  };
	  useGridApiMethod(apiRef, filterApi);
	  /**
	   * PRE-PROCESSING
	   */

	  const stateExportPreProcessing = react.exports.useCallback((prevState, context) => {
	    var _props$initialState2, _props$initialState2$;

	    const filterModelToExport = gridFilterModelSelector(apiRef);
	    const shouldExportFilterModel = // Always export if the `exportOnlyDirtyModels` property is activated
	    !context.exportOnlyDirtyModels || // Always export if the model is controlled
	    props.filterModel != null || // Always export if the model has been initialized
	    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null || // Export if the model is not equal to the default value
	    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());

	    if (!shouldExportFilterModel) {
	      return prevState;
	    }

	    return _extends({}, prevState, {
	      filter: {
	        filterModel: filterModelToExport
	      }
	    });
	  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);
	  const stateRestorePreProcessing = react.exports.useCallback((params, context) => {
	    var _context$stateToResto;

	    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;

	    if (filterModel == null) {
	      return params;
	    }

	    apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');
	    return _extends({}, params, {
	      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]
	    });
	  }, [apiRef, props.disableMultipleColumnsFiltering]);
	  const preferencePanelPreProcessing = react.exports.useCallback((initialValue, value) => {
	    if (value === GridPreferencePanelsValue.filters) {
	      var _props$componentsProp;

	      const FilterPanel = props.components.FilterPanel;
	      return /*#__PURE__*/jsxRuntime.exports.jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));
	    }

	    return initialValue;
	  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);
	  const flatFilteringMethod = react.exports.useCallback(params => {
	    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {
	      const rowIds = gridRowIdsSelector(apiRef);
	      const filteredRowsLookup = {};

	      for (let i = 0; i < rowIds.length; i += 1) {
	        const rowId = rowIds[i];
	        let isRowPassing;

	        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {
	          isRowPassing = true;
	        } else {
	          const {
	            passingFilterItems,
	            passingQuickFilterValues
	          } = params.isRowMatchingFilters(rowId);
	          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);
	        }

	        filteredRowsLookup[rowId] = isRowPassing;
	      }

	      return {
	        filteredRowsLookup,
	        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.
	        visibleRowsLookup: filteredRowsLookup,
	        filteredDescendantCountLookup: {}
	      };
	    }

	    return {
	      visibleRowsLookup: {},
	      filteredRowsLookup: {},
	      filteredDescendantCountLookup: {}
	    };
	  }, [apiRef, props.filterMode]);
	  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);
	  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);
	  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);
	  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);
	  /**
	   * EVENTS
	   */

	  const handleColumnsChange = react.exports.useCallback(() => {
	    logger.debug('onColUpdated - GridColumns changed, applying filters');
	    const filterModel = gridFilterModelSelector(apiRef);
	    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);
	    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);

	    if (newFilterItems.length < filterModel.items.length) {
	      apiRef.current.setFilterModel(_extends({}, filterModel, {
	        items: newFilterItems
	      }));
	    }
	  }, [apiRef, logger]);
	  const handleStrategyProcessorChange = react.exports.useCallback(methodName => {
	    if (methodName === 'filtering') {
	      apiRef.current.unstable_applyFilters();
	    }
	  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.
	  // Otherwise, the state is not consistent during the render

	  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);
	  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);
	  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);
	  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);
	  /**
	   * 1ST RENDER
	   */

	  useFirstRender(() => {
	    apiRef.current.unstable_applyFilters();
	  });
	  /**
	   * EFFECTS
	   */

	  react.exports.useEffect(() => {
	    if (props.filterModel !== undefined) {
	      apiRef.current.setFilterModel(props.filterModel);
	    }
	  }, [apiRef, logger, props.filterModel]);
	};

	const focusStateInitializer = state => _extends({}, state, {
	  focus: {
	    cell: null,
	    columnHeader: null
	  },
	  tabIndex: {
	    cell: null,
	    columnHeader: null
	  }
	});
	/**
	 * @requires useGridParamsApi (method)
	 * @requires useGridRows (method)
	 * @requires useGridEditing (event)
	 */

	const useGridFocus = (apiRef, props) => {
	  const logger = useGridLogger(apiRef, 'useGridFocus');
	  const lastClickedCell = react.exports.useRef(null);
	  const publishCellFocusOut = react.exports.useCallback((cell, event) => {
	    if (cell) {
	      // The row might have been deleted
	      if (apiRef.current.getRow(cell.id)) {
	        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);
	      }
	    }
	  }, [apiRef]);
	  const setCellFocus = react.exports.useCallback((id, field) => {
	    const focusedCell = gridFocusCellSelector(apiRef);

	    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {
	      return;
	    }

	    apiRef.current.setState(state => {
	      logger.debug(`Focusing on cell with id=${id} and field=${field}`);
	      return _extends({}, state, {
	        tabIndex: {
	          cell: {
	            id,
	            field
	          },
	          columnHeader: null
	        },
	        focus: {
	          cell: {
	            id,
	            field
	          },
	          columnHeader: null
	        }
	      });
	    });
	    apiRef.current.forceUpdate(); // The row might have been deleted

	    if (!apiRef.current.getRow(id)) {
	      return;
	    }

	    if (focusedCell) {
	      // There's a focused cell but another cell was clicked
	      // Publishes an event to notify that the focus was lost
	      publishCellFocusOut(focusedCell, {});
	    }

	    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));
	  }, [apiRef, logger, publishCellFocusOut]);
	  const setColumnHeaderFocus = react.exports.useCallback((field, event = {}) => {
	    const cell = gridFocusCellSelector(apiRef);
	    publishCellFocusOut(cell, event);
	    apiRef.current.setState(state => {
	      logger.debug(`Focusing on column header with colIndex=${field}`);
	      return _extends({}, state, {
	        tabIndex: {
	          columnHeader: {
	            field
	          },
	          cell: null
	        },
	        focus: {
	          columnHeader: {
	            field
	          },
	          cell: null
	        }
	      });
	    });
	    apiRef.current.forceUpdate();
	  }, [apiRef, logger, publishCellFocusOut]);
	  const moveFocusToRelativeCell = react.exports.useCallback((id, field, direction) => {
	    let columnIndexToFocus = apiRef.current.getColumnIndex(field);
	    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);
	    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);

	    if (direction === 'right') {
	      columnIndexToFocus += 1;
	    } else if (direction === 'left') {
	      columnIndexToFocus -= 1;
	    } else {
	      rowIndexToFocus += 1;
	    }

	    const currentPage = getVisibleRows(apiRef, {
	      pagination: props.pagination,
	      paginationMode: props.paginationMode
	    });

	    if (columnIndexToFocus >= visibleColumns.length) {
	      // Go to next row if we are after the last column
	      rowIndexToFocus += 1;

	      if (rowIndexToFocus < currentPage.rows.length) {
	        // Go to first column of the next row if there's one more row
	        columnIndexToFocus = 0;
	      }
	    } else if (columnIndexToFocus < 0) {
	      // Go to previous row if we are before the first column
	      rowIndexToFocus -= 1;

	      if (rowIndexToFocus >= 0) {
	        // Go to last column of the previous if there's one more row
	        columnIndexToFocus = visibleColumns.length - 1;
	      }
	    }

	    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);
	    const rowToFocus = currentPage.rows[rowIndexToFocus];
	    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);

	    if (colSpanInfo && colSpanInfo.spannedByColSpan) {
	      if (direction === 'left' || direction === 'below') {
	        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;
	      } else if (direction === 'right') {
	        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;
	      }
	    }

	    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);
	    const columnToFocus = visibleColumns[columnIndexToFocus];
	    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);
	  }, [apiRef, props.pagination, props.paginationMode]);
	  const handleCellDoubleClick = react.exports.useCallback(({
	    id,
	    field
	  }) => {
	    apiRef.current.setCellFocus(id, field);
	  }, [apiRef]);
	  const handleCellKeyDown = react.exports.useCallback((params, event) => {
	    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys
	    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {
	      return;
	    }

	    apiRef.current.setCellFocus(params.id, params.field);
	  }, [apiRef]);
	  const handleColumnHeaderFocus = react.exports.useCallback(({
	    field
	  }, event) => {
	    if (event.target !== event.currentTarget) {
	      return;
	    }

	    apiRef.current.setColumnHeaderFocus(field, event);
	  }, [apiRef]);
	  const handleBlur = react.exports.useCallback(() => {
	    logger.debug(`Clearing focus`);
	    apiRef.current.setState(state => _extends({}, state, {
	      focus: {
	        cell: null,
	        columnHeader: null
	      }
	    }));
	  }, [logger, apiRef]);
	  const handleCellMouseDown = react.exports.useCallback(params => {
	    lastClickedCell.current = params;
	  }, []);
	  const handleDocumentClick = react.exports.useCallback(event => {
	    const cellParams = lastClickedCell.current;
	    lastClickedCell.current = null;
	    const focusedCell = gridFocusCellSelector(apiRef);

	    if (!focusedCell) {
	      if (cellParams) {
	        apiRef.current.setCellFocus(cellParams.id, cellParams.field);
	      }

	      return;
	    }

	    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {
	      return;
	    }

	    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);

	    if (cellElement != null && cellElement.contains(event.target)) {
	      return;
	    }

	    if (cellParams) {
	      apiRef.current.setCellFocus(cellParams.id, cellParams.field);
	    } else {
	      apiRef.current.setState(state => _extends({}, state, {
	        focus: {
	          cell: null,
	          columnHeader: null
	        }
	      }));
	      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked
	      // Publishes an event to notify that the focus was lost

	      publishCellFocusOut(focusedCell, event);
	    }
	  }, [apiRef, publishCellFocusOut]);
	  const handleCellModeChange = react.exports.useCallback(params => {
	    if (params.cellMode === 'view') {
	      return;
	    }

	    const cell = gridFocusCellSelector(apiRef);

	    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {
	      apiRef.current.setCellFocus(params.id, params.field);
	    }
	  }, [apiRef]);
	  const handleRowSet = react.exports.useCallback(() => {
	    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus

	    if (cell && !apiRef.current.getRow(cell.id)) {
	      apiRef.current.setState(state => _extends({}, state, {
	        focus: {
	          cell: null,
	          columnHeader: null
	        }
	      }));
	    }
	  }, [apiRef]);
	  useGridApiMethod(apiRef, {
	    setCellFocus,
	    setColumnHeaderFocus,
	    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell
	  });
	  react.exports.useEffect(() => {
	    const doc = ownerDocument(apiRef.current.rootElementRef.current);
	    doc.addEventListener('click', handleDocumentClick);
	    return () => {
	      doc.removeEventListener('click', handleDocumentClick);
	    };
	  }, [apiRef, handleDocumentClick]);
	  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);
	  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);
	  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);
	  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);
	  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);
	  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);
	  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);
	};

	function enrichPageRowsWithPinnedRows(apiRef, rows) {
	  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};
	  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];
	}
	/**
	 * @requires useGridSorting (method) - can be after
	 * @requires useGridFilter (state) - can be after
	 * @requires useGridColumns (state, method) - can be after
	 * @requires useGridDimensions (method) - can be after
	 * @requires useGridFocus (method) - can be after
	 * @requires useGridScroll (method) - can be after
	 * @requires useGridColumnSpanning (method) - can be after
	 */


	const useGridKeyboardNavigation = (apiRef, props) => {
	  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');
	  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;
	  const currentPageRows = react.exports.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);
	  /**
	   * @param {number} colIndex Index of the column to focus
	   * @param {number} rowIndex index of the row to focus
	   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.
	   * TODO replace with apiRef.current.unstable_moveFocusToRelativeCell()
	   */

	  const goToCell = react.exports.useCallback((colIndex, rowId, closestColumnToUse = 'left') => {
	    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);
	    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);

	    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {
	      if (closestColumnToUse === 'left') {
	        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;
	      } else if (closestColumnToUse === 'right') {
	        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;
	      }
	    } // `scrollToIndexes` requires a rowIndex relative to all visible rows.
	    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.


	    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);
	    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);
	    apiRef.current.scrollToIndexes({
	      colIndex,
	      rowIndex: rowIndexRelativeToAllRows
	    });
	    const field = apiRef.current.getVisibleColumns()[colIndex].field;
	    apiRef.current.setCellFocus(rowId, field);
	  }, [apiRef, logger]);
	  const goToHeader = react.exports.useCallback((colIndex, event) => {
	    logger.debug(`Navigating to header col ${colIndex}`);
	    apiRef.current.scrollToIndexes({
	      colIndex
	    });
	    const field = apiRef.current.getVisibleColumns()[colIndex].field;
	    apiRef.current.setColumnHeaderFocus(field, event);
	  }, [apiRef, logger]);
	  const getRowIdFromIndex = react.exports.useCallback(rowIndex => {
	    return currentPageRows[rowIndex].id;
	  }, [currentPageRows]);
	  const handleCellNavigationKeyDown = react.exports.useCallback((params, event) => {
	    const dimensions = apiRef.current.getRootDimensions();

	    if (currentPageRows.length === 0 || !dimensions) {
	      return;
	    }

	    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();
	    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
	    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);
	    const firstRowIndexInPage = 0;
	    const lastRowIndexInPage = currentPageRows.length - 1;
	    const firstColIndex = 0;
	    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
	    let shouldPreventDefault = true;

	    switch (event.key) {
	      case 'ArrowDown':
	      case 'Enter':
	        {
	          // TODO v6: Remove Enter case because `cellNavigationKeyDown` is not fired by the new editing API
	          // "Enter" is only triggered by the row / cell editing feature
	          if (rowIndexBefore < lastRowIndexInPage) {
	            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));
	          }

	          break;
	        }

	      case 'ArrowUp':
	        {
	          if (rowIndexBefore > firstRowIndexInPage) {
	            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));
	          } else {
	            goToHeader(colIndexBefore, event);
	          }

	          break;
	        }

	      case 'ArrowRight':
	        {
	          if (colIndexBefore < lastColIndex) {
	            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');
	          }

	          break;
	        }

	      case 'ArrowLeft':
	        {
	          if (colIndexBefore > firstColIndex) {
	            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore));
	          }

	          break;
	        }

	      case 'Tab':
	        {
	          // "Tab" is only triggered by the row / cell editing feature
	          if (event.shiftKey && colIndexBefore > firstColIndex) {
	            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');
	          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {
	            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');
	          }

	          break;
	        }

	      case ' ':
	        {
	          const field = params.field;

	          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
	            break;
	          }

	          const colDef = params.colDef;

	          if (colDef && colDef.type === 'treeDataGroup') {
	            break;
	          }

	          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {
	            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
	          }

	          break;
	        }

	      case 'PageDown':
	        {
	          if (rowIndexBefore < lastRowIndexInPage) {
	            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
	          }

	          break;
	        }

	      case 'PageUp':
	        {
	          // Go to the first row before going to header
	          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);

	          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {
	            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));
	          } else {
	            goToHeader(colIndexBefore, event);
	          }

	          break;
	        }

	      case 'Home':
	        {
	          if (event.ctrlKey || event.metaKey || event.shiftKey) {
	            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));
	          } else {
	            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));
	          }

	          break;
	        }

	      case 'End':
	        {
	          if (event.ctrlKey || event.metaKey || event.shiftKey) {
	            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));
	          } else {
	            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));
	          }

	          break;
	        }

	      default:
	        {
	          shouldPreventDefault = false;
	        }
	    }

	    if (shouldPreventDefault) {
	      event.preventDefault();
	    }
	  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);
	  const handleColumnHeaderKeyDown = react.exports.useCallback((params, event) => {
	    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);
	    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);

	    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {
	      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.
	      // There is one exception for the checkBoxHeader
	      return;
	    }

	    const dimensions = apiRef.current.getRootDimensions();

	    if (!dimensions) {
	      return;
	    }

	    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();
	    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
	    const firstRowIndexInPage = 0;
	    const lastRowIndexInPage = currentPageRows.length - 1;
	    const firstColIndex = 0;
	    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
	    let shouldPreventDefault = true;

	    switch (event.key) {
	      case 'ArrowDown':
	        {
	          {
	            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));
	          }

	          break;
	        }

	      case 'ArrowRight':
	        {
	          if (colIndexBefore < lastColIndex) {
	            goToHeader(colIndexBefore + 1, event);
	          }

	          break;
	        }

	      case 'ArrowLeft':
	        {
	          if (colIndexBefore > firstColIndex) {
	            goToHeader(colIndexBefore - 1, event);
	          }

	          break;
	        }

	      case 'PageDown':
	        {
	          if (lastRowIndexInPage !== null) {
	            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
	          }

	          break;
	        }

	      case 'Home':
	        {
	          goToHeader(firstColIndex, event);
	          break;
	        }

	      case 'End':
	        {
	          goToHeader(lastColIndex, event);
	          break;
	        }

	      case 'Enter':
	        {
	          if (event.ctrlKey || event.metaKey) {
	            apiRef.current.toggleColumnMenu(params.field);
	          }

	          break;
	        }

	      case ' ':
	        {
	          // prevent Space event from scrolling
	          break;
	        }

	      default:
	        {
	          shouldPreventDefault = false;
	        }
	    }

	    if (shouldPreventDefault) {
	      event.preventDefault();
	    }
	  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);
	  const handleCellKeyDown = react.exports.useCallback((params, event) => {
	    // Ignore portal
	    if (!event.currentTarget.contains(event.target)) {
	      return;
	    } // Get the most recent params because the cell mode may have changed by another listener


	    const cellParams = apiRef.current.getCellParams(params.id, params.field);

	    if (cellParams.cellMode !== GridCellModes.Edit && isNavigationKey(event.key)) {
	      apiRef.current.publishEvent('cellNavigationKeyDown', cellParams, event);
	    }
	  }, [apiRef]);
	  useGridApiEventHandler(apiRef, 'cellNavigationKeyDown', handleCellNavigationKeyDown);
	  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);
	  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);
	};

	const defaultPageSize = autoPageSize => autoPageSize ? 0 : 100;

	const mergeStateWithPageSize = pageSize => state => _extends({}, state, {
	  pagination: _extends({}, state.pagination, {
	    pageSize
	  })
	});
	/**
	 * @requires useGridDimensions (event) - can be after
	 */


	const useGridPageSize = (apiRef, props) => {
	  var _props$initialState2, _props$initialState2$;

	  const logger = useGridLogger(apiRef, 'useGridPageSize');
	  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);
	  apiRef.current.unstable_registerControlState({
	    stateId: 'pageSize',
	    propModel: props.pageSize,
	    propOnChange: props.onPageSizeChange,
	    stateSelector: gridPageSizeSelector,
	    changeEvent: 'pageSizeChange'
	  });
	  /**
	   * API METHODS
	   */

	  const setPageSize = react.exports.useCallback(pageSize => {
	    if (pageSize === gridPageSizeSelector(apiRef)) {
	      return;
	    }

	    logger.debug(`Setting page size to ${pageSize}`);
	    apiRef.current.setState(mergeStateWithPageSize(pageSize));
	    apiRef.current.forceUpdate();
	  }, [apiRef, logger]);
	  const pageSizeApi = {
	    setPageSize
	  };
	  useGridApiMethod(apiRef, pageSizeApi);
	  /**
	   * PRE-PROCESSING
	   */

	  const stateExportPreProcessing = react.exports.useCallback((prevState, context) => {
	    var _props$initialState, _props$initialState$p;

	    const pageSizeToExport = gridPageSizeSelector(apiRef);
	    const shouldExportPageSize = // Always export if the `exportOnlyDirtyModels` property is activated
	    !context.exportOnlyDirtyModels || // Always export if the page size is controlled
	    props.pageSize != null || // Always export if the page size has been initialized
	    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null || // Export if the page size is not equal to the default value
	    pageSizeToExport !== defaultPageSize(props.autoPageSize);

	    if (!shouldExportPageSize) {
	      return prevState;
	    }

	    return _extends({}, prevState, {
	      pagination: _extends({}, prevState.pagination, {
	        pageSize: pageSizeToExport
	      })
	    });
	  }, [apiRef, props.pageSize, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.pageSize, props.autoPageSize]);
	  /**
	   * TODO: Add error if `prop.autoHeight = true`
	   */

	  const stateRestorePreProcessing = react.exports.useCallback((params, context) => {
	    var _context$stateToResto;

	    const pageSize = (_context$stateToResto = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto.pageSize;

	    if (pageSize != null) {
	      apiRef.current.setState(mergeStateWithPageSize(pageSize));
	    }

	    return params;
	  }, [apiRef]);
	  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);
	  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);
	  /**
	   * EVENTS
	   */

	  const handleUpdateAutoPageSize = react.exports.useCallback(() => {
	    const dimensions = apiRef.current.getRootDimensions();

	    if (!props.autoPageSize || !dimensions) {
	      return;
	    }

	    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);
	    const maximumPageSizeWithoutScrollBar = Math.floor((dimensions.viewportInnerSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom) / rowHeight);
	    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);
	  }, [apiRef, props.autoPageSize, rowHeight]);
	  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);
	  /**
	   * EFFECTS
	   */

	  react.exports.useEffect(() => {
	    if (props.pageSize != null && !props.autoPageSize) {
	      apiRef.current.setPageSize(props.pageSize);
	    }
	  }, [apiRef, props.autoPageSize, props.pageSize]);
	  react.exports.useEffect(() => {
	    handleUpdateAutoPageSize();
	  }, [handleUpdateAutoPageSize]);
	};

	const getPageCount = (rowCount, pageSize) => {
	  if (pageSize > 0 && rowCount > 0) {
	    return Math.ceil(rowCount / pageSize);
	  }

	  return 0;
	};

	const applyValidPage = paginationState => {
	  if (!paginationState.pageCount) {
	    return paginationState;
	  }

	  return _extends({}, paginationState, {
	    page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)
	  });
	};

	const mergeStateWithPage = page => state => _extends({}, state, {
	  pagination: applyValidPage(_extends({}, state.pagination, {
	    page
	  }))
	});

	buildWarning(["MUI: the 'rowCount' prop is undefined while using paginationMode='server'", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');
	/**
	 * @requires useGridPageSize (event)
	 */

	const useGridPage = (apiRef, props) => {
	  var _props$initialState2, _props$initialState2$;

	  const logger = useGridLogger(apiRef, 'useGridPage');
	  const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);
	  apiRef.current.unstable_registerControlState({
	    stateId: 'page',
	    propModel: props.page,
	    propOnChange: props.onPageChange,
	    stateSelector: gridPageSelector,
	    changeEvent: 'pageChange'
	  });
	  /**
	   * API METHODS
	   */

	  const setPage = react.exports.useCallback(page => {
	    logger.debug(`Setting page to ${page}`);
	    apiRef.current.setState(mergeStateWithPage(page));
	    apiRef.current.forceUpdate();
	  }, [apiRef, logger]);
	  const pageApi = {
	    setPage
	  };
	  useGridApiMethod(apiRef, pageApi);
	  /**
	   * PRE-PROCESSING
	   */

	  const stateExportPreProcessing = react.exports.useCallback((prevState, context) => {
	    var _props$initialState, _props$initialState$p;

	    const pageToExport = gridPageSelector(apiRef);
	    const shouldExportPage = // Always export if the `exportOnlyDirtyModels` property is activated
	    !context.exportOnlyDirtyModels || // Always export if the page is controlled
	    props.page != null || // Always export if the page has been initialized
	    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null || // Export if the page is not equal to the default value
	    pageToExport !== 0;

	    if (!shouldExportPage) {
	      return prevState;
	    }

	    return _extends({}, prevState, {
	      pagination: _extends({}, prevState.pagination, {
	        page: pageToExport
	      })
	    });
	  }, [apiRef, props.page, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page]);
	  const stateRestorePreProcessing = react.exports.useCallback((params, context) => {
	    var _context$stateToResto, _context$stateToResto2;

	    // We apply the constraint even if the page did not change in case the pageSize changed.
	    const page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);
	    apiRef.current.setState(mergeStateWithPage(page));
	    return params;
	  }, [apiRef]);
	  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);
	  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);
	  /**
	   * EVENTS
	   */

	  const handlePageSizeChange = pageSize => {
	    apiRef.current.setState(state => {
	      const pageCount = getPageCount(state.pagination.rowCount, pageSize);
	      return _extends({}, state, {
	        pagination: applyValidPage(_extends({}, state.pagination, {
	          pageCount,
	          page: state.pagination.page
	        }))
	      });
	    });
	    apiRef.current.forceUpdate();
	  };

	  const handlePageChange = () => apiRef.current.scrollToIndexes({
	    rowIndex: gridPageSelector(apiRef) * gridPageSizeSelector(apiRef)
	  });

	  useGridApiEventHandler(apiRef, 'pageSizeChange', handlePageSizeChange);
	  useGridApiEventHandler(apiRef, 'pageChange', handlePageChange);
	  /**
	   * EFFECTS
	   */

	  react.exports.useEffect(() => {
	  }, [props.rowCount, props.paginationMode]);
	  react.exports.useEffect(() => {
	    apiRef.current.setState(state => {
	      const rowCount = props.rowCount !== undefined ? props.rowCount : visibleTopLevelRowCount;
	      const pageCount = getPageCount(rowCount, state.pagination.pageSize);
	      const page = props.page == null ? state.pagination.page : props.page;
	      return _extends({}, state, {
	        pagination: applyValidPage(_extends({}, state.pagination, {
	          page,
	          rowCount,
	          pageCount
	        }))
	      });
	    });
	    apiRef.current.forceUpdate();
	  }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);
	};

	const paginationStateInitializer = (state, props) => {
	  var _props$initialState, _props$initialState$p, _ref, _props$page, _props$initialState2, _props$initialState2$, _props$rowCount, _props$rowCount2;

	  let pageSize;

	  if (props.pageSize != null) {
	    pageSize = props.pageSize;
	  } else if (((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null) {
	    pageSize = props.initialState.pagination.pageSize;
	  } else {
	    pageSize = defaultPageSize(props.autoPageSize);
	  }

	  return _extends({}, state, {
	    pagination: {
	      pageSize,
	      page: (_ref = (_props$page = props.page) != null ? _props$page : (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page) != null ? _ref : 0,
	      pageCount: getPageCount((_props$rowCount = props.rowCount) != null ? _props$rowCount : 0, pageSize),
	      rowCount: (_props$rowCount2 = props.rowCount) != null ? _props$rowCount2 : 0
	    }
	  });
	};
	/**
	 * @requires useGridFilter (state)
	 * @requires useGridDimensions (event) - can be after
	 */

	const useGridPagination = (apiRef, props) => {
	  useGridPageSize(apiRef, props);
	  useGridPage(apiRef, props);
	};

	const preferencePanelStateInitializer = (state, props) => {
	  var _props$initialState$p, _props$initialState;

	  return _extends({}, state, {
	    preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {
	      open: false
	    }
	  });
	};
	/**
	 * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`
	 */

	const useGridPreferencesPanel = (apiRef, props) => {
	  var _props$initialState3;

	  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');
	  const hideTimeout = react.exports.useRef();
	  const immediateTimeout = react.exports.useRef();
	  /**
	   * API METHODS
	   */

	  const hidePreferences = react.exports.useCallback(() => {
	    logger.debug('Hiding Preferences Panel');
	    const preferencePanelState = gridPreferencePanelStateSelector(apiRef.current.state);

	    if (preferencePanelState.openedPanelValue) {
	      apiRef.current.publishEvent('preferencePanelClose', {
	        openedPanelValue: preferencePanelState.openedPanelValue
	      });
	    }

	    apiRef.current.setState(state => _extends({}, state, {
	      preferencePanel: {
	        open: false
	      }
	    }));
	    apiRef.current.forceUpdate();
	  }, [apiRef, logger]); // This is to prevent the preferences from closing when you open a select box or another panel,
	  // The issue is in MUI core V4 => Fixed in V5

	  const doNotHidePanel = react.exports.useCallback(() => {
	    immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);
	  }, []); // This is a hack for the issue with Core V4, by delaying hiding the panel on the clickAwayListener,
	  // we can cancel the action if the trigger element still need the panel...

	  const hidePreferencesDelayed = react.exports.useCallback(() => {
	    hideTimeout.current = setTimeout(hidePreferences, 100);
	  }, [hidePreferences]);
	  const showPreferences = react.exports.useCallback(newValue => {
	    logger.debug('Opening Preferences Panel');
	    doNotHidePanel();
	    apiRef.current.setState(state => _extends({}, state, {
	      preferencePanel: _extends({}, state.preferencePanel, {
	        open: true,
	        openedPanelValue: newValue
	      })
	    }));
	    apiRef.current.publishEvent('preferencePanelOpen', {
	      openedPanelValue: newValue
	    });
	    apiRef.current.forceUpdate();
	  }, [logger, doNotHidePanel, apiRef]);
	  useGridApiMethod(apiRef, {
	    showPreferences,
	    hidePreferences: hidePreferencesDelayed
	  });
	  /**
	   * PRE-PROCESSING
	   */

	  const stateExportPreProcessing = react.exports.useCallback((prevState, context) => {
	    var _props$initialState2;

	    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);
	    const shouldExportPreferencePanel = // Always export if the `exportOnlyDirtyModels` property is activated
	    !context.exportOnlyDirtyModels || // Always export if the panel was initialized
	    ((_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.preferencePanel) != null || // Always export if the panel is opened
	    preferencePanelToExport.open;

	    if (!shouldExportPreferencePanel) {
	      return prevState;
	    }

	    return _extends({}, prevState, {
	      preferencePanel: preferencePanelToExport
	    });
	  }, [apiRef, (_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.preferencePanel]);
	  const stateRestorePreProcessing = react.exports.useCallback((params, context) => {
	    const preferencePanel = context.stateToRestore.preferencePanel;

	    if (preferencePanel != null) {
	      apiRef.current.setState(state => _extends({}, state, {
	        preferencePanel
	      }));
	    }

	    return params;
	  }, [apiRef]);
	  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);
	  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);
	  /**
	   * EFFECTS
	   */

	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(hideTimeout.current);
	      clearTimeout(immediateTimeout.current);
	    };
	  }, []);
	};

	// TODO v6: rename to gridEditingStateSelector
	const gridEditRowsStateSelector = state => state.editRows;

	function isPromise(promise) {
	  return typeof promise.then === 'function';
	}

	const useCellEditing = (apiRef, props) => {
	  var _props$experimentalFe2;

	  const logger = useGridLogger(apiRef, 'useGridEditRows');

	  const buildCallback = callback => (...args) => {
	    if (props.editMode === GridEditModes.Cell) {
	      callback(...args);
	    }
	  };

	  const setCellMode = react.exports.useCallback((id, field, mode) => {
	    if (apiRef.current.getCellMode(id, field) === mode) {
	      return;
	    }

	    logger.debug(`Switching cell id: ${id} field: ${field} to mode: ${mode}`);
	    apiRef.current.setState(state => {
	      const newEditRowsState = _extends({}, state.editRows);

	      newEditRowsState[id] = _extends({}, newEditRowsState[id]);

	      if (mode === GridCellModes.Edit) {
	        newEditRowsState[id][field] = {
	          value: apiRef.current.getCellValue(id, field)
	        };
	      } else {
	        delete newEditRowsState[id][field];

	        if (!Object.keys(newEditRowsState[id]).length) {
	          delete newEditRowsState[id];
	        }
	      }

	      return _extends({}, state, {
	        editRows: newEditRowsState
	      });
	    });
	    apiRef.current.forceUpdate();
	    apiRef.current.publishEvent('cellModeChange', apiRef.current.getCellParams(id, field));
	  }, [apiRef, logger]);
	  const getCellMode = react.exports.useCallback((id, field) => {
	    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);
	    const isEditing = editRowsState[id] && editRowsState[id][field];
	    return isEditing ? GridCellModes.Edit : GridCellModes.View;
	  }, [apiRef]); // TODO v6: it should always return a promise

	  const commitCellChange = react.exports.useCallback((params, event = {}) => {
	    var _props$experimentalFe;

	    const {
	      id,
	      field
	    } = params;
	    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);
	    const model = apiRef.current.getEditRowsModel();

	    if (!model[id] || !model[id][field]) {
	      throw new Error(`MUI: Cell at id: ${id} and field: ${field} is not in edit mode.`);
	    }

	    const editCellProps = model[id][field];
	    const column = apiRef.current.getColumn(field);
	    const row = apiRef.current.getRow(id);

	    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {
	      const cellProps = model[id][field];

	      if (cellProps.isValidating || cellProps.error) {
	        return false;
	      }
	    }

	    const commitParams = _extends({}, params, {
	      value: editCellProps.value
	    });

	    let hasError = !!editCellProps.error;

	    if (!hasError && typeof column.preProcessEditCellProps === 'function') {
	      const result = column.preProcessEditCellProps({
	        id,
	        row,
	        props: editCellProps
	      });

	      if (isPromise(result)) {
	        return result.then(newEditCellProps => {
	          apiRef.current.unstable_setEditCellProps({
	            id,
	            field,
	            props: newEditCellProps
	          });

	          if (newEditCellProps.error) {
	            return false;
	          }

	          apiRef.current.publishEvent('cellEditCommit', commitParams, event);
	          return true;
	        });
	      }

	      apiRef.current.unstable_setEditCellProps({
	        id,
	        field,
	        props: result
	      });
	      hasError = !!result.error;
	    }

	    if (!hasError) {
	      apiRef.current.publishEvent('cellEditCommit', commitParams, event);
	      return true;
	    }

	    return false;
	  }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);
	  const setCellEditingEditCellValue = react.exports.useCallback(params => {
	    const column = apiRef.current.getColumn(params.field);
	    const row = apiRef.current.getRow(params.id);
	    return new Promise(resolve => {
	      let newEditCellProps = {
	        value: params.value
	      };
	      const model = apiRef.current.getEditRowsModel();
	      const editCellProps = model[params.id][params.field];

	      if (typeof column.preProcessEditCellProps !== 'function') {
	        apiRef.current.unstable_setEditCellProps(_extends({}, params, {
	          props: newEditCellProps
	        }));
	        resolve(true);
	        return;
	      } // setEditCellProps runs the value parser and returns the updated props


	      newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {
	        props: _extends({}, editCellProps, {
	          isValidating: true
	        })
	      }));
	      Promise.resolve(column.preProcessEditCellProps({
	        id: params.id,
	        row,
	        props: _extends({}, newEditCellProps, {
	          value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)
	        })
	      })).then(newEditCellPropsProcessed => {
	        apiRef.current.unstable_setEditCellProps(_extends({}, params, {
	          props: _extends({}, newEditCellPropsProcessed, {
	            isValidating: false
	          })
	        }));
	        resolve(!newEditCellPropsProcessed.error);
	      });
	    });
	  }, [apiRef]);
	  const cellEditingApi = {
	    setCellMode,
	    getCellMode,
	    commitCellChange,
	    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue
	  };
	  useGridApiMethod(apiRef, cellEditingApi);
	  const handleCellKeyDown = react.exports.useCallback(async (params, event) => {
	    // Wait until IME is settled for Asian languages like Japanese and Chinese
	    // TODO: `event.which` is depricated but this is a temporary workaround
	    if (event.which === 229) {
	      return;
	    }

	    const {
	      id,
	      field,
	      cellMode,
	      isEditable
	    } = params;

	    if (!isEditable) {
	      return;
	    }

	    const isEditMode = cellMode === GridCellModes.Edit;
	    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;

	    if (!isEditMode && isCellEnterEditModeKeys(event) && !isModifierKeyPressed && !(event.key === ' ' && event.shiftKey)) {
	      apiRef.current.publishEvent('cellEditStart', params, event);
	    }

	    if (!isEditMode && isDeleteKeys(event.key)) {
	      apiRef.current.setEditCellValue({
	        id,
	        field,
	        value: ''
	      });
	      apiRef.current.commitCellChange({
	        id,
	        field
	      }, event);
	      apiRef.current.publishEvent('cellEditStop', params, event);
	    }

	    if (isEditMode && isCellEditCommitKeys(event.key)) {
	      const commitParams = {
	        id,
	        field
	      };
	      const isValid = await apiRef.current.commitCellChange(commitParams, event);

	      if (!isValid) {
	        return;
	      }
	    }

	    if (isEditMode && isCellExitEditModeKeys(event.key)) {
	      apiRef.current.publishEvent('cellEditStop', params, event);
	    }
	  }, [apiRef]);
	  const handleCellDoubleClick = react.exports.useCallback((params, event) => {
	    if (!params.isEditable) {
	      return;
	    }

	    apiRef.current.publishEvent('cellEditStart', params, event);
	  }, [apiRef]);

	  const commitPropsAndExit = async (params, event) => {
	    if (params.cellMode === GridCellModes.View) {
	      return;
	    }

	    await apiRef.current.commitCellChange(params, event);
	    apiRef.current.publishEvent('cellEditStop', params, event);
	  };

	  const handleCellFocusOut = useEventCallback((params, event) => {
	    commitPropsAndExit(params, event);
	  });
	  const handleColumnHeaderDragStart = useEventCallback(() => {
	    const cell = gridFocusCellSelector(apiRef);

	    if (!cell) {
	      return;
	    }

	    const params = apiRef.current.getCellParams(cell.id, cell.field);
	    commitPropsAndExit(params, {});
	  });
	  const handleCellEditStart = react.exports.useCallback((params, event) => {
	    if (!params.isEditable) {
	      return;
	    }

	    apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);

	    if (isKeyboardEvent$1(event) && isPrintableKey(event)) {
	      apiRef.current.unstable_setEditCellProps({
	        id: params.id,
	        field: params.field,
	        props: {
	          value: ''
	        }
	      });
	    }
	  }, [apiRef]);
	  const handleCellEditStop = react.exports.useCallback((params, event) => {
	    apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);

	    if (!isKeyboardEvent$1(event)) {
	      return;
	    }

	    if (isCellEditCommitKeys(event.key)) {
	      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);
	      return;
	    }

	    if (event.key === 'Escape' || isDeleteKeys(event.key)) {
	      apiRef.current.setCellFocus(params.id, params.field);
	    }
	  }, [apiRef]);
	  const handleCellEditCommit = react.exports.useCallback(params => {
	    const {
	      id,
	      field
	    } = params;
	    const model = apiRef.current.getEditRowsModel();
	    const {
	      value
	    } = model[id][field];
	    logger.debug(`Setting cell id: ${id} field: ${field} to value: ${value == null ? void 0 : value.toString()}`);
	    const row = apiRef.current.getRow(id);

	    if (row) {
	      const column = apiRef.current.getColumn(params.field);

	      let rowUpdate = _extends({}, row, {
	        [field]: value
	      });

	      if (column.valueSetter) {
	        rowUpdate = column.valueSetter({
	          row,
	          value
	        });
	      }

	      apiRef.current.updateRows([rowUpdate]);
	    }
	  }, [apiRef, logger]);
	  const handleEditCellPropsChange = react.exports.useCallback(params => {
	    const row = apiRef.current.getRow(params.id);
	    const column = apiRef.current.getColumn(params.field);
	    const editCellProps = column.preProcessEditCellProps ? column.preProcessEditCellProps({
	      id: params.id,
	      row,
	      props: params.props
	    }) : params.props;

	    if (isPromise(editCellProps)) {
	      editCellProps.then(newEditCellProps => {
	        apiRef.current.unstable_setEditCellProps(_extends({}, params, {
	          props: newEditCellProps
	        }));
	      });
	    } else {
	      apiRef.current.unstable_setEditCellProps(_extends({}, params, {
	        props: editCellProps
	      }));
	    }
	  }, [apiRef]);
	  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));
	  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));
	  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));
	  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));
	  useGridApiEventHandler(apiRef, 'cellEditStart', buildCallback(handleCellEditStart));
	  useGridApiEventHandler(apiRef, 'cellEditStop', buildCallback(handleCellEditStop));
	  useGridApiEventHandler(apiRef, 'cellEditCommit', buildCallback(handleCellEditCommit));
	  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));
	  useGridApiOptionHandler(apiRef, 'cellEditCommit', props.onCellEditCommit);
	  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);
	  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);
	};

	const useGridRowEditing$1 = (apiRef, props) => {
	  var _props$experimentalFe2, _props$experimentalFe4;

	  const focusTimeout = react.exports.useRef(null);
	  const nextFocusedCell = react.exports.useRef(null);
	  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);

	  const buildCallback = callback => (...args) => {
	    if (props.editMode === GridEditModes.Row) {
	      callback(...args);
	    }
	  };

	  const setRowMode = react.exports.useCallback((id, mode) => {
	    if (mode === apiRef.current.getRowMode(id)) {
	      return;
	    }

	    apiRef.current.setState(state => {
	      const newEditRowsState = _extends({}, state.editRows);

	      if (mode === GridRowModes.Edit) {
	        newEditRowsState[id] = {};
	        columns.forEach(column => {
	          const cellParams = apiRef.current.getCellParams(id, column.field);

	          if (cellParams.isEditable) {
	            newEditRowsState[id][column.field] = {
	              value: cellParams.value
	            };
	          }
	        });
	      } else {
	        delete newEditRowsState[id];
	      }

	      return _extends({}, state, {
	        editRows: newEditRowsState
	      });
	    });
	    apiRef.current.forceUpdate();
	  }, [apiRef, columns]);
	  const getRowMode = react.exports.useCallback(id => {
	    if (props.editMode === GridEditModes.Cell) {
	      return GridRowModes.View;
	    }

	    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);
	    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;
	  }, [apiRef, props.editMode]);
	  const commitRowChange = react.exports.useCallback((id, event = {}) => {
	    var _props$experimentalFe;

	    if (props.editMode === GridEditModes.Cell) {
	      throw new Error(`MUI: You can't commit changes when the edit mode is 'cell'.`);
	    }

	    apiRef.current.unstable_runPendingEditCellValueMutation(id);
	    const model = apiRef.current.getEditRowsModel();
	    const editRowProps = model[id];

	    if (!editRowProps) {
	      throw new Error(`MUI: Row at id: ${id} is not being edited.`);
	    }

	    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {
	      const isValid = Object.keys(editRowProps).reduce((acc, field) => {
	        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;
	      }, true);

	      if (!isValid) {
	        return false;
	      }
	    }

	    const hasFieldWithError = Object.values(editRowProps).some(value => !!value.error);

	    if (hasFieldWithError) {
	      return false;
	    }

	    const fieldsWithValidator = Object.keys(editRowProps).filter(field => {
	      const column = apiRef.current.getColumn(field);
	      return typeof column.preProcessEditCellProps === 'function';
	    });

	    if (fieldsWithValidator.length > 0) {
	      const row = apiRef.current.getRow(id);
	      const validatorErrors = fieldsWithValidator.map(async field => {
	        const column = apiRef.current.getColumn(field);
	        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({
	          id,
	          row,
	          props: editRowProps[field]
	        }));
	        apiRef.current.unstable_setEditCellProps({
	          id,
	          field,
	          props: newEditCellProps
	        });
	        return newEditCellProps.error;
	      });
	      return Promise.all(validatorErrors).then(errors => {
	        if (errors.some(error => !!error)) {
	          return false;
	        }

	        apiRef.current.publishEvent('rowEditCommit', id, event);
	        return true;
	      });
	    }

	    apiRef.current.publishEvent('rowEditCommit', id, event);
	    return true;
	  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);
	  const setRowEditingEditCellValue = react.exports.useCallback(params => {
	    const model = apiRef.current.getEditRowsModel();
	    const editRow = model[params.id];
	    const row = apiRef.current.getRow(params.id);
	    let isValid = true;
	    return new Promise(resolve => {
	      Object.keys(editRow).forEach(async field => {
	        const column = apiRef.current.getColumn(field);
	        let editCellProps = field === params.field ? {
	          value: params.value
	        } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props

	        editCellProps = apiRef.current.unstable_setEditCellProps({
	          id: params.id,
	          field,
	          props: _extends({}, editCellProps, {
	            isValidating: true
	          })
	        });

	        if (column.preProcessEditCellProps) {
	          editCellProps = await Promise.resolve(column.preProcessEditCellProps({
	            id: params.id,
	            row,
	            props: _extends({}, editCellProps, {
	              value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value
	            })
	          }));
	        }

	        if (editCellProps.error) {
	          isValid = false;
	        }

	        apiRef.current.unstable_setEditCellProps({
	          id: params.id,
	          field,
	          props: _extends({}, editCellProps, {
	            isValidating: false
	          })
	        });
	      });
	      resolve(isValid);
	    });
	  }, [apiRef]);
	  const rowEditingApi = {
	    setRowMode,
	    getRowMode,
	    commitRowChange,
	    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue
	  };
	  useGridApiMethod(apiRef, rowEditingApi);
	  const handleCellKeyDown = react.exports.useCallback(async (params, event) => {
	    // Wait until IME is settled for Asian languages like Japanese and Chinese
	    // TODO: `event.which` is depricated but this is a temporary workaround
	    if (event.which === 229) {
	      return;
	    }

	    const {
	      cellMode,
	      isEditable
	    } = params;

	    if (!isEditable) {
	      return;
	    }

	    const isEditMode = cellMode === GridCellModes.Edit;
	    const rowParams = apiRef.current.getRowParams(params.id);

	    if (isEditMode) {
	      if (event.key === 'Enter') {
	        var _props$experimentalFe3;

	        // TODO: check the return before firing 'rowEditStop'
	        // On cell editing, it won't exits the edit mode with error
	        const isValid = await apiRef.current.commitRowChange(params.id);

	        if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {
	          return;
	        }

	        apiRef.current.publishEvent('rowEditStop', rowParams, event);
	      } else if (event.key === 'Escape') {
	        apiRef.current.publishEvent('rowEditStop', rowParams, event);
	      }
	    } else if (event.key === 'Enter') {
	      apiRef.current.publishEvent('rowEditStart', rowParams, event);
	    }
	  }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);
	  const handleCellDoubleClick = react.exports.useCallback((params, event) => {
	    if (!params.isEditable) {
	      return;
	    }

	    const rowParams = apiRef.current.getRowParams(params.id);
	    apiRef.current.publishEvent('rowEditStart', rowParams, event);
	  }, [apiRef]);
	  const handleEditCellPropsChange = react.exports.useCallback(params => {
	    const row = apiRef.current.getRow(params.id);
	    const model = apiRef.current.getEditRowsModel();
	    const editRow = model[params.id];
	    Object.keys(editRow).forEach(async field => {
	      const column = apiRef.current.getColumn(field);

	      if (column.preProcessEditCellProps) {
	        const editCellProps = field === params.field ? params.props : editRow[field];
	        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({
	          id: params.id,
	          row,
	          props: editCellProps
	        }));
	        apiRef.current.unstable_setEditCellProps({
	          id: params.id,
	          field,
	          props: newEditCellProps
	        });
	      } else if (field === params.field) {
	        apiRef.current.unstable_setEditCellProps(params);
	      }
	    });
	  }, [apiRef]);
	  const handleRowEditStart = react.exports.useCallback(params => {
	    apiRef.current.setRowMode(params.id, GridRowModes.Edit);
	  }, [apiRef]);
	  const handleRowEditStop = react.exports.useCallback((params, event) => {
	    apiRef.current.setRowMode(params.id, GridRowModes.View);

	    if (event.key === 'Enter') {
	      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);
	    }
	  }, [apiRef]);
	  const handleRowEditCommit = react.exports.useCallback(id => {
	    const model = apiRef.current.getEditRowsModel();
	    const editRow = model[id];

	    if (!editRow) {
	      throw new Error(`MUI: Row at id: ${id} is not being edited.`);
	    }

	    const row = apiRef.current.getRow(id);

	    if (row) {
	      let rowUpdate = _extends({}, row);

	      Object.keys(editRow).forEach(field => {
	        const column = apiRef.current.getColumn(field);
	        const value = editRow[field].value;

	        if (column.valueSetter) {
	          rowUpdate = column.valueSetter({
	            row: rowUpdate,
	            value
	          });
	        } else {
	          rowUpdate[field] = value;
	        }
	      });
	      apiRef.current.updateRows([rowUpdate]);
	    }
	  }, [apiRef]);
	  const handleCellFocusIn = react.exports.useCallback(params => {
	    nextFocusedCell.current = params;
	  }, []);

	  const commitPropsAndExit = async (params, event) => {
	    if (params.cellMode === GridCellModes.View) {
	      return;
	    }

	    nextFocusedCell.current = null;
	    focusTimeout.current = setTimeout(async () => {
	      var _nextFocusedCell$curr;

	      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {
	        await apiRef.current.commitRowChange(params.id, event);
	        const rowParams = apiRef.current.getRowParams(params.id);
	        apiRef.current.publishEvent('rowEditStop', rowParams, event);
	      }
	    });
	  };

	  const handleCellFocusOut = useEventCallback((params, event) => {
	    commitPropsAndExit(params, event);
	  });
	  const handleColumnHeaderDragStart = useEventCallback(() => {
	    const cell = gridFocusCellSelector(apiRef);

	    if (!cell) {
	      return;
	    }

	    const params = apiRef.current.getCellParams(cell.id, cell.field);
	    commitPropsAndExit(params, {});
	  });
	  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));
	  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));
	  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));
	  useGridApiEventHandler(apiRef, 'rowEditStart', buildCallback(handleRowEditStart));
	  useGridApiEventHandler(apiRef, 'rowEditStop', buildCallback(handleRowEditStop));
	  useGridApiEventHandler(apiRef, 'rowEditCommit', buildCallback(handleRowEditCommit));
	  useGridApiEventHandler(apiRef, 'cellFocusIn', buildCallback(handleCellFocusIn));
	  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));
	  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));
	  useGridApiOptionHandler(apiRef, 'rowEditCommit', props.onRowEditCommit);
	  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);
	  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);
	};

	const editingStateInitializer$1 = state => _extends({}, state, {
	  editRows: {}
	});
	/**
	 * @requires useGridFocus - can be after, async only
	 * @requires useGridParamsApi (method)
	 * @requires useGridColumns (state)
	 */

	function useGridEditing$1(apiRef, props) {
	  var _props$experimentalFe2;

	  const logger = useGridLogger(apiRef, 'useGridEditRows');
	  useCellEditing(apiRef, props);
	  useGridRowEditing$1(apiRef, props);
	  const debounceMap = react.exports.useRef({});
	  apiRef.current.unstable_registerControlState({
	    stateId: 'editRows',
	    propModel: props.editRowsModel,
	    propOnChange: props.onEditRowsModelChange,
	    stateSelector: gridEditRowsStateSelector,
	    changeEvent: 'editRowsModelChange'
	  });
	  const isCellEditable = react.exports.useCallback(params => !params.rowNode.isAutoGenerated && !params.rowNode.isPinned && !!params.colDef.editable && !!params.colDef.renderEditCell && (!props.isCellEditable || props.isCellEditable(params)), // eslint-disable-next-line react-hooks/exhaustive-deps
	  [props.isCellEditable]);

	  const maybeDebounce = (id, field, debounceMs, callback) => {
	    if (!debounceMs) {
	      callback();
	      return;
	    }

	    if (!debounceMap.current[id]) {
	      debounceMap.current[id] = {};
	    }

	    if (debounceMap.current[id][field]) {
	      const [timeout] = debounceMap.current[id][field];
	      clearTimeout(timeout);
	    }

	    const callbackToRunImmediately = () => {
	      callback();
	      const [timeout] = debounceMap.current[id][field];
	      clearTimeout(timeout);
	      delete debounceMap.current[id][field];
	    };

	    const timeout = setTimeout(() => {
	      callback();
	      delete debounceMap.current[id][field];
	    }, debounceMs);
	    debounceMap.current[id][field] = [timeout, callbackToRunImmediately];
	  };

	  const runPendingEditCellValueMutation = react.exports.useCallback((id, field) => {
	    if (!debounceMap.current[id]) {
	      return;
	    }

	    if (!field) {
	      Object.keys(debounceMap.current[id]).forEach(debouncedField => {
	        const [, callback] = debounceMap.current[id][debouncedField];
	        callback();
	      });
	    } else if (debounceMap.current[id][field]) {
	      const [, callback] = debounceMap.current[id][field];
	      callback();
	    }
	  }, []);
	  const setEditCellValue = react.exports.useCallback((params, event = {}) => {
	    maybeDebounce(params.id, params.field, params.debounceMs, () => {
	      var _props$experimentalFe;

	      if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {
	        if (props.editMode === 'row') {
	          return apiRef.current.unstable_setRowEditingEditCellValue(params);
	        }

	        return apiRef.current.unstable_setCellEditingEditCellValue(params);
	      }

	      const newParams = {
	        id: params.id,
	        field: params.field,
	        props: {
	          value: params.value
	        }
	      };
	      return apiRef.current.publishEvent('editCellPropsChange', newParams, event);
	    });
	  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);
	  const parseValue = react.exports.useCallback((id, field, value) => {
	    const column = apiRef.current.getColumn(field);
	    return column.valueParser ? column.valueParser(value, apiRef.current.getCellParams(id, field)) : value;
	  }, [apiRef]);
	  const setEditCellProps = react.exports.useCallback(params => {
	    const {
	      id,
	      field,
	      props: editProps
	    } = params;
	    logger.debug(`Setting cell props on id: ${id} field: ${field}`);
	    apiRef.current.setState(state => {
	      const editRowsModel = _extends({}, state.editRows);

	      editRowsModel[id] = _extends({}, state.editRows[id]);
	      editRowsModel[id][field] = _extends({}, editProps, {
	        value: parseValue(id, field, editProps.value)
	      });
	      return _extends({}, state, {
	        editRows: editRowsModel
	      });
	    });
	    apiRef.current.forceUpdate();
	    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);
	    return editRowsState[id][field];
	  }, [apiRef, logger, parseValue]);
	  const setEditRowsModel = react.exports.useCallback(model => {
	    const currentModel = gridEditRowsStateSelector(apiRef.current.state);

	    if (currentModel !== model) {
	      logger.debug(`Setting editRows model`);
	      apiRef.current.setState(state => _extends({}, state, {
	        editRows: model
	      }));
	      apiRef.current.forceUpdate();
	    }
	  }, [apiRef, logger]);
	  const getEditRowsModel = react.exports.useCallback(() => gridEditRowsStateSelector(apiRef.current.state), [apiRef]);
	  const preventTextSelection = react.exports.useCallback((params, event) => {
	    const isMoreThanOneClick = event.detail > 1;

	    if (params.isEditable && params.cellMode === GridCellModes.View && isMoreThanOneClick) {
	      // If we click more than one time, then we prevent the default behavior of selecting the text cell.
	      event.preventDefault();
	    }
	  }, []);
	  useGridApiEventHandler(apiRef, 'cellMouseDown', preventTextSelection);
	  useGridApiOptionHandler(apiRef, 'editCellPropsChange', props.onEditCellPropsChange); // TODO v6: remove, use `preProcessEditCellProps` instead

	  const editingSharedApi = {
	    isCellEditable,
	    setEditRowsModel,
	    getEditRowsModel,
	    setEditCellValue,
	    unstable_setEditCellProps: setEditCellProps,
	    unstable_parseValue: parseValue,
	    unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation
	  };
	  useGridApiMethod(apiRef, editingSharedApi);
	  react.exports.useEffect(() => {
	    if (props.editRowsModel !== undefined) {
	      apiRef.current.setEditRowsModel(props.editRowsModel);
	    }
	  }, [apiRef, props.editRowsModel]);
	}

	const _excluded$b = ["id", "field"],
	      _excluded2$1 = ["id", "field"];
	const missingOnProcessRowUpdateErrorWarning$1 = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');
	const useGridCellEditing = (apiRef, props) => {
	  const [cellModesModel, setCellModesModel] = react.exports.useState({});
	  const cellModesModelRef = react.exports.useRef(cellModesModel);
	  const prevCellModesModel = react.exports.useRef({});
	  const {
	    processRowUpdate,
	    onProcessRowUpdateError,
	    cellModesModel: cellModesModelProp,
	    onCellModesModelChange,
	    signature
	  } = props;

	  const runIfEditModeIsCell = callback => (...args) => {
	    if (props.editMode === GridEditModes.Cell) {
	      callback(...args);
	    }
	  };

	  const throwIfNotEditable = react.exports.useCallback((id, field) => {
	    const params = apiRef.current.getCellParams(id, field);

	    if (!apiRef.current.isCellEditable(params)) {
	      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);
	    }
	  }, [apiRef]);
	  const throwIfNotInMode = react.exports.useCallback((id, field, mode) => {
	    if (apiRef.current.getCellMode(id, field) !== mode) {
	      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);
	    }
	  }, [apiRef]);
	  const handleCellDoubleClick = react.exports.useCallback((params, event) => {
	    if (!params.isEditable) {
	      return;
	    }

	    if (params.cellMode === GridCellModes.Edit) {
	      return;
	    }

	    const newParams = _extends({}, params, {
	      reason: GridCellEditStartReasons.cellDoubleClick
	    });

	    apiRef.current.publishEvent('cellEditStart', newParams, event);
	  }, [apiRef]);
	  const handleCellFocusOut = react.exports.useCallback((params, event) => {
	    if (params.cellMode === GridCellModes.View) {
	      return;
	    }

	    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {
	      return;
	    }

	    const newParams = _extends({}, params, {
	      reason: GridCellEditStopReasons.cellFocusOut
	    });

	    apiRef.current.publishEvent('cellEditStop', newParams, event);
	  }, [apiRef]);
	  const handleCellKeyDown = react.exports.useCallback((params, event) => {
	    if (params.cellMode === GridCellModes.Edit) {
	      // Wait until IME is settled for Asian languages like Japanese and Chinese
	      // TODO: `event.which` is depricated but this is a temporary workaround
	      if (event.which === 229) {
	        return;
	      }

	      let reason;

	      if (event.key === 'Escape') {
	        reason = GridCellEditStopReasons.escapeKeyDown;
	      } else if (event.key === 'Enter') {
	        reason = GridCellEditStopReasons.enterKeyDown;
	      } else if (event.key === 'Tab') {
	        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;
	        event.preventDefault(); // Prevent going to the next element in the tab sequence
	      }

	      if (reason) {
	        const newParams = _extends({}, params, {
	          reason
	        });

	        apiRef.current.publishEvent('cellEditStop', newParams, event);
	      }
	    } else if (params.isEditable) {
	      let reason;

	      if (event.key === ' ' && event.shiftKey) {
	        return; // Shift + Space is used to select the row
	      }

	      if (isPrintableKey(event)) {
	        reason = GridCellEditStartReasons.printableKeyDown;
	      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {
	        reason = GridCellEditStartReasons.printableKeyDown;
	      } else if (event.key === 'Enter') {
	        reason = GridCellEditStartReasons.enterKeyDown;
	      } else if (event.key === 'Delete' || event.key === 'Backspace') {
	        // Delete on Windows, Backspace on macOS
	        reason = GridCellEditStartReasons.deleteKeyDown;
	      }

	      if (reason) {
	        const newParams = _extends({}, params, {
	          reason,
	          key: event.key
	        });

	        apiRef.current.publishEvent('cellEditStart', newParams, event);
	      }
	    }
	  }, [apiRef]);
	  const handleCellEditStart = react.exports.useCallback(params => {
	    const {
	      id,
	      field,
	      reason,
	      key
	    } = params;
	    const startCellEditModeParams = {
	      id,
	      field
	    };

	    if (reason === GridCellEditStartReasons.printableKeyDown) {
	      if (react.exports.version.startsWith('18')) {
	        startCellEditModeParams.initialValue = key; // In React 17, cleaning the input is enough
	      } else {
	        startCellEditModeParams.deleteValue = true;
	      }
	    } else if (reason === GridCellEditStartReasons.deleteKeyDown) {
	      startCellEditModeParams.deleteValue = true;
	    }

	    apiRef.current.startCellEditMode(startCellEditModeParams);
	  }, [apiRef]);
	  const handleCellEditStop = react.exports.useCallback(params => {
	    const {
	      id,
	      field,
	      reason
	    } = params;
	    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);
	    let cellToFocusAfter;

	    if (reason === GridCellEditStopReasons.enterKeyDown) {
	      cellToFocusAfter = 'below';
	    } else if (reason === GridCellEditStopReasons.tabKeyDown) {
	      cellToFocusAfter = 'right';
	    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {
	      cellToFocusAfter = 'left';
	    }

	    let ignoreModifications = reason === 'escapeKeyDown';
	    const editingState = gridEditRowsStateSelector(apiRef.current.state);

	    if (editingState[id][field].isProcessingProps && !props.disableIgnoreModificationsIfProcessingProps) {
	      // The user wants to stop editing the cell but we can't wait for the props to be processed.
	      // In this case, discard the modifications.
	      ignoreModifications = true;
	    }

	    apiRef.current.stopCellEditMode({
	      id,
	      field,
	      ignoreModifications,
	      cellToFocusAfter
	    });
	  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);
	  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));
	  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));
	  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));
	  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));
	  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));
	  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);
	  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);
	  const getCellMode = react.exports.useCallback((id, field) => {
	    const editingState = gridEditRowsStateSelector(apiRef.current.state);
	    const isEditing = editingState[id] && editingState[id][field];
	    return isEditing ? GridCellModes.Edit : GridCellModes.View;
	  }, [apiRef]);
	  const updateCellModesModel = useEventCallback(newModel => {
	    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;

	    if (onCellModesModelChange && isNewModelDifferentFromProp) {
	      const details = signature === GridSignature.DataGridPro ? {
	        api: apiRef.current
	      } : {};
	      onCellModesModelChange(newModel, details);
	    }

	    if (props.cellModesModel && isNewModelDifferentFromProp) {
	      return; // The prop always win
	    }

	    setCellModesModel(newModel);
	    cellModesModelRef.current = newModel;
	    apiRef.current.publishEvent('cellModesModelChange', newModel);
	  });
	  const updateFieldInCellModesModel = react.exports.useCallback((id, field, newProps) => {
	    // We use the ref because it always contain the up-to-date value, different from the state
	    // that needs a rerender to reflect the new value
	    const newModel = _extends({}, cellModesModelRef.current);

	    if (newProps !== null) {
	      newModel[id] = _extends({}, newModel[id], {
	        [field]: _extends({}, newProps)
	      });
	    } else {
	      const _newModel$id = newModel[id],
	            otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference


	      newModel[id] = otherFields;

	      if (Object.keys(newModel[id]).length === 0) {
	        delete newModel[id];
	      }
	    }

	    updateCellModesModel(newModel);
	  }, [updateCellModesModel]);
	  const updateOrDeleteFieldState = react.exports.useCallback((id, field, newProps) => {
	    apiRef.current.setState(state => {
	      const newEditingState = _extends({}, state.editRows);

	      if (newProps !== null) {
	        newEditingState[id] = _extends({}, newEditingState[id], {
	          [field]: _extends({}, newProps)
	        });
	      } else {
	        delete newEditingState[id][field];

	        if (Object.keys(newEditingState[id]).length === 0) {
	          delete newEditingState[id];
	        }
	      }

	      return _extends({}, state, {
	        editRows: newEditingState
	      });
	    });
	    apiRef.current.forceUpdate();
	  }, [apiRef]);
	  const startCellEditMode = react.exports.useCallback(params => {
	    const {
	      id,
	      field
	    } = params,
	          other = _objectWithoutPropertiesLoose(params, _excluded$b);

	    throwIfNotEditable(id, field);
	    throwIfNotInMode(id, field, GridCellModes.View);
	    updateFieldInCellModesModel(id, field, _extends({
	      mode: GridCellModes.Edit
	    }, other));
	  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);
	  const updateStateToStartCellEditMode = useEventCallback(params => {
	    const {
	      id,
	      field,
	      deleteValue,
	      initialValue
	    } = params;
	    let newValue = apiRef.current.getCellValue(id, field);

	    if (deleteValue || initialValue) {
	      newValue = deleteValue ? '' : initialValue;
	    }

	    const newProps = {
	      value: newValue,
	      error: false,
	      isProcessingProps: false
	    };
	    updateOrDeleteFieldState(id, field, newProps);
	    apiRef.current.setCellFocus(id, field);
	  });
	  const stopCellEditMode = react.exports.useCallback(params => {
	    const {
	      id,
	      field
	    } = params,
	          other = _objectWithoutPropertiesLoose(params, _excluded2$1);

	    throwIfNotInMode(id, field, GridCellModes.Edit);
	    updateFieldInCellModesModel(id, field, _extends({
	      mode: GridCellModes.View
	    }, other));
	  }, [throwIfNotInMode, updateFieldInCellModesModel]);
	  const updateStateToStopCellEditMode = useEventCallback(async params => {
	    const {
	      id,
	      field,
	      ignoreModifications,
	      cellToFocusAfter = 'none'
	    } = params;
	    throwIfNotInMode(id, field, GridCellModes.Edit);
	    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);

	    const finishCellEditMode = () => {
	      updateOrDeleteFieldState(id, field, null);
	      updateFieldInCellModesModel(id, field, null);

	      if (cellToFocusAfter !== 'none') {
	        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);
	      }
	    };

	    if (ignoreModifications) {
	      finishCellEditMode();
	      return;
	    }

	    const editingState = gridEditRowsStateSelector(apiRef.current.state);
	    const {
	      error,
	      isProcessingProps
	    } = editingState[id][field];

	    if (error || isProcessingProps) {
	      // Attempt to change cell mode to "view" was not successful
	      // Update previous mode to allow another attempt
	      prevCellModesModel.current[id][field].mode = GridCellModes.Edit; // Revert the mode in the cellModesModel prop back to "edit"

	      updateFieldInCellModesModel(id, field, {
	        mode: GridCellModes.Edit
	      });
	      return;
	    }

	    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);

	    if (processRowUpdate) {
	      const handleError = errorThrown => {
	        prevCellModesModel.current[id][field].mode = GridCellModes.Edit; // Revert the mode in the cellModesModel prop back to "edit"

	        updateFieldInCellModesModel(id, field, {
	          mode: GridCellModes.Edit
	        });

	        if (onProcessRowUpdateError) {
	          onProcessRowUpdateError(errorThrown);
	        } else {
	          missingOnProcessRowUpdateErrorWarning$1();
	        }
	      };

	      try {
	        const row = apiRef.current.getRow(id);
	        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {
	          apiRef.current.updateRows([finalRowUpdate]);
	          finishCellEditMode();
	        }).catch(handleError);
	      } catch (errorThrown) {
	        handleError(errorThrown);
	      }
	    } else {
	      apiRef.current.updateRows([rowUpdate]);
	      finishCellEditMode();
	    }
	  });
	  const setCellEditingEditCellValue = react.exports.useCallback(async params => {
	    var _editingState$id, _editingState$id$fiel;

	    const {
	      id,
	      field,
	      value,
	      debounceMs,
	      unstable_skipValueParser: skipValueParser
	    } = params;
	    throwIfNotEditable(id, field);
	    throwIfNotInMode(id, field, GridCellModes.Edit);
	    const column = apiRef.current.getColumn(field);
	    const row = apiRef.current.getRow(id);
	    let parsedValue = value;

	    if (column.valueParser && !skipValueParser) {
	      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));
	    }

	    let editingState = gridEditRowsStateSelector(apiRef.current.state);

	    let newProps = _extends({}, editingState[id][field], {
	      value: parsedValue,
	      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'
	    });

	    if (column.preProcessEditCellProps) {
	      const hasChanged = value !== editingState[id][field].value;
	      newProps = _extends({}, newProps, {
	        isProcessingProps: true
	      });
	      updateOrDeleteFieldState(id, field, newProps);
	      newProps = await Promise.resolve(column.preProcessEditCellProps({
	        id,
	        row,
	        props: newProps,
	        hasChanged
	      }));
	    } // Check again if the cell is in edit mode because the user may have
	    // discarded the changes while the props were being processed.


	    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {
	      return false;
	    }

	    editingState = gridEditRowsStateSelector(apiRef.current.state);
	    newProps = _extends({}, newProps, {
	      isProcessingProps: false
	    }); // We don't update the value with the one coming from the props pre-processing
	    // because when the promise resolves it may be already outdated. The only
	    // exception to this rule is when there's no pre-processing.

	    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
	    updateOrDeleteFieldState(id, field, newProps);
	    editingState = gridEditRowsStateSelector(apiRef.current.state);
	    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);
	  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);
	  const getRowWithUpdatedValuesFromCellEditing = react.exports.useCallback((id, field) => {
	    const column = apiRef.current.getColumn(field);
	    const editingState = gridEditRowsStateSelector(apiRef.current.state);
	    const {
	      value
	    } = editingState[id][field];
	    const row = apiRef.current.getRow(id);
	    return column.valueSetter ? column.valueSetter({
	      value,
	      row
	    }) : _extends({}, row, {
	      [field]: value
	    });
	  }, [apiRef]);
	  const editingApi = {
	    getCellMode,
	    startCellEditMode,
	    stopCellEditMode,
	    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,
	    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing
	  };
	  useGridApiMethod(apiRef, editingApi);
	  react.exports.useEffect(() => {
	    if (cellModesModelProp) {
	      updateCellModesModel(cellModesModelProp);
	    }
	  }, [cellModesModelProp, updateCellModesModel]);
	  react.exports.useEffect(() => {
	    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later

	    const copyOfPrevCellModes = prevCellModesModel.current;
	    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later

	    Object.entries(cellModesModel).forEach(([id, fields]) => {
	      Object.entries(fields).forEach(([field, params]) => {
	        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;

	        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;
	        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;

	        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {
	          updateStateToStartCellEditMode(_extends({
	            id: originalId,
	            field
	          }, params));
	        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {
	          updateStateToStopCellEditMode(_extends({
	            id: originalId,
	            field
	          }, params));
	        }
	      });
	    });
	  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);
	};

	const _excluded$a = ["id"],
	      _excluded2 = ["id"];
	const missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');
	const useGridRowEditing = (apiRef, props) => {
	  const [rowModesModel, setRowModesModel] = react.exports.useState({});
	  const rowModesModelRef = react.exports.useRef(rowModesModel);
	  const prevRowModesModel = react.exports.useRef({});
	  const focusTimeout = react.exports.useRef(null);
	  const nextFocusedCell = react.exports.useRef(null);
	  const {
	    processRowUpdate,
	    onProcessRowUpdateError,
	    rowModesModel: rowModesModelProp,
	    onRowModesModelChange,
	    signature
	  } = props;

	  const runIfEditModeIsRow = callback => (...args) => {
	    if (props.editMode === GridEditModes.Row) {
	      callback(...args);
	    }
	  };

	  const throwIfNotEditable = react.exports.useCallback((id, field) => {
	    const params = apiRef.current.getCellParams(id, field);

	    if (!apiRef.current.isCellEditable(params)) {
	      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);
	    }
	  }, [apiRef]);
	  const throwIfNotInMode = react.exports.useCallback((id, mode) => {
	    if (apiRef.current.getRowMode(id) !== mode) {
	      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);
	    }
	  }, [apiRef]);
	  const handleCellDoubleClick = react.exports.useCallback((params, event) => {
	    if (!params.isEditable) {
	      return;
	    }

	    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {
	      return;
	    }

	    const rowParams = apiRef.current.getRowParams(params.id);

	    const newParams = _extends({}, rowParams, {
	      field: params.field,
	      reason: GridRowEditStartReasons.cellDoubleClick
	    });

	    apiRef.current.publishEvent('rowEditStart', newParams, event);
	  }, [apiRef]);
	  const handleCellFocusIn = react.exports.useCallback(params => {
	    nextFocusedCell.current = params;
	  }, []);
	  const handleCellFocusOut = react.exports.useCallback((params, event) => {
	    if (!params.isEditable) {
	      return;
	    }

	    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {
	      return;
	    } // The mechanism to detect if we can stop editing a row is different from
	    // the cell editing. Instead of triggering it when clicking outside a cell,
	    // we must check if another cell in the same row was not clicked. To achieve
	    // that, first we keep track of all cells that gained focus. When a cell loses
	    // focus we check if the next cell that received focus is from a different row.


	    nextFocusedCell.current = null;
	    focusTimeout.current = setTimeout(() => {
	      var _nextFocusedCell$curr;

	      focusTimeout.current = null;

	      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {
	        // The row might have been deleted during the click
	        if (!apiRef.current.getRow(params.id)) {
	          return;
	        } // The row may already changed its mode


	        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {
	          return;
	        }

	        const rowParams = apiRef.current.getRowParams(params.id);

	        const newParams = _extends({}, rowParams, {
	          field: params.field,
	          reason: GridRowEditStopReasons.rowFocusOut
	        });

	        apiRef.current.publishEvent('rowEditStop', newParams, event);
	      }
	    });
	  }, [apiRef]);
	  react.exports.useEffect(() => {
	    return () => {
	      clearTimeout(focusTimeout.current);
	    };
	  }, []);
	  const handleCellKeyDown = react.exports.useCallback((params, event) => {
	    if (params.cellMode === GridRowModes.Edit) {
	      // Wait until IME is settled for Asian languages like Japanese and Chinese
	      // TODO: `event.which` is depricated but this is a temporary workaround
	      if (event.which === 229) {
	        return;
	      }

	      let reason;

	      if (event.key === 'Escape') {
	        reason = GridRowEditStopReasons.escapeKeyDown;
	      } else if (event.key === 'Enter') {
	        reason = GridRowEditStopReasons.enterKeyDown;
	      } else if (event.key === 'Tab') {
	        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));

	        if (event.shiftKey) {
	          if (params.field === columnFields[0]) {
	            // Exit if user pressed Shift+Tab on the first field
	            reason = GridRowEditStopReasons.shiftTabKeyDown;
	          }
	        } else if (params.field === columnFields[columnFields.length - 1]) {
	          // Exit if user pressed Tab on the last field
	          reason = GridRowEditStopReasons.tabKeyDown;
	        }

	        if (reason) {
	          event.preventDefault(); // Prevent going to the next element in the tab sequence
	        }
	      }

	      if (reason) {
	        const rowParams = apiRef.current.getRowParams(params.id);

	        const newParams = _extends({}, rowParams, {
	          reason,
	          field: params.field
	        });

	        apiRef.current.publishEvent('rowEditStop', newParams, event);
	      }
	    } else if (params.isEditable) {
	      let reason;

	      if (event.key === ' ' && event.shiftKey) {
	        return; // Shift + Space is used to select the row
	      }

	      if (isPrintableKey(event)) {
	        reason = GridRowEditStartReasons.printableKeyDown;
	      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {
	        reason = GridRowEditStartReasons.printableKeyDown;
	      } else if (event.key === 'Enter') {
	        reason = GridRowEditStartReasons.enterKeyDown;
	      } else if (event.key === 'Delete' || event.key === 'Backspace') {
	        // Delete on Windows, Backspace on macOS
	        reason = GridRowEditStartReasons.deleteKeyDown;
	      }

	      if (reason) {
	        const rowParams = apiRef.current.getRowParams(params.id);

	        const newParams = _extends({}, rowParams, {
	          field: params.field,
	          key: event.key,
	          reason
	        });

	        apiRef.current.publishEvent('rowEditStart', newParams, event);
	      }
	    }
	  }, [apiRef]);
	  const handleRowEditStart = react.exports.useCallback(params => {
	    const {
	      id,
	      field,
	      reason,
	      key
	    } = params;
	    const startRowEditModeParams = {
	      id,
	      fieldToFocus: field
	    };

	    if (reason === GridRowEditStartReasons.printableKeyDown) {
	      if (react.exports.version.startsWith('18')) {
	        startRowEditModeParams.initialValue = key; // In React 17, cleaning the input is enough
	      } else {
	        startRowEditModeParams.deleteValue = !!field;
	      }
	    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {
	      startRowEditModeParams.deleteValue = !!field;
	    }

	    apiRef.current.startRowEditMode(startRowEditModeParams);
	  }, [apiRef]);
	  const handleRowEditStop = react.exports.useCallback(params => {
	    const {
	      id,
	      reason,
	      field
	    } = params;
	    apiRef.current.unstable_runPendingEditCellValueMutation(id);
	    let cellToFocusAfter;

	    if (reason === GridRowEditStopReasons.enterKeyDown) {
	      cellToFocusAfter = 'below';
	    } else if (reason === GridRowEditStopReasons.tabKeyDown) {
	      cellToFocusAfter = 'right';
	    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {
	      cellToFocusAfter = 'left';
	    }

	    let ignoreModifications = reason === 'escapeKeyDown';
	    const editingState = gridEditRowsStateSelector(apiRef.current.state);

	    if (!ignoreModifications && !props.disableIgnoreModificationsIfProcessingProps) {
	      // The user wants to stop editing the cell but we can't wait for the props to be processed.
	      // In this case, discard the modifications if any field is processing its props.
	      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {
	        return fieldProps.isProcessingProps;
	      });
	    }

	    apiRef.current.stopRowEditMode({
	      id,
	      ignoreModifications,
	      field,
	      cellToFocusAfter
	    });
	  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);
	  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));
	  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));
	  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));
	  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));
	  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));
	  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));
	  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);
	  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);
	  const getRowMode = react.exports.useCallback(id => {
	    if (props.editMode === GridEditModes.Cell) {
	      return GridRowModes.View;
	    }

	    const editingState = gridEditRowsStateSelector(apiRef.current.state);
	    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;
	    return isEditing ? GridRowModes.Edit : GridRowModes.View;
	  }, [apiRef, props.editMode]);
	  const updateRowModesModel = useEventCallback(newModel => {
	    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;

	    if (onRowModesModelChange && isNewModelDifferentFromProp) {
	      const details = signature === GridSignature.DataGridPro ? {
	        api: apiRef.current
	      } : {};
	      onRowModesModelChange(newModel, details);
	    }

	    if (props.rowModesModel && isNewModelDifferentFromProp) {
	      return; // The prop always win
	    }

	    setRowModesModel(newModel);
	    rowModesModelRef.current = newModel;
	    apiRef.current.publishEvent('rowModesModelChange', newModel);
	  });
	  const updateRowInRowModesModel = react.exports.useCallback((id, newProps) => {
	    const newModel = _extends({}, rowModesModelRef.current);

	    if (newProps !== null) {
	      newModel[id] = _extends({}, newProps);
	    } else {
	      delete newModel[id];
	    }

	    updateRowModesModel(newModel);
	  }, [updateRowModesModel]);
	  const updateOrDeleteRowState = react.exports.useCallback((id, newProps) => {
	    apiRef.current.setState(state => {
	      const newEditingState = _extends({}, state.editRows);

	      if (newProps !== null) {
	        newEditingState[id] = newProps;
	      } else {
	        delete newEditingState[id];
	      }

	      return _extends({}, state, {
	        editRows: newEditingState
	      });
	    });
	    apiRef.current.forceUpdate();
	  }, [apiRef]);
	  const updateOrDeleteFieldState = react.exports.useCallback((id, field, newProps) => {
	    apiRef.current.setState(state => {
	      const newEditingState = _extends({}, state.editRows);

	      if (newProps !== null) {
	        newEditingState[id] = _extends({}, newEditingState[id], {
	          [field]: _extends({}, newProps)
	        });
	      } else {
	        delete newEditingState[id][field];

	        if (Object.keys(newEditingState[id]).length === 0) {
	          delete newEditingState[id];
	        }
	      }

	      return _extends({}, state, {
	        editRows: newEditingState
	      });
	    });
	    apiRef.current.forceUpdate();
	  }, [apiRef]);
	  const startRowEditMode = react.exports.useCallback(params => {
	    const {
	      id
	    } = params,
	          other = _objectWithoutPropertiesLoose(params, _excluded$a);

	    throwIfNotInMode(id, GridRowModes.View);
	    updateRowInRowModesModel(id, _extends({
	      mode: GridRowModes.Edit
	    }, other));
	  }, [throwIfNotInMode, updateRowInRowModesModel]);
	  const updateStateToStartRowEditMode = useEventCallback(params => {
	    const {
	      id,
	      fieldToFocus,
	      deleteValue,
	      initialValue
	    } = params;
	    const columnFields = gridColumnFieldsSelector(apiRef);
	    const newProps = columnFields.reduce((acc, field) => {
	      const cellParams = apiRef.current.getCellParams(id, field);

	      if (!cellParams.isEditable) {
	        return acc;
	      }

	      let newValue = apiRef.current.getCellValue(id, field);

	      if (fieldToFocus === field && (deleteValue || initialValue)) {
	        newValue = deleteValue ? '' : initialValue;
	      }

	      acc[field] = {
	        value: newValue,
	        error: false,
	        isProcessingProps: false
	      };
	      return acc;
	    }, {});
	    updateOrDeleteRowState(id, newProps);

	    if (fieldToFocus) {
	      apiRef.current.setCellFocus(id, fieldToFocus);
	    }
	  });
	  const stopRowEditMode = react.exports.useCallback(params => {
	    const {
	      id
	    } = params,
	          other = _objectWithoutPropertiesLoose(params, _excluded2);

	    throwIfNotInMode(id, GridRowModes.Edit);
	    updateRowInRowModesModel(id, _extends({
	      mode: GridRowModes.View
	    }, other));
	  }, [throwIfNotInMode, updateRowInRowModesModel]);
	  const updateStateToStopRowEditMode = useEventCallback(params => {
	    const {
	      id,
	      ignoreModifications,
	      field: focusedField,
	      cellToFocusAfter = 'none'
	    } = params;
	    apiRef.current.unstable_runPendingEditCellValueMutation(id);

	    const finishRowEditMode = () => {
	      if (cellToFocusAfter !== 'none' && focusedField) {
	        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);
	      }

	      updateOrDeleteRowState(id, null);
	      updateRowInRowModesModel(id, null);
	    };

	    if (ignoreModifications) {
	      finishRowEditMode();
	      return;
	    }

	    const editingState = gridEditRowsStateSelector(apiRef.current.state);
	    const row = apiRef.current.getRow(id);
	    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);

	    if (isSomeFieldProcessingProps) {
	      prevRowModesModel.current[id].mode = GridRowModes.Edit;
	      return;
	    }

	    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);

	    if (hasSomeFieldWithError) {
	      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to "edit"

	      updateRowInRowModesModel(id, {
	        mode: GridRowModes.Edit
	      });
	      return;
	    }

	    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);

	    if (processRowUpdate) {
	      const handleError = errorThrown => {
	        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to "edit"

	        updateRowInRowModesModel(id, {
	          mode: GridRowModes.Edit
	        });

	        if (onProcessRowUpdateError) {
	          onProcessRowUpdateError(errorThrown);
	        } else {
	          missingOnProcessRowUpdateErrorWarning();
	        }
	      };

	      try {
	        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {
	          apiRef.current.updateRows([finalRowUpdate]);
	          finishRowEditMode();
	        }).catch(handleError);
	      } catch (errorThrown) {
	        handleError(errorThrown);
	      }
	    } else {
	      apiRef.current.updateRows([rowUpdate]);
	      finishRowEditMode();
	    }
	  });
	  const setRowEditingEditCellValue = react.exports.useCallback(params => {
	    const {
	      id,
	      field,
	      value,
	      debounceMs,
	      unstable_skipValueParser: skipValueParser
	    } = params;
	    throwIfNotEditable(id, field);
	    const column = apiRef.current.getColumn(field);
	    const row = apiRef.current.getRow(id);
	    let parsedValue = value;

	    if (column.valueParser && !skipValueParser) {
	      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));
	    }

	    let editingState = gridEditRowsStateSelector(apiRef.current.state);

	    let newProps = _extends({}, editingState[id][field], {
	      value: parsedValue,
	      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'
	    });

	    if (!column.preProcessEditCellProps) {
	      updateOrDeleteFieldState(id, field, newProps);
	    }

	    return new Promise(resolve => {
	      const promises = [];

	      if (column.preProcessEditCellProps) {
	        const hasChanged = newProps.value !== editingState[id][field].value;
	        newProps = _extends({}, newProps, {
	          isProcessingProps: true
	        });
	        updateOrDeleteFieldState(id, field, newProps);

	        const _editingState$id = editingState[id],
	              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));

	        const promise = Promise.resolve(column.preProcessEditCellProps({
	          id,
	          row,
	          props: newProps,
	          hasChanged,
	          otherFieldsProps
	        })).then(processedProps => {
	          // Check again if the row is in edit mode because the user may have
	          // discarded the changes while the props were being processed.
	          if (apiRef.current.getRowMode(id) === GridRowModes.View) {
	            resolve(false);
	            return;
	          }

	          editingState = gridEditRowsStateSelector(apiRef.current.state);
	          processedProps = _extends({}, processedProps, {
	            isProcessingProps: false
	          }); // We don't reuse the value from the props pre-processing because when the
	          // promise resolves it may be already outdated. The only exception to this rule
	          // is when there's no pre-processing.

	          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
	          updateOrDeleteFieldState(id, field, processedProps);
	        });
	        promises.push(promise);
	      }

	      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {
	        if (thisField === field) {
	          return;
	        }

	        const fieldColumn = apiRef.current.getColumn(thisField);

	        if (!fieldColumn.preProcessEditCellProps) {
	          return;
	        }

	        fieldProps = _extends({}, fieldProps, {
	          isProcessingProps: true
	        });
	        updateOrDeleteFieldState(id, thisField, fieldProps);
	        editingState = gridEditRowsStateSelector(apiRef.current.state);

	        const _editingState$id2 = editingState[id],
	              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));

	        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({
	          id,
	          row,
	          props: fieldProps,
	          hasChanged: false,
	          otherFieldsProps
	        })).then(processedProps => {
	          // Check again if the row is in edit mode because the user may have
	          // discarded the changes while the props were being processed.
	          if (apiRef.current.getRowMode(id) === GridRowModes.View) {
	            resolve(false);
	            return;
	          }

	          processedProps = _extends({}, processedProps, {
	            isProcessingProps: false
	          });
	          updateOrDeleteFieldState(id, thisField, processedProps);
	        });
	        promises.push(promise);
	      });
	      Promise.all(promises).then(() => {
	        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {
	          editingState = gridEditRowsStateSelector(apiRef.current.state);
	          resolve(!editingState[id][field].error);
	        } else {
	          resolve(false);
	        }
	      });
	    });
	  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);
	  const getRowWithUpdatedValuesFromRowEditing = react.exports.useCallback(id => {
	    const editingState = gridEditRowsStateSelector(apiRef.current.state);
	    const row = apiRef.current.getRow(id);

	    let rowUpdate = _extends({}, row);

	    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {
	      const column = apiRef.current.getColumn(field);

	      if (column.valueSetter) {
	        rowUpdate = column.valueSetter({
	          value: fieldProps.value,
	          row: rowUpdate
	        });
	      } else {
	        rowUpdate[field] = fieldProps.value;
	      }
	    });
	    return rowUpdate;
	  }, [apiRef]);
	  const editingApi = {
	    getRowMode,
	    startRowEditMode,
	    stopRowEditMode,
	    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,
	    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing
	  };
	  useGridApiMethod(apiRef, editingApi);
	  react.exports.useEffect(() => {
	    if (rowModesModelProp) {
	      updateRowModesModel(rowModesModelProp);
	    }
	  }, [rowModesModelProp, updateRowModesModel]);
	  react.exports.useEffect(() => {
	    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later

	    const copyOfPrevRowModesModel = prevRowModesModel.current;
	    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later

	    Object.entries(rowModesModel).forEach(([id, params]) => {
	      var _copyOfPrevRowModesMo, _idToIdLookup$id;

	      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;
	      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;

	      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {
	        updateStateToStartRowEditMode(_extends({
	          id: originalId
	        }, params));
	      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {
	        updateStateToStopRowEditMode(_extends({
	          id: originalId
	        }, params));
	      }
	    });
	  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);
	};

	const editingStateInitializer = state => _extends({}, state, {
	  editRows: {}
	});
	const useGridEditing = (apiRef, props) => {
	  useGridCellEditing(apiRef, props);
	  useGridRowEditing(apiRef, props);
	  const debounceMap = react.exports.useRef({});
	  const {
	    isCellEditable: isCellEditableProp
	  } = props;
	  const isCellEditable = react.exports.useCallback(params => {
	    if (params.rowNode.isAutoGenerated) {
	      return false;
	    }

	    if (!params.colDef.editable) {
	      return false;
	    }

	    if (!params.colDef.renderEditCell) {
	      return false;
	    }

	    if (isCellEditableProp) {
	      return isCellEditableProp(params);
	    }

	    if (params.rowNode.isPinned) {
	      return false;
	    }

	    return true;
	  }, [isCellEditableProp]);

	  const maybeDebounce = (id, field, debounceMs, callback) => {
	    if (!debounceMs) {
	      callback();
	      return;
	    }

	    if (!debounceMap.current[id]) {
	      debounceMap.current[id] = {};
	    }

	    if (debounceMap.current[id][field]) {
	      const [timeout] = debounceMap.current[id][field];
	      clearTimeout(timeout);
	    } // To run the callback immediatelly without waiting the timeout


	    const runImmediately = () => {
	      const [timeout] = debounceMap.current[id][field];
	      clearTimeout(timeout);
	      callback();
	      delete debounceMap.current[id][field];
	    };

	    const timeout = setTimeout(() => {
	      callback();
	      delete debounceMap.current[id][field];
	    }, debounceMs);
	    debounceMap.current[id][field] = [timeout, runImmediately];
	  };

	  react.exports.useEffect(() => {
	    const debounces = debounceMap.current;
	    return () => {
	      Object.entries(debounces).forEach(([id, fields]) => {
	        Object.keys(fields).forEach(field => {
	          const [timeout] = debounces[id][field];
	          clearTimeout(timeout);
	          delete debounces[id][field];
	        });
	      });
	    };
	  }, []);
	  const runPendingEditCellValueMutation = react.exports.useCallback((id, field) => {
	    if (!debounceMap.current[id]) {
	      return;
	    }

	    if (!field) {
	      Object.keys(debounceMap.current[id]).forEach(debouncedField => {
	        const [, runCallback] = debounceMap.current[id][debouncedField];
	        runCallback();
	      });
	    } else if (debounceMap.current[id][field]) {
	      const [, runCallback] = debounceMap.current[id][field];
	      runCallback();
	    }
	  }, []);
	  const setEditCellValue = react.exports.useCallback(params => {
	    const {
	      id,
	      field,
	      debounceMs
	    } = params;
	    return new Promise(resolve => {
	      maybeDebounce(id, field, debounceMs, async () => {
	        const setEditCellValueToCall = props.editMode === GridEditModes.Row ? apiRef.current.unstable_setRowEditingEditCellValue : apiRef.current.unstable_setCellEditingEditCellValue; // Check if the cell is in edit mode
	        // By the time this callback runs the user may have cancelled the editing

	        if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {
	          const result = await setEditCellValueToCall(params);
	          resolve(result);
	        }
	      });
	    });
	  }, [apiRef, props.editMode]);
	  const getRowWithUpdatedValues = react.exports.useCallback((id, field) => {
	    return props.editMode === GridEditModes.Cell ? apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field) : apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);
	  }, [apiRef, props.editMode]);
	  const getEditCellMeta = react.exports.useCallback((id, field) => {
	    const editingState = gridEditRowsStateSelector(apiRef.current.state);
	    return {
	      changeReason: editingState[id][field].changeReason
	    };
	  }, [apiRef]);
	  const editingSharedApi = {
	    isCellEditable,
	    setEditCellValue,
	    unstable_runPendingEditCellValueMutation: runPendingEditCellValueMutation,
	    unstable_getRowWithUpdatedValues: getRowWithUpdatedValues,
	    unstable_getEditCellMeta: getEditCellMeta
	  };
	  useGridApiMethod(apiRef, editingSharedApi);
	};

	const rowsStateInitializer = (state, props, apiRef) => {
	  apiRef.current.unstable_caches.rows = createRowsInternalCache({
	    rows: props.rows,
	    getRowId: props.getRowId,
	    loading: props.loading,
	    rowCount: props.rowCount
	  });
	  return _extends({}, state, {
	    rows: getRowsStateFromCache({
	      apiRef,
	      previousTree: null,
	      rowCountProp: props.rowCount,
	      loadingProp: props.loading
	    })
	  });
	};
	const useGridRows = (apiRef, props) => {

	  const logger = useGridLogger(apiRef, 'useGridRows');
	  const currentPage = useGridVisibleRows(apiRef, props);
	  const lastUpdateMs = react.exports.useRef(Date.now());
	  const timeout = react.exports.useRef(null);
	  const getRow = react.exports.useCallback(id => {
	    var _ref;

	    return (_ref = gridRowsLookupSelector(apiRef)[id]) != null ? _ref : null;
	  }, [apiRef]);
	  const lookup = react.exports.useMemo(() => currentPage.rows.reduce((acc, {
	    id
	  }, index) => {
	    acc[id] = index;
	    return acc;
	  }, {}), [currentPage.rows]);
	  const throttledRowsChange = react.exports.useCallback((newCache, throttle) => {
	    const run = () => {
	      timeout.current = null;
	      lastUpdateMs.current = Date.now();
	      apiRef.current.setState(state => _extends({}, state, {
	        rows: getRowsStateFromCache({
	          apiRef,
	          previousTree: gridRowTreeSelector(apiRef),
	          rowCountProp: props.rowCount,
	          loadingProp: props.loading
	        })
	      }));
	      apiRef.current.publishEvent('rowsSet');
	      apiRef.current.forceUpdate();
	    };

	    if (timeout.current) {
	      clearTimeout(timeout.current);
	      timeout.current = null;
	    }

	    apiRef.current.unstable_caches.rows = newCache;

	    if (!throttle) {
	      run();
	      return;
	    }

	    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);

	    if (throttleRemainingTimeMs > 0) {
	      timeout.current = setTimeout(run, throttleRemainingTimeMs);
	      return;
	    }

	    run();
	  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);
	  /**
	   * API METHODS
	   */

	  const setRows = react.exports.useCallback(rows => {
	    logger.debug(`Updating all rows, new length ${rows.length}`);
	    const cache = createRowsInternalCache({
	      rows,
	      getRowId: props.getRowId,
	      loading: props.loading,
	      rowCount: props.rowCount
	    });
	    const prevCache = apiRef.current.unstable_caches.rows;
	    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;
	    throttledRowsChange(cache, true);
	  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);
	  const updateRows = react.exports.useCallback(updates => {
	    if (props.signature === GridSignature.DataGrid && updates.length > 1) {
	      // TODO: Add test with direct call to `apiRef.current.updateRows` in DataGrid after enabling the `apiRef` on the free plan.
	      throw new Error(["MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\n'));
	    } // we remove duplicate updates. A server can batch updates, and send several updates for the same row in one fn call.


	    const uniqueUpdates = new Map();
	    updates.forEach(update => {
	      const id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');

	      if (uniqueUpdates.has(id)) {
	        uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));
	      } else {
	        uniqueUpdates.set(id, update);
	      }
	    });
	    const deletedRowIds = [];
	    const prevCache = apiRef.current.unstable_caches.rows;
	    const newCache = {
	      rowsBeforePartialUpdates: prevCache.rowsBeforePartialUpdates,
	      loadingPropBeforePartialUpdates: prevCache.loadingPropBeforePartialUpdates,
	      rowCountPropBeforePartialUpdates: prevCache.rowCountPropBeforePartialUpdates,
	      idRowsLookup: _extends({}, prevCache.idRowsLookup),
	      idToIdLookup: _extends({}, prevCache.idToIdLookup),
	      ids: [...prevCache.ids]
	    };
	    uniqueUpdates.forEach((partialRow, id) => {
	      // eslint-disable-next-line no-underscore-dangle
	      if (partialRow._action === 'delete') {
	        delete newCache.idRowsLookup[id];
	        delete newCache.idToIdLookup[id];
	        deletedRowIds.push(id);
	        return;
	      }

	      const oldRow = apiRef.current.getRow(id);

	      if (!oldRow) {
	        newCache.idRowsLookup[id] = partialRow;
	        newCache.idToIdLookup[id] = id;
	        newCache.ids.push(id);
	        return;
	      }

	      newCache.idRowsLookup[id] = _extends({}, apiRef.current.getRow(id), partialRow);
	    });

	    if (deletedRowIds.length > 0) {
	      newCache.ids = newCache.ids.filter(id => !deletedRowIds.includes(id));
	    }

	    throttledRowsChange(newCache, true);
	  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);
	  const getRowModels = react.exports.useCallback(() => {
	    const allRows = gridRowIdsSelector(apiRef);
	    const idRowsLookup = gridRowsLookupSelector(apiRef);
	    return new Map(allRows.map(id => [id, idRowsLookup[id]]));
	  }, [apiRef]);
	  const getRowsCount = react.exports.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);
	  const getAllRowIds = react.exports.useCallback(() => gridRowIdsSelector(apiRef), [apiRef]);
	  const getRowIndexRelativeToVisibleRows = react.exports.useCallback(id => lookup[id], [lookup]);
	  const setRowChildrenExpansion = react.exports.useCallback((id, isExpanded) => {
	    const currentNode = apiRef.current.getRowNode(id);

	    if (!currentNode) {
	      throw new Error(`MUI: No row with id #${id} found`);
	    }

	    const newNode = _extends({}, currentNode, {
	      childrenExpanded: isExpanded
	    });

	    apiRef.current.setState(state => {
	      return _extends({}, state, {
	        rows: _extends({}, state.rows, {
	          tree: _extends({}, state.rows.tree, {
	            [id]: newNode
	          })
	        })
	      });
	    });
	    apiRef.current.forceUpdate();
	    apiRef.current.publishEvent('rowExpansionChange', newNode);
	  }, [apiRef]);
	  const getRowNode = react.exports.useCallback(id => {
	    var _gridRowTreeSelector$;

	    return (_gridRowTreeSelector$ = gridRowTreeSelector(apiRef)[id]) != null ? _gridRowTreeSelector$ : null;
	  }, [apiRef]);
	  const getRowGroupChildren = react.exports.useCallback(({
	    skipAutoGeneratedRows = true,
	    groupId,
	    applySorting,
	    applyFiltering
	  }) => {
	    const tree = gridRowTreeSelector(apiRef);
	    let children;

	    if (applySorting) {
	      const groupNode = tree[groupId];

	      if (!groupNode) {
	        return [];
	      }

	      const sortedRowIds = gridSortedRowIdsSelector(apiRef);
	      children = [];
	      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;

	      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {
	        const id = sortedRowIds[index];
	        const node = tree[id];

	        if (!skipAutoGeneratedRows || !node.isAutoGenerated) {
	          children.push(id);
	        }
	      }
	    } else {
	      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);
	    }

	    if (applyFiltering) {
	      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);
	      children = children.filter(childId => filteredRowsLookup[childId] !== false);
	    }

	    return children;
	  }, [apiRef]);
	  const setRowIndex = react.exports.useCallback((rowId, targetIndex) => {
	    const allRows = gridRowIdsSelector(apiRef);
	    const oldIndex = allRows.findIndex(row => row === rowId);

	    if (oldIndex === -1 || oldIndex === targetIndex) {
	      return;
	    }

	    logger.debug(`Moving row ${rowId} to index ${targetIndex}`);
	    const updatedRows = [...allRows];
	    updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);
	    apiRef.current.setState(state => _extends({}, state, {
	      rows: _extends({}, state.rows, {
	        ids: updatedRows
	      })
	    }));
	    apiRef.current.unstable_caches.rows.ids = updatedRows;
	    apiRef.current.publishEvent('rowsSet');
	  }, [apiRef, logger]);
	  const replaceRows = react.exports.useCallback((firstRowToRender, newRows) => {
	    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {
	      throw new Error(["MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.", 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\n'));
	    }

	    if (newRows.length === 0) {
	      return;
	    }

	    const allRows = gridRowIdsSelector(apiRef);
	    const updatedRows = [...allRows];
	    const idRowsLookup = gridRowsLookupSelector(apiRef);
	    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef);
	    const tree = gridRowTreeSelector(apiRef);

	    const updatedIdRowsLookup = _extends({}, idRowsLookup);

	    const updatedIdToIdLookup = _extends({}, idToIdLookup);

	    const updatedTree = _extends({}, tree);

	    const newRowEntries = newRows.map(newRowModel => {
	      const rowId = getRowIdFromRowModel(newRowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');
	      return {
	        id: rowId,
	        model: newRowModel
	      };
	    });
	    newRowEntries.forEach((row, index) => {
	      const [replacedRowId] = updatedRows.splice(firstRowToRender + index, 1, row.id);
	      delete updatedIdRowsLookup[replacedRowId];
	      delete updatedIdToIdLookup[replacedRowId];
	      delete updatedTree[replacedRowId];
	    });
	    newRowEntries.forEach(row => {
	      const rowTreeNodeConfig = {
	        id: row.id,
	        parent: null,
	        depth: 0,
	        groupingKey: null,
	        groupingField: null
	      };
	      updatedIdRowsLookup[row.id] = row.model;
	      updatedIdToIdLookup[row.id] = row.id;
	      updatedTree[row.id] = rowTreeNodeConfig;
	    });
	    apiRef.current.unstable_caches.rows.idRowsLookup = updatedIdRowsLookup;
	    apiRef.current.unstable_caches.rows.idToIdLookup = updatedIdToIdLookup;
	    apiRef.current.unstable_caches.rows.ids = updatedRows;
	    apiRef.current.setState(state => _extends({}, state, {
	      rows: _extends({}, state.rows, {
	        idRowsLookup: updatedIdRowsLookup,
	        idToIdLookup: updatedIdToIdLookup,
	        tree: updatedTree,
	        ids: updatedRows
	      })
	    }));
	    apiRef.current.publishEvent('rowsSet');
	  }, [apiRef, props.signature, props.getRowId]);
	  const rowApi = {
	    getRow,
	    getRowModels,
	    getRowsCount,
	    getAllRowIds,
	    setRows,
	    setRowIndex,
	    updateRows,
	    setRowChildrenExpansion,
	    getRowNode,
	    getRowIndexRelativeToVisibleRows,
	    getRowGroupChildren,
	    unstable_replaceRows: replaceRows
	  };
	  /**
	   * EVENTS
	   */

	  const groupRows = react.exports.useCallback(() => {
	    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);
	    let cache;

	    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows) {
	      // The `props.rows` did not change since the last row grouping
	      // We can use the current rows cache which contains the partial updates done recently.
	      cache = apiRef.current.unstable_caches.rows;
	    } else {
	      // The `props.rows` has changed since the last row grouping
	      // We must use the new `props.rows` on the new grouping
	      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render
	      cache = createRowsInternalCache({
	        rows: props.rows,
	        getRowId: props.getRowId,
	        loading: props.loading,
	        rowCount: props.rowCount
	      });
	    }

	    throttledRowsChange(cache, false);
	  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);
	  const handleStrategyProcessorChange = react.exports.useCallback(methodName => {
	    if (methodName === 'rowTreeCreation') {
	      groupRows();
	    }
	  }, [groupRows]);
	  const handleStrategyActivityChange = react.exports.useCallback(() => {
	    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.
	    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.
	    if (apiRef.current.unstable_getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {
	      groupRows();
	    }
	  }, [apiRef, groupRows]);
	  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);
	  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);
	  /**
	   * APPLIERS
	   */

	  const applyHydrateRowsProcessor = react.exports.useCallback(() => {
	    apiRef.current.setState(state => _extends({}, state, {
	      rows: _extends({}, state.rows, apiRef.current.unstable_applyPipeProcessors('hydrateRows', state.rows.groupingResponseBeforeRowHydration))
	    }));
	    apiRef.current.publishEvent('rowsSet');
	    apiRef.current.forceUpdate();
	  }, [apiRef]);
	  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);
	  useGridApiMethod(apiRef, rowApi);
	  /**
	   * EFFECTS
	   */

	  react.exports.useEffect(() => {
	    return () => {
	      if (timeout.current !== null) {
	        clearTimeout(timeout.current);
	      }
	    };
	  }, []); // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`
	  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one

	  const isFirstRender = react.exports.useRef(true);
	  react.exports.useEffect(() => {
	    if (isFirstRender.current) {
	      isFirstRender.current = false;
	      return;
	    }

	    const areNewRowsAlreadyInState = apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows;
	    const isNewLoadingAlreadyInState = apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates === props.loading;
	    const isNewRowCountAlreadyInState = apiRef.current.unstable_caches.rows.rowCountPropBeforePartialUpdates === props.rowCount; // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)

	    if (areNewRowsAlreadyInState) {
	      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`
	      if (!isNewLoadingAlreadyInState) {
	        apiRef.current.setState(state => _extends({}, state, {
	          rows: _extends({}, state.rows, {
	            loading: props.loading
	          })
	        }));
	        apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates = props.loading;
	        apiRef.current.forceUpdate();
	      }

	      if (!isNewRowCountAlreadyInState) {
	        apiRef.current.setState(state => _extends({}, state, {
	          rows: _extends({}, state.rows, {
	            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),
	            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)
	          })
	        }));
	        apiRef.current.unstable_caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;
	        apiRef.current.forceUpdate();
	      }

	      return;
	    }

	    logger.debug(`Updating all rows, new length ${props.rows.length}`);
	    throttledRowsChange(createRowsInternalCache({
	      rows: props.rows,
	      getRowId: props.getRowId,
	      loading: props.loading,
	      rowCount: props.rowCount
	    }), false);
	  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);
	};

	const flatRowTreeCreationMethod = ({
	  ids,
	  idRowsLookup,
	  idToIdLookup,
	  previousTree
	}) => {
	  const tree = {};

	  for (let i = 0; i < ids.length; i += 1) {
	    const rowId = ids[i];

	    if (previousTree && previousTree[rowId] && previousTree[rowId].depth === 0 && previousTree[rowId].parent == null && // pinned row can be unpinned
	    !previousTree[rowId].isPinned) {
	      tree[rowId] = previousTree[rowId];
	    } else {
	      tree[rowId] = {
	        id: rowId,
	        depth: 0,
	        parent: null,
	        groupingKey: '',
	        groupingField: null
	      };
	    }
	  }

	  return {
	    groupingName: GRID_DEFAULT_STRATEGY,
	    tree,
	    treeDepth: 1,
	    idRowsLookup,
	    idToIdLookup,
	    ids
	  };
	};

	const useGridRowsPreProcessors = apiRef => {
	  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);
	};

	buildWarning([`MUI: You are calling getValue. This method is deprecated and will be removed in the next major version.`, 'Instead, you can access the data from `params.row`.']);
	/**
	 * @requires useGridColumns (method)
	 * @requires useGridRows (method)
	 * @requires useGridFocus (state)
	 * @requires useGridEditing (method)
	 * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi
	 * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi
	 */

	function useGridParamsApi(apiRef) {
	  const getColumnHeaderParams = react.exports.useCallback(field => ({
	    field,
	    colDef: apiRef.current.getColumn(field)
	  }), [apiRef]);
	  /**
	   * We want to remove the `getValue` param from `getRowParams`, `getCellParams` and `getBaseCellParams`
	   */

	  const getCellValueWithDeprecationWarning = react.exports.useCallback((...args) => {

	    return apiRef.current.getCellValue(...args);
	  }, [apiRef]);
	  const getRowParams = react.exports.useCallback(id => {
	    const row = apiRef.current.getRow(id);

	    if (!row) {
	      throw new Error(`No row with id #${id} found`);
	    }

	    const params = {
	      id,
	      columns: apiRef.current.getAllColumns(),
	      row,
	      // TODO v6: remove
	      getValue: getCellValueWithDeprecationWarning
	    };
	    return params;
	  }, [apiRef, getCellValueWithDeprecationWarning]);
	  const getBaseCellParams = react.exports.useCallback((id, field) => {
	    const row = apiRef.current.getRow(id);
	    const rowNode = apiRef.current.getRowNode(id);

	    if (!row || !rowNode) {
	      throw new Error(`No row with id #${id} found`);
	    }

	    const cellFocus = gridFocusCellSelector(apiRef);
	    const cellTabIndex = gridTabIndexCellSelector(apiRef);
	    const params = {
	      id,
	      field,
	      row,
	      rowNode,
	      value: row[field],
	      colDef: apiRef.current.getColumn(field),
	      cellMode: apiRef.current.getCellMode(id, field),
	      // TODO v6: remove
	      getValue: getCellValueWithDeprecationWarning,
	      api: apiRef.current,
	      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
	      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1
	    };
	    return params;
	  }, [apiRef, getCellValueWithDeprecationWarning]);
	  const getCellParams = react.exports.useCallback((id, field) => {
	    const colDef = apiRef.current.getColumn(field);
	    const value = apiRef.current.getCellValue(id, field);
	    const row = apiRef.current.getRow(id);
	    const rowNode = apiRef.current.getRowNode(id);

	    if (!row || !rowNode) {
	      throw new Error(`No row with id #${id} found`);
	    }

	    const cellFocus = gridFocusCellSelector(apiRef);
	    const cellTabIndex = gridTabIndexCellSelector(apiRef);
	    const params = {
	      id,
	      field,
	      row,
	      rowNode,
	      colDef,
	      cellMode: apiRef.current.getCellMode(id, field),
	      // TODO v6: remove
	      getValue: getCellValueWithDeprecationWarning,
	      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
	      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,
	      value,
	      formattedValue: value
	    };

	    if (colDef && colDef.valueFormatter) {
	      params.formattedValue = colDef.valueFormatter({
	        id,
	        field: params.field,
	        value: params.value,
	        api: apiRef.current
	      });
	    }

	    params.isEditable = colDef && apiRef.current.isCellEditable(params);
	    return params;
	  }, [apiRef, getCellValueWithDeprecationWarning]);
	  const getCellValue = react.exports.useCallback((id, field) => {
	    const colDef = apiRef.current.getColumn(field);

	    if (!colDef || !colDef.valueGetter) {
	      const rowModel = apiRef.current.getRow(id);

	      if (!rowModel) {
	        throw new Error(`No row with id #${id} found`);
	      }

	      return rowModel[field];
	    }

	    return colDef.valueGetter(getBaseCellParams(id, field));
	  }, [apiRef, getBaseCellParams]);
	  const getColumnHeaderElement = react.exports.useCallback(field => {
	    if (!apiRef.current.rootElementRef.current) {
	      return null;
	    }

	    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);
	  }, [apiRef]);
	  const getRowElement = react.exports.useCallback(id => {
	    if (!apiRef.current.rootElementRef.current) {
	      return null;
	    }

	    return getGridRowElement(apiRef.current.rootElementRef.current, id);
	  }, [apiRef]);
	  const getCellElement = react.exports.useCallback((id, field) => {
	    if (!apiRef.current.rootElementRef.current) {
	      return null;
	    }

	    return getGridCellElement(apiRef.current.rootElementRef.current, {
	      id,
	      field
	    });
	  }, [apiRef]);
	  const paramsApi = {
	    getCellValue,
	    getCellParams,
	    getCellElement,
	    getRowParams,
	    getRowElement,
	    getColumnHeaderParams,
	    getColumnHeaderElement
	  };
	  useGridApiMethod(apiRef, paramsApi);
	}

	const getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {
	  if (selectionModelProp == null) {
	    return selectionModelProp;
	  }

	  if (Array.isArray(selectionModelProp)) {
	    return selectionModelProp;
	  }

	  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {
	    return prevSelectionModel;
	  }

	  return [selectionModelProp];
	};

	const selectionStateInitializer = (state, props) => {
	  var _getSelectionModelPro;

	  return _extends({}, state, {
	    selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []
	  });
	};
	/**
	 * @requires useGridRows (state, method) - can be after
	 * @requires useGridParamsApi (method) - can be after
	 * @requires useGridFocus (state) - can be after
	 * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)
	 */

	const useGridSelection = (apiRef, props) => {
	  const logger = useGridLogger(apiRef, 'useGridSelection');
	  const propSelectionModel = react.exports.useMemo(() => {
	    return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));
	  }, [apiRef, props.selectionModel]);
	  const lastRowToggled = react.exports.useRef(null);
	  apiRef.current.unstable_registerControlState({
	    stateId: 'selection',
	    propModel: propSelectionModel,
	    propOnChange: props.onSelectionModelChange,
	    stateSelector: gridSelectionStateSelector,
	    changeEvent: 'selectionChange'
	  });
	  const {
	    checkboxSelection,
	    disableMultipleSelection,
	    disableSelectionOnClick,
	    pagination,
	    paginationMode,
	    isRowSelectable: propIsRowSelectable
	  } = props;
	  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;
	  const visibleRows = useGridVisibleRows(apiRef, props);
	  const expandMouseRowRangeSelection = react.exports.useCallback(id => {
	    var _lastRowToggled$curre;

	    let endId = id;
	    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;
	    const isSelected = apiRef.current.isRowSelected(id);

	    if (isSelected) {
	      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);
	      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);
	      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);

	      if (startIndex === endIndex) {
	        return;
	      }

	      if (startIndex > endIndex) {
	        endId = visibleRowIds[endIndex + 1];
	      } else {
	        endId = visibleRowIds[endIndex - 1];
	      }
	    }

	    lastRowToggled.current = id;
	    apiRef.current.selectRowRange({
	      startId,
	      endId
	    }, !isSelected);
	  }, [apiRef]);
	  /**
	   * API METHODS
	   */

	  const setSelectionModel = react.exports.useCallback(model => {
	    const currentModel = gridSelectionStateSelector(apiRef.current.state);

	    if (currentModel !== model) {
	      logger.debug(`Setting selection model`);
	      apiRef.current.setState(state => _extends({}, state, {
	        selection: model
	      }));
	      apiRef.current.forceUpdate();
	    }
	  }, [apiRef, logger]);
	  const isRowSelected = react.exports.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);
	  const isRowSelectable = react.exports.useCallback(id => {
	    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {
	      return false;
	    }

	    const rowNode = apiRef.current.getRowNode(id);

	    if ((rowNode == null ? void 0 : rowNode.position) === 'footer' || rowNode != null && rowNode.isPinned) {
	      return false;
	    }

	    return true;
	  }, [apiRef, propIsRowSelectable]);
	  const getSelectedRows = react.exports.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);
	  const selectRow = react.exports.useCallback((id, isSelected = true, resetSelection = false) => {
	    if (!apiRef.current.isRowSelectable(id)) {
	      return;
	    }

	    lastRowToggled.current = id;

	    if (resetSelection) {
	      logger.debug(`Setting selection for row ${id}`);
	      apiRef.current.setSelectionModel(isSelected ? [id] : []);
	    } else {
	      logger.debug(`Toggling selection for row ${id}`);
	      const selection = gridSelectionStateSelector(apiRef.current.state);
	      const newSelection = selection.filter(el => el !== id);

	      if (isSelected) {
	        newSelection.push(id);
	      }

	      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;

	      if (isSelectionValid) {
	        apiRef.current.setSelectionModel(newSelection);
	      }
	    }
	  }, [apiRef, logger, canHaveMultipleSelection]);
	  const selectRows = react.exports.useCallback((ids, isSelected = true, resetSelection = false) => {
	    logger.debug(`Setting selection for several rows`);
	    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));
	    let newSelection;

	    if (resetSelection) {
	      newSelection = isSelected ? selectableIds : [];
	    } else {
	      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project
	      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));

	      selectableIds.forEach(id => {
	        if (isSelected) {
	          selectionLookup[id] = id;
	        } else {
	          delete selectionLookup[id];
	        }
	      });
	      newSelection = Object.values(selectionLookup);
	    }

	    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;

	    if (isSelectionValid) {
	      apiRef.current.setSelectionModel(newSelection);
	    }
	  }, [apiRef, logger, canHaveMultipleSelection]);
	  const selectRowRange = react.exports.useCallback(({
	    startId,
	    endId
	  }, isSelected = true, resetSelection) => {
	    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {
	      return;
	    }

	    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages

	    const allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);
	    const startIndex = allPagesRowIds.indexOf(startId);
	    const endIndex = allPagesRowIds.indexOf(endId);
	    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];
	    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);
	    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);
	  }, [apiRef, logger]);
	  const selectionApi = {
	    selectRow,
	    selectRows,
	    selectRowRange,
	    setSelectionModel,
	    getSelectedRows,
	    isRowSelected,
	    isRowSelectable
	  };
	  useGridApiMethod(apiRef, selectionApi);
	  /**
	   * EVENTS
	   */

	  const removeOutdatedSelection = react.exports.useCallback(() => {
	    if (props.keepNonExistentRowsSelected) {
	      return;
	    }

	    const currentSelection = gridSelectionStateSelector(apiRef.current.state);
	    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project

	    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));

	    let hasChanged = false;
	    currentSelection.forEach(id => {
	      if (!rowsLookup[id]) {
	        delete selectionLookup[id];
	        hasChanged = true;
	      }
	    });

	    if (hasChanged) {
	      apiRef.current.setSelectionModel(Object.values(selectionLookup));
	    }
	  }, [apiRef, props.keepNonExistentRowsSelected]);
	  const handleSingleRowSelection = react.exports.useCallback((id, event) => {
	    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:
	    // - it is a checkboxSelection
	    // - it is a keyboard selection
	    // - Ctrl is pressed

	    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent$1(event);
	    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;
	    const isSelected = apiRef.current.isRowSelected(id);

	    if (resetSelection) {
	      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);
	    } else {
	      apiRef.current.selectRow(id, !isSelected, false);
	    }
	  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);
	  const handleCellClick = react.exports.useCallback((params, event) => {
	    if (disableSelectionOnClick) {
	      return;
	    }

	    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
	      // click on checkbox should not trigger row selection
	      return;
	    }

	    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
	      // click to open the detail panel should not select the row
	      return;
	    }

	    if (params.field) {
	      const column = apiRef.current.getColumn(params.field);

	      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {
	        return;
	      }
	    }

	    if (params.rowNode.isPinned) {
	      return;
	    }

	    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {
	      expandMouseRowRangeSelection(params.id);
	    } else {
	      handleSingleRowSelection(params.id, event);
	    }
	  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);
	  const preventSelectionOnShift = react.exports.useCallback((params, event) => {
	    if (canHaveMultipleSelection && event.shiftKey) {
	      var _window$getSelection;

	      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();
	    }
	  }, [canHaveMultipleSelection]);
	  const handleRowSelectionCheckboxChange = react.exports.useCallback((params, event) => {
	    if (event.nativeEvent.shiftKey) {
	      expandMouseRowRangeSelection(params.id);
	    } else {
	      apiRef.current.selectRow(params.id, params.value);
	    }
	  }, [apiRef, expandMouseRowRangeSelection]);
	  const handleHeaderSelectionCheckboxChange = react.exports.useCallback(params => {
	    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;
	    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);
	    apiRef.current.selectRows(rowsToBeSelected, params.value);
	  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);
	  const handleCellKeyDown = react.exports.useCallback((params, event) => {
	    // Get the most recent cell mode because it may have been changed by another listener
	    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {
	      return;
	    } // Ignore portal
	    // Do not apply shortcuts if the focus is not on the cell root component


	    if (!event.currentTarget.contains(event.target)) {
	      return;
	    }

	    if (isNavigationKey(event.key) && event.shiftKey) {
	      // The cell that has focus after the keyboard navigation
	      const focusCell = gridFocusCellSelector(apiRef);

	      if (focusCell && focusCell.id !== params.id) {
	        event.preventDefault();
	        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);

	        if (!canHaveMultipleSelection) {
	          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);
	          return;
	        }

	        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);
	        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);
	        let start;
	        let end;

	        if (newRowIndex > previousRowIndex) {
	          if (isNextRowSelected) {
	            // We are navigating to the bottom of the page and adding selected rows
	            start = previousRowIndex;
	            end = newRowIndex - 1;
	          } else {
	            // We are navigating to the bottom of the page and removing selected rows
	            start = previousRowIndex;
	            end = newRowIndex;
	          }
	        } else {
	          // eslint-disable-next-line no-lonely-if
	          if (isNextRowSelected) {
	            // We are navigating to the top of the page and removing selected rows
	            start = newRowIndex + 1;
	            end = previousRowIndex;
	          } else {
	            // We are navigating to the top of the page and adding selected rows
	            start = newRowIndex;
	            end = previousRowIndex;
	          }
	        }

	        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);
	        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);
	        return;
	      }
	    }

	    if (event.key === ' ' && event.shiftKey) {
	      event.preventDefault();
	      handleSingleRowSelection(params.id, event);
	      return;
	    }

	    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {
	      event.preventDefault();
	      selectRows(apiRef.current.getAllRowIds(), true);
	    }
	  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);
	  useGridApiEventHandler(apiRef, 'sortedRowsSet', removeOutdatedSelection);
	  useGridApiEventHandler(apiRef, 'cellClick', handleCellClick);
	  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', handleRowSelectionCheckboxChange);
	  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);
	  useGridApiEventHandler(apiRef, 'cellMouseDown', preventSelectionOnShift);
	  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);
	  /**
	   * EFFECTS
	   */

	  react.exports.useEffect(() => {
	    if (propSelectionModel !== undefined) {
	      apiRef.current.setSelectionModel(propSelectionModel);
	    }
	  }, [apiRef, propSelectionModel]);
	  const isStateControlled = propSelectionModel != null;
	  react.exports.useEffect(() => {
	    if (isStateControlled) {
	      return;
	    } // props.isRowSelectable changed


	    const currentSelection = gridSelectionStateSelector(apiRef.current.state);

	    if (isRowSelectable) {
	      const newSelection = currentSelection.filter(id => isRowSelectable(id));

	      if (newSelection.length < currentSelection.length) {
	        apiRef.current.setSelectionModel(newSelection);
	      }
	    }
	  }, [apiRef, isRowSelectable, isStateControlled]);
	  react.exports.useEffect(() => {
	    const currentSelection = gridSelectionStateSelector(apiRef.current.state);

	    if (!canHaveMultipleSelection && currentSelection.length > 1) {
	      const {
	        rows: currentPageRows
	      } = getVisibleRows(apiRef, {
	        pagination,
	        paginationMode
	      });
	      const currentPageRowsLookup = currentPageRows.reduce((acc, {
	        id
	      }) => {
	        acc[id] = true;
	        return acc;
	      }, {});
	      const firstSelectableRow = currentSelection.find(id => {
	        let isSelectable = true;

	        if (isRowSelectable) {
	          isSelectable = isRowSelectable(id);
	        }

	        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page
	      });
	      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);
	    }
	  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);
	};

	const GRID_DEFAULT_LOCALE_TEXT = {
	  // Root
	  noRowsLabel: 'No rows',
	  noResultsOverlayLabel: 'No results found.',
	  errorOverlayDefaultLabel: 'An error occurred.',
	  // Density selector toolbar button text
	  toolbarDensity: 'Density',
	  toolbarDensityLabel: 'Density',
	  toolbarDensityCompact: 'Compact',
	  toolbarDensityStandard: 'Standard',
	  toolbarDensityComfortable: 'Comfortable',
	  // Columns selector toolbar button text
	  toolbarColumns: 'Columns',
	  toolbarColumnsLabel: 'Select columns',
	  // Filters toolbar button text
	  toolbarFilters: 'Filters',
	  toolbarFiltersLabel: 'Show filters',
	  toolbarFiltersTooltipHide: 'Hide filters',
	  toolbarFiltersTooltipShow: 'Show filters',
	  toolbarFiltersTooltipActive: count => count !== 1 ? `${count} active filters` : `${count} active filter`,
	  // Quick filter toolbar field
	  toolbarQuickFilterPlaceholder: 'Search…',
	  toolbarQuickFilterLabel: 'Search',
	  toolbarQuickFilterDeleteIconLabel: 'Clear',
	  // Export selector toolbar button text
	  toolbarExport: 'Export',
	  toolbarExportLabel: 'Export',
	  toolbarExportCSV: 'Download as CSV',
	  toolbarExportPrint: 'Print',
	  toolbarExportExcel: 'Download as Excel',
	  // Columns panel text
	  columnsPanelTextFieldLabel: 'Find column',
	  columnsPanelTextFieldPlaceholder: 'Column title',
	  columnsPanelDragIconLabel: 'Reorder column',
	  columnsPanelShowAllButton: 'Show all',
	  columnsPanelHideAllButton: 'Hide all',
	  // Filter panel text
	  filterPanelAddFilter: 'Add filter',
	  filterPanelDeleteIconLabel: 'Delete',
	  filterPanelLinkOperator: 'Logic operator',
	  filterPanelOperators: 'Operator',
	  // TODO v6: rename to filterPanelOperator
	  filterPanelOperatorAnd: 'And',
	  filterPanelOperatorOr: 'Or',
	  filterPanelColumns: 'Columns',
	  filterPanelInputLabel: 'Value',
	  filterPanelInputPlaceholder: 'Filter value',
	  // Filter operators text
	  filterOperatorContains: 'contains',
	  filterOperatorEquals: 'equals',
	  filterOperatorStartsWith: 'starts with',
	  filterOperatorEndsWith: 'ends with',
	  filterOperatorIs: 'is',
	  filterOperatorNot: 'is not',
	  filterOperatorAfter: 'is after',
	  filterOperatorOnOrAfter: 'is on or after',
	  filterOperatorBefore: 'is before',
	  filterOperatorOnOrBefore: 'is on or before',
	  filterOperatorIsEmpty: 'is empty',
	  filterOperatorIsNotEmpty: 'is not empty',
	  filterOperatorIsAnyOf: 'is any of',
	  // Filter values text
	  filterValueAny: 'any',
	  filterValueTrue: 'true',
	  filterValueFalse: 'false',
	  // Column menu text
	  columnMenuLabel: 'Menu',
	  columnMenuShowColumns: 'Show columns',
	  columnMenuFilter: 'Filter',
	  columnMenuHideColumn: 'Hide',
	  columnMenuUnsort: 'Unsort',
	  columnMenuSortAsc: 'Sort by ASC',
	  columnMenuSortDesc: 'Sort by DESC',
	  // Column header text
	  columnHeaderFiltersTooltipActive: count => count !== 1 ? `${count} active filters` : `${count} active filter`,
	  columnHeaderFiltersLabel: 'Show filters',
	  columnHeaderSortIconLabel: 'Sort',
	  // Rows selected footer text
	  footerRowSelected: count => count !== 1 ? `${count.toLocaleString()} rows selected` : `${count.toLocaleString()} row selected`,
	  // Total row amount footer text
	  footerTotalRows: 'Total Rows:',
	  // Total visible row amount footer text
	  footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} of ${totalCount.toLocaleString()}`,
	  // Checkbox selection text
	  checkboxSelectionHeaderName: 'Checkbox selection',
	  checkboxSelectionSelectAllRows: 'Select all rows',
	  checkboxSelectionUnselectAllRows: 'Unselect all rows',
	  checkboxSelectionSelectRow: 'Select row',
	  checkboxSelectionUnselectRow: 'Unselect row',
	  // Boolean cell text
	  booleanCellTrueLabel: 'yes',
	  booleanCellFalseLabel: 'no',
	  // Actions cell more text
	  actionsCellMore: 'more',
	  // Column pinning text
	  pinToLeft: 'Pin to left',
	  pinToRight: 'Pin to right',
	  unpin: 'Unpin',
	  // Tree Data
	  treeDataGroupingHeaderName: 'Group',
	  treeDataExpand: 'see children',
	  treeDataCollapse: 'hide children',
	  // Grouping columns
	  groupingColumnHeaderName: 'Group',
	  groupColumn: name => `Group by ${name}`,
	  unGroupColumn: name => `Stop grouping by ${name}`,
	  // Master/detail
	  detailPanelToggle: 'Detail panel toggle',
	  expandDetailPanel: 'Expand',
	  collapseDetailPanel: 'Collapse',
	  // Used core components translation keys
	  MuiTablePagination: {},
	  // Row reordering text
	  rowReorderingHeaderName: 'Row reordering',
	  // Aggregation
	  aggregationMenuItemHeader: 'Aggregation',
	  aggregationFunctionLabelSum: 'sum',
	  aggregationFunctionLabelAvg: 'avg',
	  aggregationFunctionLabelMin: 'min',
	  aggregationFunctionLabelMax: 'max',
	  aggregationFunctionLabelSize: 'size'
	};

	const _excluded$9 = ["sortingOrder"];
	const GridColumnUnsortedIcon = /*#__PURE__*/react.exports.memo(function GridColumnHeaderSortIcon(props) {
	  const {
	    sortingOrder
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$9);

	  const rootProps = useGridRootProps();
	  const [nextSortDirection] = sortingOrder;
	  const Icon = nextSortDirection === 'asc' ? rootProps.components.ColumnSortedAscendingIcon : rootProps.components.ColumnSortedDescendingIcon;
	  return Icon ? /*#__PURE__*/jsxRuntime.exports.jsx(Icon, _extends({}, other)) : null;
	});

	const _excluded$8 = ["error", "hasError", "errorInfo"];
	// TODO v6: rename to GridErrorOverlay
	const ErrorOverlay = /*#__PURE__*/react.exports.forwardRef(function ErrorOverlay(props, ref) {
	  const {
	    error
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$8);

	  const apiRef = useGridApiContext();
	  const defaultLabel = apiRef.current.getLocaleText('errorOverlayDefaultLabel');
	  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridOverlay, _extends({
	    ref: ref,
	    sx: {
	      width: '100%',
	      minHeight: 2 * rowHeight
	    }
	  }, other, {
	    children: (error == null ? void 0 : error.message) || defaultLabel
	  }));
	});

	const GridNoResultsOverlay = /*#__PURE__*/react.exports.forwardRef(function GridNoResultsOverlay(props, ref) {
	  const apiRef = useGridApiContext();
	  const noResultsOverlayLabel = apiRef.current.getLocaleText('noResultsOverlayLabel');
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridOverlay, _extends({
	    ref: ref
	  }, props, {
	    children: noResultsOverlayLabel
	  }));
	});

	const DEFAULT_GRID_ICON_SLOTS_COMPONENTS = {
	  BooleanCellTrueIcon: GridCheckIcon,
	  BooleanCellFalseIcon: GridCloseIcon,
	  ColumnMenuIcon: GridTripleDotsVerticalIcon,
	  OpenFilterButtonIcon: GridFilterListIcon,
	  FilterPanelDeleteIcon: GridCloseIcon,
	  ColumnFilteredIcon: GridFilterAltIcon,
	  ColumnSelectorIcon: GridColumnIcon,
	  ColumnUnsortedIcon: GridColumnUnsortedIcon,
	  ColumnSortedAscendingIcon: GridArrowUpwardIcon,
	  ColumnSortedDescendingIcon: GridArrowDownwardIcon,
	  ColumnResizeIcon: GridSeparatorIcon,
	  DensityCompactIcon: GridViewHeadlineIcon,
	  DensityStandardIcon: GridTableRowsIcon,
	  DensityComfortableIcon: GridViewStreamIcon,
	  ExportIcon: GridSaveAltIcon,
	  MoreActionsIcon: GridMoreVertIcon,
	  TreeDataCollapseIcon: GridExpandMoreIcon,
	  TreeDataExpandIcon: GridKeyboardArrowRight,
	  GroupingCriteriaCollapseIcon: GridExpandMoreIcon,
	  GroupingCriteriaExpandIcon: GridKeyboardArrowRight,
	  DetailPanelExpandIcon: GridAddIcon,
	  DetailPanelCollapseIcon: GridRemoveIcon,
	  RowReorderIcon: GridDragIcon,
	  QuickFilterIcon: GridSearchIcon,
	  QuickFilterClearIcon: GridCloseIcon
	};
	/**
	 * TODO: Differentiate community and pro value and interface
	 */

	const DATA_GRID_DEFAULT_SLOTS_COMPONENTS = _extends({}, DEFAULT_GRID_ICON_SLOTS_COMPONENTS, {
	  BaseCheckbox: MUICheckbox,
	  BaseTextField: MUITextField,
	  BaseFormControl: MUIFormControl,
	  BaseSelect: MUISelect,
	  BaseSwitch: MUISwitch,
	  BaseButton: MUIButton,
	  BaseTooltip: MUITooltip,
	  BasePopper: MUIPopper,
	  Cell: GridCell,
	  SkeletonCell: GridSkeletonCell,
	  ColumnHeaderFilterIconButton: GridColumnHeaderFilterIconButton,
	  ColumnMenu: GridColumnMenu,
	  ErrorOverlay,
	  Footer: GridFooter,
	  Header: GridHeader,
	  Toolbar: null,
	  PreferencesPanel: GridPreferencesPanel,
	  LoadingOverlay: GridLoadingOverlay,
	  NoResultsOverlay: GridNoResultsOverlay,
	  NoRowsOverlay: GridNoRowsOverlay,
	  Pagination: GridPagination,
	  FilterPanel: GridFilterPanel,
	  ColumnsPanel: GridColumnsPanel,
	  Panel: GridPanel,
	  Row: GridRow
	});

	const useUtilityClasses$6 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  return react.exports.useMemo(() => {
	    const slots = {
	      cellCheckbox: ['cellCheckbox'],
	      columnHeaderCheckbox: ['columnHeaderCheckbox']
	    };
	    return composeClasses(slots, getDataGridUtilityClass, classes);
	  }, [classes]);
	};

	const useGridSelectionPreProcessors = (apiRef, props) => {
	  const ownerState = {
	    classes: props.classes
	  };
	  const classes = useUtilityClasses$6(ownerState);
	  const updateSelectionColumn = react.exports.useCallback(columnsState => {
	    const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF, {
	      cellClassName: classes.cellCheckbox,
	      headerClassName: classes.columnHeaderCheckbox,
	      headerName: apiRef.current.getLocaleText('checkboxSelectionHeaderName')
	    });

	    const shouldHaveSelectionColumn = props.checkboxSelection;
	    const haveSelectionColumn = columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] != null;

	    if (shouldHaveSelectionColumn && !haveSelectionColumn) {
	      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = selectionColumn;
	      columnsState.all = [GRID_CHECKBOX_SELECTION_FIELD, ...columnsState.all];
	    } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {
	      delete columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD];
	      columnsState.all = columnsState.all.filter(field => field !== GRID_CHECKBOX_SELECTION_FIELD);
	    } else if (shouldHaveSelectionColumn && haveSelectionColumn) {
	      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = _extends({}, selectionColumn, columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD]);
	    }

	    return columnsState;
	  }, [apiRef, classes, props.checkboxSelection]);
	  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateSelectionColumn);
	};

	const sortingStateInitializer = (state, props) => {
	  var _ref, _props$sortModel, _props$initialState, _props$initialState$s;

	  const sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$s = _props$initialState.sorting) == null ? void 0 : _props$initialState$s.sortModel) != null ? _ref : [];
	  return _extends({}, state, {
	    sorting: {
	      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),
	      sortedRows: []
	    }
	  });
	};
	/**
	 * @requires useGridRows (event)
	 * @requires useGridColumns (event)
	 */

	const useGridSorting = (apiRef, props) => {
	  var _props$initialState3, _props$initialState3$;

	  const logger = useGridLogger(apiRef, 'useGridSorting');
	  apiRef.current.unstable_registerControlState({
	    stateId: 'sortModel',
	    propModel: props.sortModel,
	    propOnChange: props.onSortModelChange,
	    stateSelector: gridSortModelSelector,
	    changeEvent: 'sortModelChange'
	  });
	  const upsertSortModel = react.exports.useCallback((field, sortItem) => {
	    const sortModel = gridSortModelSelector(apiRef);
	    const existingIdx = sortModel.findIndex(c => c.field === field);
	    let newSortModel = [...sortModel];

	    if (existingIdx > -1) {
	      if (!sortItem) {
	        newSortModel.splice(existingIdx, 1);
	      } else {
	        newSortModel.splice(existingIdx, 1, sortItem);
	      }
	    } else {
	      newSortModel = [...sortModel, sortItem];
	    }

	    return newSortModel;
	  }, [apiRef]);
	  const createSortItem = react.exports.useCallback((col, directionOverride) => {
	    var _col$sortingOrder2;

	    const sortModel = gridSortModelSelector(apiRef);
	    const existing = sortModel.find(c => c.field === col.field);

	    if (existing) {
	      var _col$sortingOrder;

	      const nextSort = directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;
	      return nextSort == null ? undefined : _extends({}, existing, {
	        sort: nextSort
	      });
	    }

	    return {
	      field: col.field,
	      sort: directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride
	    };
	  }, [apiRef, props.sortingOrder]);
	  /**
	   * API METHODS
	   */

	  const applySorting = react.exports.useCallback(() => {
	    apiRef.current.setState(state => {
	      if (props.sortingMode === GridFeatureModeConstant.server) {
	        logger.debug('Skipping sorting rows as sortingMode = server');
	        return _extends({}, state, {
	          sorting: _extends({}, state.sorting, {
	            sortedRows: gridRowIdsSelector(state, apiRef.current.instanceId)
	          })
	        });
	      }

	      const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);
	      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);
	      const sortedRows = apiRef.current.unstable_applyStrategyProcessor('sorting', {
	        sortRowList
	      });
	      return _extends({}, state, {
	        sorting: _extends({}, state.sorting, {
	          sortedRows
	        })
	      });
	    });
	    apiRef.current.publishEvent('sortedRowsSet');
	    apiRef.current.forceUpdate();
	  }, [apiRef, logger, props.sortingMode]);
	  const setSortModel = react.exports.useCallback(model => {
	    const currentModel = gridSortModelSelector(apiRef);

	    if (currentModel !== model) {
	      logger.debug(`Setting sort model`);
	      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));
	      apiRef.current.forceUpdate();
	      apiRef.current.applySorting();
	    }
	  }, [apiRef, logger, props.disableMultipleColumnsSorting]);
	  const sortColumn = react.exports.useCallback((column, direction, allowMultipleSorting) => {
	    if (!column.sortable) {
	      return;
	    }

	    const sortItem = createSortItem(column, direction);
	    let sortModel;

	    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {
	      sortModel = !sortItem ? [] : [sortItem];
	    } else {
	      sortModel = upsertSortModel(column.field, sortItem);
	    }

	    apiRef.current.setSortModel(sortModel);
	  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);
	  const getSortModel = react.exports.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);
	  const getSortedRows = react.exports.useCallback(() => {
	    const sortedRows = gridSortedRowEntriesSelector(apiRef);
	    return sortedRows.map(row => row.model);
	  }, [apiRef]);
	  const getSortedRowIds = react.exports.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);
	  const getRowIndex = react.exports.useCallback(id => apiRef.current.getSortedRowIds().indexOf(id), [apiRef]);
	  const getRowIdFromRowIndex = react.exports.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);
	  const sortApi = {
	    getSortModel,
	    getSortedRows,
	    getSortedRowIds,
	    getRowIndex,
	    getRowIdFromRowIndex,
	    setSortModel,
	    sortColumn,
	    applySorting
	  };
	  useGridApiMethod(apiRef, sortApi);
	  /**
	   * PRE-PROCESSING
	   */

	  const stateExportPreProcessing = react.exports.useCallback((prevState, context) => {
	    var _props$initialState2, _props$initialState2$;

	    const sortModelToExport = gridSortModelSelector(apiRef);
	    const shouldExportSortModel = // Always export if the `exportOnlyDirtyModels` property is activated
	    !context.exportOnlyDirtyModels || // Always export if the model is controlled
	    props.sortModel != null || // Always export if the model has been initialized
	    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.sorting) == null ? void 0 : _props$initialState2$.sortModel) != null || // Export if the model is not empty
	    sortModelToExport.length > 0;

	    if (!shouldExportSortModel) {
	      return prevState;
	    }

	    return _extends({}, prevState, {
	      sorting: {
	        sortModel: sortModelToExport
	      }
	    });
	  }, [apiRef, props.sortModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.sorting) == null ? void 0 : _props$initialState3$.sortModel]);
	  const stateRestorePreProcessing = react.exports.useCallback((params, context) => {
	    var _context$stateToResto;

	    const sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;

	    if (sortModel == null) {
	      return params;
	    }

	    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));
	    return _extends({}, params, {
	      callbacks: [...params.callbacks, apiRef.current.applySorting]
	    });
	  }, [apiRef, props.disableMultipleColumnsSorting]);
	  const flatSortingMethod = react.exports.useCallback(params => {
	    const rowTree = gridRowTreeSelector(apiRef);

	    if (!params.sortRowList) {
	      const bodyRowIds = [];
	      const footerRowIds = [];
	      gridRowIdsSelector(apiRef).forEach(rowId => {
	        if (rowTree[rowId].isPinned) {
	          return;
	        }

	        if (rowTree[rowId].position === 'footer') {
	          footerRowIds.push(rowId);
	        } else {
	          bodyRowIds.push(rowId);
	        }
	      });
	      return [...bodyRowIds, ...footerRowIds];
	    }

	    const bodyRows = [];
	    const footerRowIds = [];
	    Object.values(rowTree).forEach(rowNode => {
	      if (rowNode.isPinned) {
	        return;
	      }

	      if (rowNode.position === 'footer') {
	        footerRowIds.push(rowNode.id);
	      } else {
	        bodyRows.push(rowNode);
	      }
	    });
	    return [...params.sortRowList(bodyRows), ...footerRowIds];
	  }, [apiRef]);
	  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);
	  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);
	  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);
	  /**
	   * EVENTS
	   */

	  const handleColumnHeaderClick = react.exports.useCallback(({
	    colDef
	  }, event) => {
	    const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;
	    sortColumn(colDef, undefined, allowMultipleSorting);
	  }, [sortColumn]);
	  const handleColumnHeaderKeyDown = react.exports.useCallback(({
	    colDef
	  }, event) => {
	    // Ctrl + Enter opens the column menu
	    if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {
	      sortColumn(colDef, undefined, event.shiftKey);
	    }
	  }, [sortColumn]);
	  const handleColumnsChange = react.exports.useCallback(() => {
	    // When the columns change we check that the sorted columns are still part of the dataset
	    const sortModel = gridSortModelSelector(apiRef);
	    const latestColumns = gridColumnLookupSelector(apiRef);

	    if (sortModel.length > 0) {
	      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);

	      if (newModel.length < sortModel.length) {
	        apiRef.current.setSortModel(newModel);
	      }
	    }
	  }, [apiRef]);
	  const handleStrategyProcessorChange = react.exports.useCallback(methodName => {
	    if (methodName === 'sorting') {
	      apiRef.current.applySorting();
	    }
	  }, [apiRef]);
	  useGridApiEventHandler(apiRef, 'columnHeaderClick', handleColumnHeaderClick);
	  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);
	  useGridApiEventHandler(apiRef, 'rowsSet', apiRef.current.applySorting);
	  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);
	  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);
	  /**
	   * 1ST RENDER
	   */

	  useFirstRender(() => {
	    apiRef.current.applySorting();
	  });
	  /**
	   * EFFECTS
	   */

	  react.exports.useEffect(() => {
	    if (props.sortModel !== undefined) {
	      apiRef.current.setSortModel(props.sortModel);
	    }
	  }, [apiRef, props.sortModel]);
	};

	// Similar to https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView

	function scrollIntoView(dimensions) {
	  const {
	    clientHeight,
	    scrollTop,
	    offsetHeight,
	    offsetTop
	  } = dimensions;
	  const elementBottom = offsetTop + offsetHeight; // Always scroll to top when cell is higher than viewport to avoid scroll jump
	  // See https://github.com/mui/mui-x/issues/4513 and https://github.com/mui/mui-x/issues/4514

	  if (offsetHeight > clientHeight) {
	    return offsetTop;
	  }

	  if (elementBottom - clientHeight > scrollTop) {
	    return elementBottom - clientHeight;
	  }

	  if (offsetTop < scrollTop) {
	    return offsetTop;
	  }

	  return undefined;
	}
	/**
	 * @requires useGridPagination (state) - can be after, async only
	 * @requires useGridColumns (state) - can be after, async only
	 * @requires useGridRows (state) - can be after, async only
	 * @requires useGridRowsMeta (state) - can be after, async only
	 * @requires useGridFilter (state)
	 * @requires useGridColumnSpanning (method)
	 */


	const useGridScroll = (apiRef, props) => {
	  const logger = useGridLogger(apiRef, 'useGridScroll');
	  const colRef = apiRef.current.columnHeadersElementRef;
	  const windowRef = apiRef.current.windowRef;
	  const visibleSortedRows = useGridSelector(apiRef, gridVisibleSortedRowEntriesSelector);
	  const scrollToIndexes = react.exports.useCallback(params => {
	    const totalRowCount = gridRowCountSelector(apiRef);
	    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
	    const scrollToHeader = params.rowIndex == null;

	    if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {
	      return false;
	    }

	    logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);
	    let scrollCoordinates = {};

	    if (params.colIndex != null) {
	      const columnPositions = gridColumnPositionsSelector(apiRef);
	      let cellWidth;

	      if (typeof params.rowIndex !== 'undefined') {
	        var _visibleSortedRows$pa;

	        const rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;
	        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);

	        if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
	          cellWidth = cellColSpanInfo.cellProps.width;
	        }
	      }

	      if (typeof cellWidth === 'undefined') {
	        cellWidth = visibleColumns[params.colIndex].computedWidth;
	      }

	      scrollCoordinates.left = scrollIntoView({
	        clientHeight: windowRef.current.clientWidth,
	        scrollTop: windowRef.current.scrollLeft,
	        offsetHeight: cellWidth,
	        offsetTop: columnPositions[params.colIndex]
	      });
	    }

	    if (params.rowIndex != null) {
	      var _querySelector, _querySelector2;

	      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);
	      const page = gridPageSelector(apiRef);
	      const pageSize = gridPageSizeSelector(apiRef);
	      const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize;
	      const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];
	      const topPinnedRowsHeight = ((_querySelector = windowRef.current.querySelector(`.${gridClasses['pinnedRows--top']}`)) == null ? void 0 : _querySelector.clientHeight) || 0;
	      const bottomPinnedRowsHeight = ((_querySelector2 = windowRef.current.querySelector(`.${gridClasses['pinnedRows--bottom']}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;
	      scrollCoordinates.top = scrollIntoView({
	        clientHeight: windowRef.current.clientHeight - topPinnedRowsHeight - bottomPinnedRowsHeight,
	        scrollTop: windowRef.current.scrollTop,
	        offsetHeight: targetOffsetHeight,
	        offsetTop: rowsMeta.positions[elementIndex]
	      });
	    }

	    scrollCoordinates = apiRef.current.unstable_applyPipeProcessors('scrollToIndexes', scrollCoordinates, params);

	    if (typeof scrollCoordinates.left !== undefined || typeof scrollCoordinates.top !== undefined) {
	      apiRef.current.scroll(scrollCoordinates);
	      return true;
	    }

	    return false;
	  }, [logger, apiRef, windowRef, props.pagination, visibleSortedRows]);
	  const scroll = react.exports.useCallback(params => {
	    if (windowRef.current && params.left != null && colRef.current) {
	      colRef.current.scrollLeft = params.left;
	      windowRef.current.scrollLeft = params.left;
	      logger.debug(`Scrolling left: ${params.left}`);
	    }

	    if (windowRef.current && params.top != null) {
	      windowRef.current.scrollTop = params.top;
	      logger.debug(`Scrolling top: ${params.top}`);
	    }

	    logger.debug(`Scrolling, updating container, and viewport`);
	  }, [windowRef, colRef, logger]);
	  const getScrollPosition = react.exports.useCallback(() => {
	    if (!(windowRef != null && windowRef.current)) {
	      return {
	        top: 0,
	        left: 0
	      };
	    }

	    return {
	      top: windowRef.current.scrollTop,
	      left: windowRef.current.scrollLeft
	    };
	  }, [windowRef]);
	  const scrollApi = {
	    scroll,
	    scrollToIndexes,
	    getScrollPosition
	  };
	  useGridApiMethod(apiRef, scrollApi);
	};

	/**
	 * @requires useGridFocus (event) - can be after, async only
	 * @requires useGridColumns (event) - can be after, async only
	 */
	function useGridEvents(apiRef, props) {
	  useGridApiOptionHandler(apiRef, 'columnHeaderClick', props.onColumnHeaderClick);
	  useGridApiOptionHandler(apiRef, 'columnHeaderDoubleClick', props.onColumnHeaderDoubleClick);
	  useGridApiOptionHandler(apiRef, 'columnHeaderOver', props.onColumnHeaderOver);
	  useGridApiOptionHandler(apiRef, 'columnHeaderOut', props.onColumnHeaderOut);
	  useGridApiOptionHandler(apiRef, 'columnHeaderEnter', props.onColumnHeaderEnter);
	  useGridApiOptionHandler(apiRef, 'columnHeaderLeave', props.onColumnHeaderLeave);
	  useGridApiOptionHandler(apiRef, 'columnOrderChange', props.onColumnOrderChange);
	  useGridApiOptionHandler(apiRef, 'cellClick', props.onCellClick);
	  useGridApiOptionHandler(apiRef, 'cellDoubleClick', props.onCellDoubleClick);
	  useGridApiOptionHandler(apiRef, 'cellKeyDown', props.onCellKeyDown);
	  useGridApiOptionHandler(apiRef, 'cellFocusOut', props.onCellFocusOut);
	  useGridApiOptionHandler(apiRef, 'preferencePanelClose', props.onPreferencePanelClose);
	  useGridApiOptionHandler(apiRef, 'preferencePanelOpen', props.onPreferencePanelOpen);
	  useGridApiOptionHandler(apiRef, 'menuOpen', props.onMenuOpen);
	  useGridApiOptionHandler(apiRef, 'menuClose', props.onMenuClose);
	  useGridApiOptionHandler(apiRef, 'rowDoubleClick', props.onRowDoubleClick);
	  useGridApiOptionHandler(apiRef, 'rowClick', props.onRowClick);
	  useGridApiOptionHandler(apiRef, 'componentError', props.onError);
	  useGridApiOptionHandler(apiRef, 'stateChange', props.onStateChange);
	}

	const hasScroll = ({
	  content,
	  container,
	  scrollBarSize
	}) => {
	  const hasScrollXIfNoYScrollBar = content.width > container.width;
	  const hasScrollYIfNoXScrollBar = content.height > container.height;
	  let hasScrollX = false;
	  let hasScrollY = false;

	  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {
	    hasScrollX = hasScrollXIfNoYScrollBar;
	    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height; // We recalculate the scroll x to consider the size of the y scrollbar.

	    if (hasScrollY) {
	      hasScrollX = content.width + scrollBarSize > container.width;
	    }
	  }

	  return {
	    hasScrollX,
	    hasScrollY
	  };
	};

	function useGridDimensions(apiRef, props) {
	  const logger = useGridLogger(apiRef, 'useResizeContainer');
	  const errorShown = react.exports.useRef(false);
	  const rootDimensionsRef = react.exports.useRef(null);
	  const fullDimensionsRef = react.exports.useRef(null);
	  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);
	  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);
	  const updateGridDimensionsRef = react.exports.useCallback(() => {
	    var _apiRef$current$rootE;

	    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;
	    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);
	    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);

	    if (!rootDimensionsRef.current) {
	      return;
	    }

	    let scrollBarSize;

	    if (props.scrollbarSize != null) {
	      scrollBarSize = props.scrollbarSize;
	    } else if (!columnsTotalWidth || !rootElement) {
	      scrollBarSize = 0;
	    } else {
	      const doc = ownerDocument(rootElement);
	      const scrollDiv = doc.createElement('div');
	      scrollDiv.style.width = '99px';
	      scrollDiv.style.height = '99px';
	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.overflow = 'scroll';
	      scrollDiv.className = 'scrollDiv';
	      rootElement.appendChild(scrollDiv);
	      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      rootElement.removeChild(scrollDiv);
	    }

	    let viewportOuterSize;
	    let hasScrollX;
	    let hasScrollY;

	    if (props.autoHeight) {
	      hasScrollY = false;
	      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;
	      viewportOuterSize = {
	        width: rootDimensionsRef.current.width,
	        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)
	      };
	    } else {
	      viewportOuterSize = {
	        width: rootDimensionsRef.current.width,
	        height: rootDimensionsRef.current.height - totalHeaderHeight
	      };
	      const scrollInformation = hasScroll({
	        content: {
	          width: Math.round(columnsTotalWidth),
	          height: rowsMeta.currentPageTotalHeight
	        },
	        container: {
	          width: viewportOuterSize.width,
	          height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom
	        },
	        scrollBarSize
	      });
	      hasScrollY = scrollInformation.hasScrollY;
	      hasScrollX = scrollInformation.hasScrollX;
	    }

	    const viewportInnerSize = {
	      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),
	      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)
	    };
	    const newFullDimensions = {
	      viewportOuterSize,
	      viewportInnerSize,
	      hasScrollX,
	      hasScrollY,
	      scrollBarSize
	    };
	    const prevDimensions = fullDimensionsRef.current;
	    fullDimensionsRef.current = newFullDimensions;

	    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {
	      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);
	    }
	  }, [apiRef, props.scrollbarSize, props.autoHeight, totalHeaderHeight, rowsMeta.currentPageTotalHeight]);
	  const resize = react.exports.useCallback(() => {
	    updateGridDimensionsRef();
	    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);
	  }, [apiRef, updateGridDimensionsRef]);
	  const getRootDimensions = react.exports.useCallback(() => fullDimensionsRef.current, []);
	  const getViewportPageSize = react.exports.useCallback(() => {
	    const dimensions = apiRef.current.getRootDimensions();

	    if (!dimensions) {
	      return 0;
	    }

	    const currentPage = getVisibleRows(apiRef, {
	      pagination: props.pagination,
	      paginationMode: props.paginationMode
	    }); // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions
	    // to find out the maximum number of rows that can fit in the visible part of the grid

	    if (props.getRowHeight) {
	      const renderContext = apiRef.current.unstable_getRenderContext();
	      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;
	      return Math.min(viewportPageSize - 1, currentPage.rows.length);
	    }

	    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / gridDensityRowHeightSelector(apiRef));
	    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);
	  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight]);
	  const dimensionsApi = {
	    resize,
	    getRootDimensions,
	    unstable_getViewportPageSize: getViewportPageSize,
	    unstable_updateGridDimensionsRef: updateGridDimensionsRef
	  };
	  useGridApiMethod(apiRef, dimensionsApi);
	  const debounceResize = react.exports.useMemo(() => debounce$1(resize, 60), [resize]);
	  const isFirstSizing = react.exports.useRef(true);
	  const handleResize = react.exports.useCallback(size => {
	    rootDimensionsRef.current = size; // jsdom has no layout capabilities

	    const isJSDOM = /jsdom/.test(window.navigator.userAgent);

	    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {
	      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\n'));
	      errorShown.current = true;
	    }

	    if (size.width === 0 && !errorShown.current && !isJSDOM) {
	      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\n'));
	      errorShown.current = true;
	    }

	    if (isFirstSizing.current) {
	      // We want to initialize the grid dimensions as soon as possible to avoid flickering
	      resize();
	      isFirstSizing.current = false;
	      return;
	    }

	    debounceResize();
	  }, [props.autoHeight, debounceResize, logger, resize]);
	  useEnhancedEffect$1(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);
	  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);
	  useGridApiOptionHandler(apiRef, 'pageChange', updateGridDimensionsRef);
	  useGridApiOptionHandler(apiRef, 'pageSizeChange', updateGridDimensionsRef);
	  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);
	  useGridApiEventHandler(apiRef, 'resize', handleResize);
	  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);
	}

	const rowsMetaStateInitializer = state => _extends({}, state, {
	  rowsMeta: {
	    currentPageTotalHeight: 0,
	    positions: []
	  }
	});
	/**
	 * @requires useGridPageSize (method)
	 * @requires useGridPage (method)
	 */

	const useGridRowsMeta = (apiRef, props) => {
	  const {
	    getRowHeight: getRowHeightProp,
	    getRowSpacing,
	    getEstimatedRowHeight
	  } = props;
	  const rowsHeightLookup = react.exports.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js

	  const lastMeasuredRowIndex = react.exports.useRef(-1);
	  const hasRowWithAutoHeight = react.exports.useRef(false);
	  const rowHeightFromDensity = useGridSelector(apiRef, gridDensityRowHeightSelector);
	  const filterState = useGridSelector(apiRef, gridFilterStateSelector);
	  const paginationState = useGridSelector(apiRef, gridPaginationSelector);
	  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);
	  const currentPage = useGridVisibleRows(apiRef, props);
	  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);
	  const hydrateRowsMeta = react.exports.useCallback(() => {
	    var _pinnedRows$top, _pinnedRows$bottom;

	    hasRowWithAutoHeight.current = false;
	    const densityFactor = gridDensityFactorSelector(apiRef.current.state, apiRef.current.instanceId);

	    const calculateRowProcessedSizes = row => {
	      if (!rowsHeightLookup.current[row.id]) {
	        rowsHeightLookup.current[row.id] = {
	          sizes: {
	            baseCenter: rowHeightFromDensity
	          },
	          isResized: false,
	          autoHeight: false,
	          needsFirstMeasurement: true // Assume all rows will need to be measured by default

	        };
	      }

	      const {
	        isResized,
	        needsFirstMeasurement,
	        sizes
	      } = rowsHeightLookup.current[row.id];
	      let baseRowHeight = rowHeightFromDensity;
	      const existingBaseRowHeight = sizes.baseCenter;

	      if (isResized) {
	        // Do not recalculate resized row height and use the value from the lookup
	        baseRowHeight = existingBaseRowHeight;
	      } else if (getRowHeightProp) {
	        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {
	          densityFactor
	        }));

	        if (rowHeightFromUser === 'auto') {
	          if (needsFirstMeasurement) {
	            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {
	              densityFactor
	            })) : rowHeightFromDensity; // If the row was not measured yet use the estimated row height

	            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeightFromDensity;
	          } else {
	            baseRowHeight = existingBaseRowHeight;
	          }

	          hasRowWithAutoHeight.current = true;
	          rowsHeightLookup.current[row.id].autoHeight = true;
	        } else {
	          // Default back to base rowHeight if getRowHeight returns null or undefined.
	          baseRowHeight = rowHeightFromUser != null ? rowHeightFromUser : rowHeightFromDensity;
	          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;
	          rowsHeightLookup.current[row.id].autoHeight = false;
	        }
	      } else {
	        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;
	      }

	      const existingBaseSizes = Object.entries(sizes).reduce((acc, [key, size]) => {
	        if (/^base[A-Z]/.test(key)) {
	          acc[key] = size;
	        }

	        return acc;
	      }, {}); // We use an object to make simple to check if a height is already added or not

	      const initialHeights = _extends({}, existingBaseSizes, {
	        baseCenter: baseRowHeight
	      });

	      if (getRowSpacing) {
	        var _spacing$top, _spacing$bottom;

	        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);
	        const spacing = getRowSpacing(_extends({}, row, {
	          isFirstVisible: indexRelativeToCurrentPage === 0,
	          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
	          indexRelativeToCurrentPage
	        }));
	        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;
	        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;
	      }

	      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);
	      rowsHeightLookup.current[row.id].sizes = processedSizes;
	      return processedSizes;
	    };

	    const positions = [];
	    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {
	      positions.push(acc);
	      let maximumBaseSize = 0;
	      let otherSizes = 0;
	      const processedSizes = calculateRowProcessedSizes(row);
	      Object.entries(processedSizes).forEach(([size, value]) => {
	        if (/^base[A-Z]/.test(size)) {
	          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;
	        } else {
	          otherSizes += value;
	        }
	      });
	      return acc + maximumBaseSize + otherSizes;
	    }, 0);
	    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {
	      calculateRowProcessedSizes(row);
	    });
	    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {
	      calculateRowProcessedSizes(row);
	    });
	    apiRef.current.setState(state => {
	      return _extends({}, state, {
	        rowsMeta: {
	          currentPageTotalHeight,
	          positions
	        }
	      });
	    });

	    if (!hasRowWithAutoHeight.current) {
	      // No row has height=auto, so all rows are already measured
	      lastMeasuredRowIndex.current = Infinity;
	    }

	    apiRef.current.forceUpdate();
	  }, [apiRef, currentPage.rows, rowHeightFromDensity, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows]);
	  const getRowHeight = react.exports.useCallback(rowId => {
	    const height = rowsHeightLookup.current[rowId];
	    return height ? height.sizes.baseCenter : rowHeightFromDensity;
	  }, [rowHeightFromDensity]);

	  const getRowInternalSizes = rowId => {
	    var _rowsHeightLookup$cur;

	    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;
	  };

	  const setRowHeight = react.exports.useCallback((id, height) => {
	    rowsHeightLookup.current[id].sizes.baseCenter = height;
	    rowsHeightLookup.current[id].isResized = true;
	    rowsHeightLookup.current[id].needsFirstMeasurement = false;
	    hydrateRowsMeta();
	  }, [hydrateRowsMeta]);
	  const debouncedHydrateRowsMeta = react.exports.useMemo(() => debounce$1(hydrateRowsMeta), [hydrateRowsMeta]);
	  const storeMeasuredRowHeight = react.exports.useCallback((id, height, position) => {
	    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {
	      return;
	    } // Only trigger hydration if the value is different, otherwise we trigger a loop


	    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;
	    rowsHeightLookup.current[id].needsFirstMeasurement = false;
	    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;

	    if (needsHydration) {
	      debouncedHydrateRowsMeta();
	    }
	  }, [debouncedHydrateRowsMeta]);
	  const rowHasAutoHeight = react.exports.useCallback(id => {
	    var _rowsHeightLookup$cur2;

	    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;
	  }, []);
	  const getLastMeasuredRowIndex = react.exports.useCallback(() => {
	    return lastMeasuredRowIndex.current;
	  }, []);
	  const setLastMeasuredRowIndex = react.exports.useCallback(index => {
	    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {
	      lastMeasuredRowIndex.current = index;
	    }
	  }, []);
	  const resetRowHeights = react.exports.useCallback(() => {
	    rowsHeightLookup.current = {};
	    hydrateRowsMeta();
	  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.
	  // Because of variable row height this is needed for the virtualization

	  react.exports.useEffect(() => {
	    hydrateRowsMeta();
	  }, [rowHeightFromDensity, filterState, paginationState, sortingState, hydrateRowsMeta]);
	  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);
	  const rowsMetaApi = {
	    unstable_getLastMeasuredRowIndex: getLastMeasuredRowIndex,
	    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,
	    unstable_rowHasAutoHeight: rowHasAutoHeight,
	    unstable_getRowHeight: getRowHeight,
	    unstable_getRowInternalSizes: getRowInternalSizes,
	    unstable_setRowHeight: setRowHeight,
	    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,
	    resetRowHeights
	  };
	  useGridApiMethod(apiRef, rowsMetaApi);
	};

	const useGridStatePersistence = apiRef => {
	  const exportState = react.exports.useCallback((params = {}) => {
	    const stateToExport = apiRef.current.unstable_applyPipeProcessors('exportState', {}, params);
	    return stateToExport;
	  }, [apiRef]);
	  const restoreState = react.exports.useCallback(stateToRestore => {
	    const response = apiRef.current.unstable_applyPipeProcessors('restoreState', {
	      callbacks: []
	    }, {
	      stateToRestore
	    });
	    response.callbacks.forEach(callback => {
	      callback();
	    });
	    apiRef.current.forceUpdate();
	  }, [apiRef]);
	  const statePersistenceApi = {
	    exportState,
	    restoreState
	  };
	  useGridApiMethod(apiRef, statePersistenceApi);
	};

	/**
	 * @requires useGridColumns (method, event)
	 * @requires useGridParamsApi (method)
	 */
	const useGridColumnSpanning = apiRef => {
	  const lookup = react.exports.useRef({});
	  const setCellColSpanInfo = react.exports.useCallback((rowId, columnIndex, cellColSpanInfo) => {
	    const sizes = lookup.current;

	    if (!sizes[rowId]) {
	      sizes[rowId] = {};
	    }

	    sizes[rowId][columnIndex] = cellColSpanInfo;
	  }, []);
	  const getCellColSpanInfo = react.exports.useCallback((rowId, columnIndex) => {
	    var _lookup$current$rowId;

	    return (_lookup$current$rowId = lookup.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];
	  }, []); // Calculate `colSpan` for the cell.

	  const calculateCellColSpan = react.exports.useCallback(params => {
	    const {
	      columnIndex,
	      rowId,
	      minFirstColumnIndex,
	      maxLastColumnIndex,
	      columns
	    } = params;
	    const columnsLength = columns.length;
	    const column = columns[columnIndex];
	    const colSpan = typeof column.colSpan === 'function' ? column.colSpan(apiRef.current.getCellParams(rowId, column.field)) : column.colSpan;

	    if (!colSpan || colSpan === 1) {
	      setCellColSpanInfo(rowId, columnIndex, {
	        spannedByColSpan: false,
	        cellProps: {
	          colSpan: 1,
	          width: column.computedWidth
	        }
	      });
	      return {
	        colSpan: 1
	      };
	    }

	    let width = column.computedWidth;

	    for (let j = 1; j < colSpan; j += 1) {
	      const nextColumnIndex = columnIndex + j; // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).

	      if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {
	        const nextColumn = columns[nextColumnIndex];
	        width += nextColumn.computedWidth;
	        setCellColSpanInfo(rowId, columnIndex + j, {
	          spannedByColSpan: true,
	          rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),
	          leftVisibleCellIndex: columnIndex
	        });
	      }

	      setCellColSpanInfo(rowId, columnIndex, {
	        spannedByColSpan: false,
	        cellProps: {
	          colSpan,
	          width
	        }
	      });
	    }

	    return {
	      colSpan
	    };
	  }, [apiRef, setCellColSpanInfo]); // Calculate `colSpan` for each cell in the row

	  const calculateColSpan = react.exports.useCallback(({
	    rowId,
	    minFirstColumn,
	    maxLastColumn,
	    columns
	  }) => {
	    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {
	      const cellProps = calculateCellColSpan({
	        columnIndex: i,
	        rowId,
	        minFirstColumnIndex: minFirstColumn,
	        maxLastColumnIndex: maxLastColumn,
	        columns
	      });

	      if (cellProps.colSpan > 1) {
	        i += cellProps.colSpan - 1;
	      }
	    }
	  }, [calculateCellColSpan]);
	  const columnSpanningApi = {
	    unstable_getCellColSpanInfo: getCellColSpanInfo,
	    unstable_calculateColSpan: calculateColSpan
	  };
	  useGridApiMethod(apiRef, columnSpanningApi);
	  const handleColumnReorderChange = react.exports.useCallback(() => {
	    // `colSpan` needs to be recalculated after column reordering
	    lookup.current = {};
	  }, []);
	  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnReorderChange);
	};

	const useGridColumnGroupingPreProcessors = (apiRef, props) => {
	  var _props$experimentalFe2;

	  const addHeaderGroups = react.exports.useCallback(columnsState => {
	    var _props$experimentalFe;

	    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {
	      return columnsState;
	    }

	    const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel);
	    columnsState.all.forEach(field => {
	      var _unwrappedGroupingMod, _unwrappedGroupingMod2;

	      const newGroupPath = (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];
	      const lookupElement = columnsState.lookup[field];

	      if (hasGroupPath(lookupElement) && isDeepEqual(newGroupPath, lookupElement == null ? void 0 : lookupElement.groupPath)) {
	        // Avoid modifying the pointer to allow shadow comparison in https://github.com/mui/mui-x/blob/f90afbf10a1264ee8b453d7549dd7cdd6110a4ed/packages/grid/x-data-grid/src/hooks/features/columns/gridColumnsUtils.ts#L446:L453
	        return;
	      }

	      columnsState.lookup[field] = _extends({}, columnsState.lookup[field], {
	        groupPath: (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod2 : []
	      });
	    });
	    return columnsState;
	  }, [props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);
	  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', addHeaderGroups);
	};

	const useDataGridComponent = props => {
	  var _props$experimentalFe, _props$experimentalFe2;

	  const apiRef = useGridInitialization(undefined, props);
	  /**
	   * Register all pre-processors called during state initialization here.
	   */

	  useGridColumnGroupingPreProcessors(apiRef, props);
	  useGridSelectionPreProcessors(apiRef, props);
	  useGridRowsPreProcessors(apiRef);
	  /**
	   * Register all state initializers here.
	   */

	  useGridInitializeState(selectionStateInitializer, apiRef, props);
	  useGridInitializeState(columnsStateInitializer, apiRef, props);
	  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);
	  useGridInitializeState(rowsStateInitializer, apiRef, props);
	  useGridInitializeState((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.newEditingApi ? editingStateInitializer : editingStateInitializer$1, apiRef, props);
	  useGridInitializeState(focusStateInitializer, apiRef, props);
	  useGridInitializeState(sortingStateInitializer, apiRef, props);
	  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);
	  useGridInitializeState(filterStateInitializer, apiRef, props);
	  useGridInitializeState(densityStateInitializer, apiRef, props);
	  useGridInitializeState(paginationStateInitializer, apiRef, props);
	  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);
	  useGridInitializeState(columnMenuStateInitializer, apiRef, props);
	  useGridKeyboardNavigation(apiRef, props);
	  useGridSelection(apiRef, props);
	  useGridColumns(apiRef, props);
	  useGridRows(apiRef, props);
	  useGridParamsApi(apiRef);
	  useGridColumnSpanning(apiRef);
	  useGridColumnGrouping(apiRef, props);
	  const useGridEditing$2 = (_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.newEditingApi ? useGridEditing : useGridEditing$1;
	  useGridEditing$2(apiRef, props);
	  useGridFocus(apiRef, props);
	  useGridPreferencesPanel(apiRef, props);
	  useGridFilter(apiRef, props);
	  useGridSorting(apiRef, props);
	  useGridDensity(apiRef, props);
	  useGridPagination(apiRef, props);
	  useGridRowsMeta(apiRef, props);
	  useGridScroll(apiRef, props);
	  useGridColumnMenu(apiRef);
	  useGridCsvExport(apiRef);
	  useGridPrintExport(apiRef, props);
	  useGridClipboard(apiRef);
	  useGridDimensions(apiRef, props);
	  useGridEvents(apiRef, props);
	  useGridStatePersistence(apiRef);
	  return apiRef;
	};

	const DATA_GRID_FORCED_PROPS = {
	  apiRef: undefined,
	  disableMultipleColumnsFiltering: true,
	  disableMultipleColumnsSorting: true,
	  disableMultipleSelection: true,
	  throttleRowsMs: undefined,
	  hideFooterRowCount: false,
	  pagination: true,
	  checkboxSelectionVisibleOnly: false,
	  disableColumnReorder: true,
	  disableColumnResize: true,
	  keepColumnPositionIfDraggedOutside: false,
	  signature: 'DataGrid'
	};
	const MAX_PAGE_SIZE = 100;
	/**
	 * The default values of `DataGridPropsWithDefaultValues` to inject in the props of DataGrid.
	 */

	const DATA_GRID_PROPS_DEFAULT_VALUES = {
	  autoHeight: false,
	  autoPageSize: false,
	  checkboxSelection: false,
	  checkboxSelectionVisibleOnly: false,
	  columnBuffer: 3,
	  rowBuffer: 3,
	  columnThreshold: 3,
	  rowThreshold: 3,
	  density: GridDensityTypes.Standard,
	  disableExtendRowFullWidth: false,
	  disableColumnFilter: false,
	  disableColumnMenu: false,
	  disableColumnSelector: false,
	  disableDensitySelector: false,
	  disableMultipleColumnsFiltering: false,
	  disableMultipleSelection: false,
	  disableMultipleColumnsSorting: false,
	  disableSelectionOnClick: false,
	  disableVirtualization: false,
	  disableIgnoreModificationsIfProcessingProps: false,
	  editMode: GridEditModes.Cell,
	  filterMode: GridFeatureModeConstant.client,
	  headerHeight: 56,
	  hideFooter: false,
	  hideFooterPagination: false,
	  hideFooterRowCount: false,
	  hideFooterSelectedRowCount: false,
	  logger: console,
	  logLevel: 'error' ,
	  pagination: false,
	  paginationMode: GridFeatureModeConstant.client,
	  rowHeight: 52,
	  rowsPerPageOptions: [25, 50, 100],
	  rowSpacingType: 'margin',
	  showCellRightBorder: false,
	  showColumnRightBorder: false,
	  sortingOrder: ['asc', 'desc', null],
	  sortingMode: GridFeatureModeConstant.client,
	  throttleRowsMs: 0,
	  disableColumnReorder: false,
	  disableColumnResize: false,
	  keepNonExistentRowsSelected: false,
	  keepColumnPositionIfDraggedOutside: false
	};
	const useDataGridProps = inProps => {
	  if (inProps.pageSize > MAX_PAGE_SIZE) {
	    throw new Error(`'props.pageSize' cannot exceed 100 in DataGrid.`);
	  }

	  const themedProps = useThemeProps({
	    props: inProps,
	    name: 'MuiDataGrid'
	  });
	  const localeText = react.exports.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);
	  const components = react.exports.useMemo(() => {
	    const overrides = themedProps.components;

	    if (!overrides) {
	      return _extends({}, DATA_GRID_DEFAULT_SLOTS_COMPONENTS);
	    }

	    const mergedComponents = {};
	    Object.entries(DATA_GRID_DEFAULT_SLOTS_COMPONENTS).forEach(([key, defaultComponent]) => {
	      mergedComponents[key] = overrides[key] === undefined ? defaultComponent : overrides[key];
	    });
	    return mergedComponents;
	  }, [themedProps.components]);
	  return react.exports.useMemo(() => _extends({}, DATA_GRID_PROPS_DEFAULT_VALUES, themedProps, {
	    localeText,
	    components
	  }, DATA_GRID_FORCED_PROPS), [themedProps, localeText, components]);
	};

	const _excluded$7 = ["className"];

	const useUtilityClasses$5 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['virtualScroller']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const VirtualScrollerRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'VirtualScroller',
	  overridesResolver: (props, styles) => styles.virtualScroller
	})({
	  overflow: 'auto',
	  // See https://github.com/mui/mui-x/issues/4360
	  position: 'relative',
	  '@media print': {
	    overflow: 'hidden'
	  }
	});
	const GridVirtualScroller = /*#__PURE__*/react.exports.forwardRef(function GridVirtualScroller(props, ref) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$7);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$5(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(VirtualScrollerRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other));
	});

	const _excluded$6 = ["className", "style"];

	const useUtilityClasses$4 = ownerState => {
	  const {
	    classes,
	    overflowedContent
	  } = ownerState;
	  const slots = {
	    root: ['virtualScrollerContent', overflowedContent && 'virtualScrollerContent--overflowed']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const VirtualScrollerContentRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'VirtualScrollerContent',
	  overridesResolver: (props, styles) => styles.virtualScrollerContent
	})({});
	const GridVirtualScrollerContent = /*#__PURE__*/react.exports.forwardRef(function GridVirtualScrollerContent(props, ref) {
	  const {
	    className,
	    style
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$6);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes,
	    overflowedContent: !rootProps.autoHeight && (style == null ? void 0 : style.minHeight) === 'auto'
	  };
	  const classes = useUtilityClasses$4(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(VirtualScrollerContentRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className),
	    style: style
	  }, other));
	});

	const _excluded$5 = ["className"];

	const useUtilityClasses$3 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['virtualScrollerRenderZone']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const VirtualScrollerRenderZoneRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'VirtualScrollerRenderZone',
	  overridesResolver: (props, styles) => styles.virtualScrollerRenderZone
	})({
	  position: 'absolute',
	  display: 'flex',
	  // Prevents margin collapsing when using `getRowSpacing`
	  flexDirection: 'column'
	});
	const GridVirtualScrollerRenderZone = /*#__PURE__*/react.exports.forwardRef(function GridVirtualScrollerRenderZone(props, ref) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$5);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$3(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(VirtualScrollerRenderZoneRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other));
	});

	const _excluded$4 = ["style"];
	function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {
	  if (positions.length <= 0) {
	    return -1;
	  }

	  if (sliceStart >= sliceEnd) {
	    return sliceStart;
	  }

	  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);
	  const itemOffset = positions[pivot];
	  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);
	}

	function exponentialSearch(offset, positions, index) {
	  let interval = 1;

	  while (index < positions.length && positions[index] < offset) {
	    index += interval;
	    interval *= 2;
	  }

	  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));
	}

	const getRenderableIndexes = ({
	  firstIndex,
	  lastIndex,
	  buffer,
	  minFirstIndex,
	  maxLastIndex
	}) => {
	  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];
	};
	const useGridVirtualScroller = props => {
	  var _currentPage$range3, _currentPage$range4;

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
	  const {
	    ref,
	    disableVirtualization,
	    onRenderZonePositioning,
	    renderZoneMinColumnIndex = 0,
	    renderZoneMaxColumnIndex = visibleColumns.length,
	    getRowProps
	  } = props;
	  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);
	  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);
	  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);
	  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);
	  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);
	  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);
	  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);
	  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);
	  const currentPage = useGridVisibleRows(apiRef, rootProps);
	  const renderZoneRef = react.exports.useRef(null);
	  const rootRef = react.exports.useRef(null);
	  const handleRef = useForkRef(ref, rootRef);
	  const [renderContext, setRenderContext] = react.exports.useState(null);
	  const prevRenderContext = react.exports.useRef(renderContext);
	  const scrollPosition = react.exports.useRef({
	    top: 0,
	    left: 0
	  });
	  const [containerWidth, setContainerWidth] = react.exports.useState(null);
	  const prevTotalWidth = react.exports.useRef(columnsTotalWidth);
	  const getNearestIndexToRender = react.exports.useCallback(offset => {
	    var _currentPage$range, _currentPage$range2;

	    const lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();
	    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;

	    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {
	      // Check if all rows in this page are already measured
	      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;
	    }

	    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);

	    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {
	      // If all rows were measured (when no row has "auto" as height) or all rows before the offset
	      // were measured, then use a binary search because it's faster.
	      return binarySearch(offset, rowsMeta.positions);
	    } // Otherwise, use an exponential search.
	    // If rows have "auto" as height, their positions will be based on estimated heights.
	    // In this case, we can skip several steps until we find a position higher than the offset.
	    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js


	    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);
	  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);
	  const computeRenderContext = react.exports.useCallback(() => {
	    if (disableVirtualization) {
	      return {
	        firstRowIndex: 0,
	        lastRowIndex: currentPage.rows.length,
	        firstColumnIndex: 0,
	        lastColumnIndex: visibleColumns.length
	      };
	    }

	    const {
	      top,
	      left
	    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.
	    // In the last index, this is not needed because Array.slice doesn't include it.

	    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);
	    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + rootRef.current.clientHeight);
	    let hasRowWithAutoHeight = false;
	    let firstColumnIndex = 0;
	    let lastColumnIndex = columnPositions.length;
	    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
	      firstIndex: firstRowIndex,
	      lastIndex: lastRowIndex,
	      minFirstIndex: 0,
	      maxLastIndex: currentPage.rows.length,
	      buffer: rootProps.rowBuffer
	    });

	    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {
	      const row = currentPage.rows[i];
	      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);
	    }

	    if (!hasRowWithAutoHeight) {
	      firstColumnIndex = binarySearch(left, columnPositions);
	      lastColumnIndex = binarySearch(left + containerWidth, columnPositions);
	    }

	    return {
	      firstRowIndex,
	      lastRowIndex,
	      firstColumnIndex,
	      lastColumnIndex
	    };
	  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerWidth]);
	  react.exports.useEffect(() => {
	    if (disableVirtualization) {
	      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;
	    } else {
	      // TODO a scroll reset should not be necessary
	      rootRef.current.scrollLeft = 0;
	      rootRef.current.scrollTop = 0;
	    }
	  }, [disableVirtualization]);
	  react.exports.useEffect(() => {
	    setContainerWidth(rootRef.current.clientWidth);
	  }, [rowsMeta.currentPageTotalHeight]);
	  const handleResize = react.exports.useCallback(params => {
	    setContainerWidth(params.width);
	  }, []);
	  useGridApiEventHandler(apiRef, 'resize', handleResize);
	  const updateRenderZonePosition = react.exports.useCallback(nextRenderContext => {
	    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
	      firstIndex: nextRenderContext.firstRowIndex,
	      lastIndex: nextRenderContext.lastRowIndex,
	      minFirstIndex: 0,
	      maxLastIndex: currentPage.rows.length,
	      buffer: rootProps.rowBuffer
	    });
	    const [initialFirstColumnToRender] = getRenderableIndexes({
	      firstIndex: nextRenderContext.firstColumnIndex,
	      lastIndex: nextRenderContext.lastColumnIndex,
	      minFirstIndex: renderZoneMinColumnIndex,
	      maxLastIndex: renderZoneMaxColumnIndex,
	      buffer: rootProps.columnBuffer
	    });
	    const firstColumnToRender = getFirstNonSpannedColumnToRender({
	      firstColumnToRender: initialFirstColumnToRender,
	      apiRef,
	      firstRowToRender,
	      lastRowToRender,
	      visibleRows: currentPage.rows
	    });
	    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];
	    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called

	    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;

	    if (typeof onRenderZonePositioning === 'function') {
	      onRenderZonePositioning({
	        top,
	        left
	      });
	    }
	  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);
	  react.exports.useLayoutEffect(() => {
	    if (renderContext) {
	      updateRenderZonePosition(renderContext);
	    }
	  }, [renderContext, updateRenderZonePosition]);
	  const updateRenderContext = react.exports.useCallback(nextRenderContext => {
	    setRenderContext(nextRenderContext);
	    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
	      firstIndex: nextRenderContext.firstRowIndex,
	      lastIndex: nextRenderContext.lastRowIndex,
	      minFirstIndex: 0,
	      maxLastIndex: currentPage.rows.length,
	      buffer: rootProps.rowBuffer
	    });
	    apiRef.current.publishEvent('renderedRowsIntervalChange', {
	      firstRowToRender,
	      lastRowToRender
	    });
	    prevRenderContext.current = nextRenderContext;
	  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer]);
	  react.exports.useEffect(() => {
	    if (containerWidth == null) {
	      return;
	    }

	    const initialRenderContext = computeRenderContext();
	    updateRenderContext(initialRenderContext);
	    const {
	      top,
	      left
	    } = scrollPosition.current;
	    const params = {
	      top,
	      left,
	      renderContext: initialRenderContext
	    };
	    apiRef.current.publishEvent('rowsScroll', params);
	  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);

	  const handleScroll = event => {
	    const {
	      scrollTop,
	      scrollLeft
	    } = event.currentTarget;
	    scrollPosition.current.top = scrollTop;
	    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start

	    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {
	      return;
	    } // When virtualization is disabled, the context never changes during scroll


	    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();
	    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);
	    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);
	    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);
	    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);
	    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling

	    apiRef.current.publishEvent('rowsScroll', {
	      top: scrollTop,
	      left: scrollLeft,
	      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current
	    }, event);

	    if (shouldSetState) {
	      // Prevents batching render context changes
	      reactDom.exports.flushSync(() => {
	        updateRenderContext(nextRenderContext);
	      });
	      prevTotalWidth.current = columnsTotalWidth;
	    }
	  };

	  const handleWheel = event => {
	    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);
	  };

	  const handleTouchMove = event => {
	    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);
	  };

	  const getRows = (params = {
	    renderContext
	  }) => {
	    const {
	      renderContext: nextRenderContext,
	      minFirstColumn = renderZoneMinColumnIndex,
	      maxLastColumn = renderZoneMaxColumnIndex,
	      availableSpace = containerWidth,
	      rowIndexOffset = 0,
	      position = 'center'
	    } = params;

	    if (!nextRenderContext || availableSpace == null) {
	      return null;
	    }

	    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;
	    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;
	    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
	      firstIndex: nextRenderContext.firstRowIndex,
	      lastIndex: nextRenderContext.lastRowIndex,
	      minFirstIndex: 0,
	      maxLastIndex: currentPage.rows.length,
	      buffer: rowBuffer
	    });
	    const renderedRows = [];

	    if (params.rows) {
	      params.rows.forEach(row => {
	        renderedRows.push(row);
	        apiRef.current.unstable_calculateColSpan({
	          rowId: row.id,
	          minFirstColumn,
	          maxLastColumn,
	          columns: visibleColumns
	        });
	      });
	    } else {
	      if (!currentPage.range) {
	        return null;
	      }

	      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {
	        const row = currentPage.rows[i];
	        renderedRows.push(row);
	        apiRef.current.unstable_calculateColSpan({
	          rowId: row.id,
	          minFirstColumn,
	          maxLastColumn,
	          columns: visibleColumns
	        });
	      }
	    }

	    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({
	      firstIndex: nextRenderContext.firstColumnIndex,
	      lastIndex: nextRenderContext.lastColumnIndex,
	      minFirstIndex: minFirstColumn,
	      maxLastIndex: maxLastColumn,
	      buffer: columnBuffer
	    });
	    const firstColumnToRender = getFirstNonSpannedColumnToRender({
	      firstColumnToRender: initialFirstColumnToRender,
	      apiRef,
	      firstRowToRender,
	      lastRowToRender,
	      visibleRows: currentPage.rows
	    });
	    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);
	    const rows = [];

	    for (let i = 0; i < renderedRows.length; i += 1) {
	      var _currentPage$range5, _rootProps$components;

	      const {
	        id,
	        model
	      } = renderedRows[i];
	      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;
	      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';
	      let isSelected;

	      if (selectedRowsLookup[id] == null) {
	        isSelected = false;
	      } else {
	        isSelected = apiRef.current.isRowSelectable(id);
	      }

	      rows.push( /*#__PURE__*/jsxRuntime.exports.jsx(rootProps.components.Row, _extends({
	        row: model,
	        rowId: id,
	        rowHeight: baseRowHeight,
	        cellFocus: cellFocus // TODO move to inside the row
	        ,
	        cellTabIndex: cellTabIndex // TODO move to inside the row
	        ,
	        editRowsState: editRowsState // TODO move to inside the row
	        ,
	        renderedColumns: renderedColumns,
	        visibleColumns: visibleColumns,
	        firstColumnToRender: firstColumnToRender,
	        lastColumnToRender: lastColumnToRender,
	        selected: isSelected,
	        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,
	        containerWidth: availableSpace,
	        isLastVisible: lastVisibleRowIndex,
	        position: position
	      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));
	    }

	    return rows;
	  };

	  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;
	  const contentSize = react.exports.useMemo(() => {
	    // In cases where the columns exceed the available width,
	    // the horizontal scrollbar should be shown even when there're no rows.
	    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.
	    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);
	    let shouldExtendContent = false;

	    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {
	      shouldExtendContent = true;
	    }

	    const size = {
	      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',
	      height,
	      minHeight: shouldExtendContent ? '100%' : 'auto'
	    };

	    if (rootProps.autoHeight && currentPage.rows.length === 0) {
	      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.
	    }

	    return size;
	  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);
	  react.exports.useEffect(() => {
	    apiRef.current.publishEvent('virtualScrollerContentSizeChange');
	  }, [apiRef, contentSize]);

	  if (rootProps.autoHeight && currentPage.rows.length === 0) {
	    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.
	  }

	  const rootStyle = {};

	  if (!needsHorizontalScrollbar) {
	    rootStyle.overflowX = 'hidden';
	  }

	  if (rootProps.autoHeight) {
	    rootStyle.overflowY = 'hidden';
	  }

	  const getRenderContext = react.exports.useCallback(() => {
	    return prevRenderContext.current;
	  }, []);
	  apiRef.current.unstable_getRenderContext = getRenderContext;
	  return {
	    renderContext,
	    updateRenderZonePosition,
	    getRows,
	    getRootProps: (_ref = {}) => {
	      let {
	        style = {}
	      } = _ref,
	          other = _objectWithoutPropertiesLoose(_ref, _excluded$4);

	      return _extends({
	        ref: handleRef,
	        onScroll: handleScroll,
	        onWheel: handleWheel,
	        onTouchMove: handleTouchMove,
	        style: _extends({}, style, rootStyle)
	      }, other);
	    },
	    getContentProps: ({
	      style = {}
	    } = {}) => ({
	      style: _extends({}, style, contentSize)
	    }),
	    getRenderZoneProps: () => ({
	      ref: renderZoneRef
	    })
	  };
	};

	const _excluded$3 = ["className", "disableVirtualization"];
	const DataGridVirtualScroller = /*#__PURE__*/react.exports.forwardRef(function DataGridVirtualScroller(props, ref) {
	  const {
	    className,
	    disableVirtualization
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$3);

	  const {
	    getRootProps,
	    getContentProps,
	    getRenderZoneProps,
	    getRows
	  } = useGridVirtualScroller({
	    ref,
	    disableVirtualization
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridVirtualScroller, _extends({
	    className: className
	  }, getRootProps(other), {
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(GridVirtualScrollerContent, _extends({}, getContentProps(), {
	      children: /*#__PURE__*/jsxRuntime.exports.jsx(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {
	        children: getRows()
	      }))
	    }))
	  }));
	});

	const useUtilityClasses$2 = ownerState => {
	  const {
	    classes,
	    headerAlign,
	    isDragging,
	    showRightBorder,
	    showColumnBorder,
	    groupId
	  } = ownerState;
	  const slots = {
	    root: ['columnHeader', headerAlign === 'left' && 'columnHeader--alignLeft', headerAlign === 'center' && 'columnHeader--alignCenter', headerAlign === 'right' && 'columnHeader--alignRight', isDragging && 'columnHeader--moving', showRightBorder && 'withBorder', showColumnBorder && 'columnHeader--showColumnBorder', groupId === null ? 'columnHeader--emptyGroup' : 'columnHeader--filledGroup'],
	    draggableContainer: ['columnHeaderDraggableContainer'],
	    titleContainer: ['columnHeaderTitleContainer'],
	    titleContainerContent: ['columnHeaderTitleContainerContent']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	function GridColumnGroupHeader(props) {
	  var _apiRef$current$getRo, _columnGroupsLookup$g;

	  const {
	    groupId,
	    width,
	    depth,
	    maxDepth,
	    fields,
	    height,
	    colIndex,
	    isLastColumn,
	    extendRowFullWidth
	  } = props;
	  const rootProps = useGridRootProps();
	  const apiRef = useGridApiContext();
	  const columnGroupsLookup = useGridSelector(apiRef, gridColumnGroupsLookupSelector);
	  const {
	    hasScrollX,
	    hasScrollY
	  } = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {
	    hasScrollX: false,
	    hasScrollY: false
	  };
	  const group = groupId ? columnGroupsLookup[groupId] : {};
	  const {
	    headerName = groupId != null ? groupId : '',
	    description = '',
	    headerAlign = undefined
	  } = group;
	  let headerComponent;
	  const render = groupId && ((_columnGroupsLookup$g = columnGroupsLookup[groupId]) == null ? void 0 : _columnGroupsLookup$g.renderHeaderGroup);
	  const renderParams = {
	    groupId,
	    headerName,
	    description,
	    depth,
	    maxDepth,
	    fields,
	    colIndex,
	    isLastColumn
	  };

	  if (groupId && render) {
	    headerComponent = render(renderParams);
	  }

	  const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;
	  const showRightBorder = !isLastColumn ? rootProps.showColumnRightBorder : !removeLastBorderRight && !extendRowFullWidth;
	  const showColumnBorder = rootProps.showColumnRightBorder;

	  const ownerState = _extends({}, props, {
	    classes: rootProps.classes,
	    showRightBorder,
	    showColumnBorder,
	    headerAlign,
	    depth,
	    isDragging: false
	  });

	  const label = headerName != null ? headerName : groupId;
	  const id = useId();
	  const elementId = groupId === null ? `empty-group-cell-${id}` : groupId;
	  const classes = useUtilityClasses$2(ownerState);
	  const headerClassName = typeof group.headerClassName === 'function' ? group.headerClassName(renderParams) : group.headerClassName;
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridGenericColumnHeaderItem, {
	    classes: classes,
	    columnMenuOpen: false,
	    colIndex: colIndex,
	    height: height,
	    isResizing: false,
	    sortDirection: null,
	    hasFocus: false,
	    tabIndex: -1,
	    isDraggable: false,
	    headerComponent: headerComponent,
	    headerClassName: headerClassName,
	    description: description,
	    elementId: elementId,
	    width: width,
	    columnMenuIconButton: null,
	    columnTitleIconButtons: null,
	    resizable: false,
	    label: label,
	    "aria-colspan": fields.length // The fields are wrapped between |-...-| to avoid confusion between fields "id" and "id2" when using selector data-fields~=
	    ,
	    "data-fields": `|-${fields.join('-|-')}-|`,
	    disableHeaderSeparator: true
	  });
	}

	const GridColumnHeaderRow = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'ColumnHeaderRow',
	  overridesResolver: (props, styles) => styles.columnHeaderRow
	})(() => ({
	  display: 'flex'
	}));

	function isUIEvent(event) {
	  return !!event.target;
	}

	const useGridColumnHeaders = props => {
	  const {
	    innerRef: innerRefProp,
	    minColumnIndex = 0
	  } = props;
	  const [dragCol, setDragCol] = react.exports.useState('');
	  const [resizeCol, setResizeCol] = react.exports.useState('');
	  const apiRef = useGridApiContext();
	  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
	  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);
	  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);
	  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);
	  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);
	  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);
	  const headerGroupingMaxDepth = useGridSelector(apiRef, gridDensityHeaderGroupingMaxDepthSelector);
	  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);
	  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);
	  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);
	  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);
	  const rootProps = useGridRootProps();
	  const innerRef = react.exports.useRef(null);
	  const handleInnerRef = useForkRef(innerRefProp, innerRef);
	  const [renderContext, setRenderContext] = react.exports.useState(null);
	  const prevRenderContext = react.exports.useRef(renderContext);
	  const prevScrollLeft = react.exports.useRef(0);
	  const currentPage = useGridVisibleRows(apiRef, rootProps);
	  react.exports.useEffect(() => {
	    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
	  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll

	  const getFirstColumnIndexToRenderRef = react.exports.useRef(defaultMemoize(getFirstColumnIndexToRender, {
	    equalityCheck: (a, b) => ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(key => a[key] === b[key])
	  }));
	  const updateInnerPosition = react.exports.useCallback(nextRenderContext => {
	    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
	      firstIndex: nextRenderContext.firstRowIndex,
	      lastIndex: nextRenderContext.lastRowIndex,
	      minFirstIndex: 0,
	      maxLastIndex: currentPage.rows.length,
	      buffer: rootProps.rowBuffer
	    });
	    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({
	      firstColumnIndex: nextRenderContext.firstColumnIndex,
	      minColumnIndex,
	      columnBuffer: rootProps.columnBuffer,
	      firstRowToRender,
	      lastRowToRender,
	      apiRef,
	      visibleRows: currentPage.rows
	    });
	    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;
	    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;
	  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);
	  react.exports.useLayoutEffect(() => {
	    if (renderContext) {
	      updateInnerPosition(renderContext);
	    }
	  }, [renderContext, updateInnerPosition]);
	  const handleScroll = react.exports.useCallback(({
	    left,
	    renderContext: nextRenderContext = null
	  }, event) => {
	    var _prevRenderContext$cu, _prevRenderContext$cu2;

	    if (!innerRef.current) {
	      return;
	    } // Ignore vertical scroll.
	    // Excepts the first event which sets the previous render context.


	    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {
	      return;
	    }

	    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been
	    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.

	    let canUpdateInnerPosition = false;

	    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {
	      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects
	      if (isUIEvent(event)) {
	        // To prevent flickering, the inner position can only be updated after the new context has
	        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before
	        // updating the position.
	        reactDom.exports.flushSync(() => {
	          setRenderContext(nextRenderContext);
	        });
	        canUpdateInnerPosition = true;
	      } else {
	        setRenderContext(nextRenderContext);
	      }

	      prevRenderContext.current = nextRenderContext;
	    } else {
	      canUpdateInnerPosition = true;
	    } // Pass directly the render context to avoid waiting for the next render


	    if (nextRenderContext && canUpdateInnerPosition) {
	      updateInnerPosition(nextRenderContext);
	    }
	  }, [updateInnerPosition]);
	  const handleColumnResizeStart = react.exports.useCallback(params => setResizeCol(params.field), []);
	  const handleColumnResizeStop = react.exports.useCallback(() => setResizeCol(''), []);
	  const handleColumnReorderStart = react.exports.useCallback(params => setDragCol(params.field), []);
	  const handleColumnReorderStop = react.exports.useCallback(() => setDragCol(''), []);
	  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);
	  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);
	  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);
	  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);
	  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll); // Helper for computation common between getColumnHeaders and getColumnGroupHeaders

	  const getColumnsToRender = params => {
	    const {
	      renderContext: nextRenderContext = renderContext,
	      minFirstColumn = minColumnIndex,
	      maxLastColumn = visibleColumns.length
	    } = params || {};

	    if (!nextRenderContext) {
	      return null;
	    }

	    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
	      firstIndex: nextRenderContext.firstRowIndex,
	      lastIndex: nextRenderContext.lastRowIndex,
	      minFirstIndex: 0,
	      maxLastIndex: currentPage.rows.length,
	      buffer: rootProps.rowBuffer
	    });
	    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({
	      firstColumnIndex: nextRenderContext.firstColumnIndex,
	      minColumnIndex: minFirstColumn,
	      columnBuffer: rootProps.columnBuffer,
	      apiRef,
	      firstRowToRender,
	      lastRowToRender,
	      visibleRows: currentPage.rows
	    });
	    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);
	    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);
	    return {
	      renderedColumns,
	      firstColumnToRender,
	      lastColumnToRender,
	      minFirstColumn,
	      maxLastColumn
	    };
	  };

	  const getColumnHeaders = (params, other = {}) => {
	    const columnsToRender = getColumnsToRender(params);

	    if (columnsToRender == null) {
	      return null;
	    }

	    const {
	      renderedColumns,
	      firstColumnToRender
	    } = columnsToRender;
	    const columns = [];

	    for (let i = 0; i < renderedColumns.length; i += 1) {
	      const column = renderedColumns[i];
	      const columnIndex = firstColumnToRender + i;
	      const isFirstColumn = columnIndex === 0;
	      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);
	      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;
	      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;
	      const open = columnMenuState.open && columnMenuState.field === column.field;
	      columns.push( /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {
	        columnMenuOpen: open,
	        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,
	        headerHeight: headerHeight,
	        isDragging: column.field === dragCol,
	        column: column,
	        colIndex: columnIndex,
	        isResizing: resizeCol === column.field,
	        isLastColumn: columnIndex === visibleColumns.length - 1,
	        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,
	        hasFocus: hasFocus,
	        tabIndex: tabIndex
	      }, other), column.field));
	    }

	    return /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeaderRow, {
	      role: "row",
	      "aria-rowindex": headerGroupingMaxDepth + 1,
	      children: columns
	    });
	  };

	  const getParents = (path = [], depth) => path.slice(0, depth + 1);

	  const getColumnGroupHeaders = params => {
	    if (headerGroupingMaxDepth === 0) {
	      return null;
	    }

	    const columnsToRender = getColumnsToRender(params);

	    if (columnsToRender == null || columnsToRender.renderedColumns.length === 0) {
	      return null;
	    }

	    const {
	      renderedColumns,
	      firstColumnToRender,
	      lastColumnToRender,
	      maxLastColumn
	    } = columnsToRender;
	    const columns = [];
	    const headerToRender = [];

	    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {
	      var _visibleColumns$first, _visibleColumns$first2, _visibleColumns$first3;

	      // Initialize the header line with a grouping item containing all the columns on the left of the virtualization which are in the same group as the first group to render
	      const initialHeader = [];
	      let leftOverflow = 0;
	      let columnIndex = firstColumnToRender - 1;
	      const firstColumnToRenderGroup = (_visibleColumns$first = visibleColumns[firstColumnToRender]) == null ? void 0 : (_visibleColumns$first2 = _visibleColumns$first.groupPath) == null ? void 0 : _visibleColumns$first2[depth]; // The array of parent is used to manage empty grouping cell
	      // When two empty grouping cell are next to each other, we merge them if the belong to the same group.

	      const firstColumnToRenderGroupParents = getParents((_visibleColumns$first3 = visibleColumns[firstColumnToRender]) == null ? void 0 : _visibleColumns$first3.groupPath, depth);

	      while (firstColumnToRenderGroup !== null && columnIndex >= minColumnIndex && (_visibleColumns$colum = visibleColumns[columnIndex]) != null && _visibleColumns$colum.groupPath && isDeepEqual(getParents((_visibleColumns$colum2 = visibleColumns[columnIndex]) == null ? void 0 : _visibleColumns$colum2.groupPath, depth), firstColumnToRenderGroupParents)) {
	        var _visibleColumns$colum, _visibleColumns$colum2, _column$computedWidth;

	        const column = visibleColumns[columnIndex];
	        leftOverflow += (_column$computedWidth = column.computedWidth) != null ? _column$computedWidth : 0;

	        if (initialHeader.length === 0) {
	          var _column$computedWidth2;

	          initialHeader.push({
	            width: (_column$computedWidth2 = column.computedWidth) != null ? _column$computedWidth2 : 0,
	            fields: [column.field],
	            groupId: firstColumnToRenderGroup,
	            groupParents: firstColumnToRenderGroupParents,
	            colIndex: columnIndex
	          });
	        } else {
	          var _column$computedWidth3;

	          initialHeader[0].width += (_column$computedWidth3 = column.computedWidth) != null ? _column$computedWidth3 : 0;
	          initialHeader[0].fields.push(column.field);
	          initialHeader[0].colIndex = columnIndex;
	        }

	        columnIndex -= 1;
	      }

	      const depthInfo = renderedColumns.reduce((aggregated, column, i) => {
	        var _column$computedWidth7;

	        const lastItem = aggregated[aggregated.length - 1];

	        if (column.groupPath && column.groupPath.length > depth) {
	          var _column$computedWidth5;

	          if (lastItem && lastItem.groupId === column.groupPath[depth]) {
	            var _column$computedWidth4;

	            // Merge with the previous columns
	            return [...aggregated.slice(0, aggregated.length - 1), _extends({}, lastItem, {
	              width: lastItem.width + ((_column$computedWidth4 = column.computedWidth) != null ? _column$computedWidth4 : 0),
	              fields: [...lastItem.fields, column.field]
	            })];
	          } // Create a new grouping


	          return [...aggregated, {
	            groupId: column.groupPath[depth],
	            groupParents: getParents(column.groupPath, depth),
	            width: (_column$computedWidth5 = column.computedWidth) != null ? _column$computedWidth5 : 0,
	            fields: [column.field],
	            colIndex: firstColumnToRender + i
	          }];
	        }

	        if (lastItem && lastItem.groupId === null && isDeepEqual(getParents(column.groupPath, depth), lastItem.groupParents)) {
	          var _column$computedWidth6;

	          // We merge with previous column
	          return [...aggregated.slice(0, aggregated.length - 1), _extends({}, lastItem, {
	            width: lastItem.width + ((_column$computedWidth6 = column.computedWidth) != null ? _column$computedWidth6 : 0),
	            fields: [...lastItem.fields, column.field]
	          })];
	        } // We create new empty cell


	        return [...aggregated, {
	          groupId: null,
	          groupParents: getParents(column.groupPath, depth),
	          width: (_column$computedWidth7 = column.computedWidth) != null ? _column$computedWidth7 : 0,
	          fields: [column.field],
	          colIndex: firstColumnToRender + i
	        }];
	      }, initialHeader);
	      columnIndex = lastColumnToRender;
	      const lastColumnToRenderGroup = depthInfo[depthInfo.length - 1].groupId;

	      while (lastColumnToRenderGroup !== null && columnIndex < maxLastColumn && (_visibleColumns$colum3 = visibleColumns[columnIndex]) != null && _visibleColumns$colum3.groupPath && ((_visibleColumns$colum4 = visibleColumns[columnIndex]) == null ? void 0 : (_visibleColumns$colum5 = _visibleColumns$colum4.groupPath) == null ? void 0 : _visibleColumns$colum5[depth]) === lastColumnToRenderGroup) {
	        var _visibleColumns$colum3, _visibleColumns$colum4, _visibleColumns$colum5, _column$computedWidth8;

	        const column = visibleColumns[columnIndex];
	        depthInfo[depthInfo.length - 1].width += (_column$computedWidth8 = column.computedWidth) != null ? _column$computedWidth8 : 0;
	        depthInfo[depthInfo.length - 1].fields.push(column.field);
	        columnIndex += 1;
	      }

	      headerToRender.push({
	        leftOverflow,
	        elements: [...depthInfo]
	      });
	    }

	    headerToRender.forEach((depthInfo, depthIndex) => {
	      columns.push( /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeaderRow, {
	        style: {
	          height: `${headerHeight}px`,
	          transform: `translateX(-${depthInfo.leftOverflow}px)`
	        },
	        role: "row",
	        "aria-rowindex": depthIndex + 1,
	        children: depthInfo.elements.map(({
	          groupId,
	          width,
	          fields,
	          colIndex
	        }, groupIndex) => {
	          return /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnGroupHeader, {
	            groupId: groupId,
	            width: width,
	            fields: fields,
	            colIndex: colIndex,
	            depth: depthIndex,
	            isLastColumn: colIndex === visibleColumns.length - fields.length,
	            extendRowFullWidth: !rootProps.disableExtendRowFullWidth,
	            maxDepth: headerToRender.length,
	            height: headerHeight
	          }, groupIndex);
	        })
	      }, depthIndex));
	    });
	    return columns;
	  };

	  const rootStyle = {
	    minHeight: totalHeaderHeight,
	    maxHeight: totalHeaderHeight,
	    lineHeight: `${headerHeight}px`
	  };
	  return {
	    renderContext,
	    getColumnHeaders,
	    getColumnGroupHeaders,
	    isDragging: !!dragCol,
	    getRootProps: (other = {}) => _extends({
	      style: rootStyle
	    }, other),
	    getInnerProps: () => ({
	      ref: handleInnerRef,
	      role: 'rowgroup'
	    })
	  };
	};

	const _excluded$2 = ["className"];

	const useUtilityClasses$1 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['columnHeaders']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridColumnHeadersRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'ColumnHeaders',
	  overridesResolver: (props, styles) => styles.columnHeaders
	})(({
	  theme
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68);
	  return {
	    position: 'absolute',
	    top: 0,
	    left: 0,
	    right: 0,
	    overflow: 'hidden',
	    display: 'flex',
	    alignItems: 'center',
	    borderBottom: `1px solid ${borderColor}`,
	    borderTopLeftRadius: theme.shape.borderRadius,
	    borderTopRightRadius: theme.shape.borderRadius
	  };
	});
	const GridColumnHeaders = /*#__PURE__*/react.exports.forwardRef(function GridColumnHeaders(props, ref) {
	  const {
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$2);

	  const rootProps = useGridRootProps();
	  const ownerState = {
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses$1(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeadersRoot, _extends({
	    ref: ref,
	    className: clsx(className, classes.root)
	  }, other));
	});

	const _excluded$1 = ["isDragging", "className"];

	const useUtilityClasses = ownerState => {
	  const {
	    isDragging,
	    hasScrollX,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['columnHeadersInner', isDragging && 'columnHeaderDropZone', hasScrollX && 'columnHeadersInner--scrollable']
	  };
	  return composeClasses(slots, getDataGridUtilityClass, classes);
	};

	const GridColumnHeadersInnerRoot = styled$1('div', {
	  name: 'MuiDataGrid',
	  slot: 'columnHeadersInner',
	  overridesResolver: (props, styles) => [{
	    [`&.${gridClasses.columnHeaderDropZone}`]: styles.columnHeaderDropZone
	  }, styles.columnHeadersInner]
	})(() => ({
	  display: 'flex',
	  alignItems: 'flex-start',
	  flexDirection: 'column',
	  [`&.${gridClasses.columnHeaderDropZone} .${gridClasses.columnHeaderDraggableContainer}`]: {
	    cursor: 'move'
	  },
	  [`&.${gridClasses['columnHeadersInner--scrollable']} .${gridClasses.columnHeader}:last-child`]: {
	    borderRight: 'none'
	  }
	}));
	const GridColumnHeadersInner = /*#__PURE__*/react.exports.forwardRef(function GridColumnHeadersInner(props, ref) {
	  var _apiRef$current$getRo, _apiRef$current$getRo2;

	  const {
	    isDragging,
	    className
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded$1);

	  const apiRef = useGridApiContext();
	  const rootProps = useGridRootProps();
	  const ownerState = {
	    isDragging,
	    hasScrollX: (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.hasScrollX) != null ? _apiRef$current$getRo : false,
	    classes: rootProps.classes
	  };
	  const classes = useUtilityClasses(ownerState);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridColumnHeadersInnerRoot, _extends({
	    ref: ref,
	    className: clsx(className, classes.root)
	  }, other));
	});

	const _excluded = ["innerRef", "className"];
	const DataGridColumnHeaders = /*#__PURE__*/react.exports.forwardRef(function GridColumnsHeader(props, ref) {
	  const {
	    innerRef
	  } = props,
	        other = _objectWithoutPropertiesLoose(props, _excluded);

	  const {
	    isDragging,
	    getRootProps,
	    getInnerProps,
	    getColumnHeaders,
	    getColumnGroupHeaders
	  } = useGridColumnHeaders({
	    innerRef
	  });
	  return /*#__PURE__*/jsxRuntime.exports.jsxs(GridColumnHeaders, _extends({
	    ref: ref
	  }, getRootProps(other), {
	    children: [/*#__PURE__*/jsxRuntime.exports.jsx(GridScrollArea, {
	      scrollDirection: "left"
	    }), /*#__PURE__*/jsxRuntime.exports.jsxs(GridColumnHeadersInner, _extends({
	      isDragging: isDragging
	    }, getInnerProps(), {
	      children: [getColumnGroupHeaders(), getColumnHeaders()]
	    })), /*#__PURE__*/jsxRuntime.exports.jsx(GridScrollArea, {
	      scrollDirection: "right"
	    })]
	  }));
	});

	const DataGridRaw = /*#__PURE__*/react.exports.forwardRef(function DataGrid(inProps, ref) {
	  const props = useDataGridProps(inProps);
	  const apiRef = useDataGridComponent(props);
	  return /*#__PURE__*/jsxRuntime.exports.jsx(GridContextProvider, {
	    apiRef: apiRef,
	    props: props,
	    children: /*#__PURE__*/jsxRuntime.exports.jsx(GridRoot, {
	      className: props.className,
	      style: props.style,
	      sx: props.sx,
	      ref: ref,
	      children: /*#__PURE__*/jsxRuntime.exports.jsxs(GridErrorHandler, {
	        children: [/*#__PURE__*/jsxRuntime.exports.jsx(GridHeaderPlaceholder, {}), /*#__PURE__*/jsxRuntime.exports.jsx(GridBody, {
	          ColumnHeadersComponent: DataGridColumnHeaders,
	          VirtualScrollerComponent: DataGridVirtualScroller
	        }), /*#__PURE__*/jsxRuntime.exports.jsx(GridFooterPlaceholder, {})]
	      })
	    })
	  });
	});
	const DataGrid = /*#__PURE__*/react.exports.memo(DataGridRaw);
	DataGridRaw.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------

	  /**
	   * The label of the grid.
	   */
	  'aria-label': propTypes.exports.string,

	  /**
	   * The id of the element containing a label for the grid.
	   */
	  'aria-labelledby': propTypes.exports.string,

	  /**
	   * If `true`, the grid height is dynamic and follow the number of rows in the grid.
	   * @default false
	   */
	  autoHeight: propTypes.exports.bool,

	  /**
	   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
	   * @default false
	   */
	  autoPageSize: propTypes.exports.bool,

	  /**
	   * Controls the modes of the cells.
	   */
	  cellModesModel: propTypes.exports.object,

	  /**
	   * If `true`, the grid get a first column with a checkbox that allows to select rows.
	   * @default false
	   */
	  checkboxSelection: propTypes.exports.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: propTypes.exports.object,

	  /**
	   * Number of extra columns to be rendered before/after the visible slice.
	   * @default 3
	   */
	  columnBuffer: propTypes.exports.number,
	  columnGroupingModel: propTypes.exports.arrayOf(propTypes.exports.object),

	  /**
	   * Set of columns of type [[GridColumns]].
	   */
	  columns: chainPropTypes(propTypes.exports.array.isRequired),

	  /**
	   * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.
	   * @default 3
	   */
	  columnThreshold: propTypes.exports.number,

	  /**
	   * Extend native column types with your new column types.
	   */
	  columnTypes: propTypes.exports.object,

	  /**
	   * Set the column visibility model of the grid.
	   * If defined, the grid will ignore the `hide` property in [[GridColDef]].
	   */
	  columnVisibilityModel: propTypes.exports.object,

	  /**
	   * Overrideable components.
	   */
	  components: propTypes.exports.object,

	  /**
	   * Overrideable components props dynamically passed to the component at rendering.
	   */
	  componentsProps: propTypes.exports.object,

	  /**
	   * Set the density of the grid.
	   * @default "standard"
	   */
	  density: propTypes.exports.oneOf(['comfortable', 'compact', 'standard']),

	  /**
	   * If `true`, column filters are disabled.
	   * @default false
	   */
	  disableColumnFilter: propTypes.exports.bool,

	  /**
	   * If `true`, the column menu is disabled.
	   * @default false
	   */
	  disableColumnMenu: propTypes.exports.bool,

	  /**
	   * If `true`, hiding/showing columns is disabled.
	   * @default false
	   */
	  disableColumnSelector: propTypes.exports.bool,

	  /**
	   * If `true`, the density selector is disabled.
	   * @default false
	   */
	  disableDensitySelector: propTypes.exports.bool,

	  /**
	   * If `true`, rows will not be extended to fill the full width of the grid container.
	   * @default false
	   */
	  disableExtendRowFullWidth: propTypes.exports.bool,

	  /**
	   * If `true`, modification to a cell will not be discarded if the mode is changed from "edit" to "view" while processing props.
	   * @default false
	   */
	  disableIgnoreModificationsIfProcessingProps: propTypes.exports.bool,

	  /**
	   * If `true`, the selection on click on a row or cell is disabled.
	   * @default false
	   */
	  disableSelectionOnClick: propTypes.exports.bool,

	  /**
	   * If `true`, the virtualization is disabled.
	   * @default false
	   */
	  disableVirtualization: propTypes.exports.bool,

	  /**
	   * Controls whether to use the cell or row editing.
	   * @default "cell"
	   */
	  editMode: propTypes.exports.oneOf(['cell', 'row']),

	  /**
	   * Set the edit rows model of the grid.
	   */
	  editRowsModel: propTypes.exports.object,

	  /**
	   * An error that will turn the grid into its error state and display the error component.
	   */
	  error: propTypes.exports.any,

	  /**
	   * Features under development.
	   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.
	   */
	  experimentalFeatures: propTypes.exports.shape({
	    columnGrouping: propTypes.exports.bool,
	    newEditingApi: propTypes.exports.bool,
	    preventCommitWhileValidating: propTypes.exports.bool,
	    warnIfFocusStateIsNotSynced: propTypes.exports.bool
	  }),

	  /**
	   * Filtering can be processed on the server or client-side.
	   * Set it to 'server' if you would like to handle filtering on the server-side.
	   * @default "client"
	   */
	  filterMode: propTypes.exports.oneOf(['client', 'server']),

	  /**
	   * Set the filter model of the grid.
	   */
	  filterModel: propTypes.exports.shape({
	    items: propTypes.exports.arrayOf(propTypes.exports.shape({
	      columnField: propTypes.exports.string.isRequired,
	      id: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
	      operatorValue: propTypes.exports.string,
	      value: propTypes.exports.any
	    })).isRequired,
	    linkOperator: propTypes.exports.oneOf(['and', 'or']),
	    quickFilterLogicOperator: propTypes.exports.oneOf(['and', 'or']),
	    quickFilterValues: propTypes.exports.array
	  }),

	  /**
	   * Function that applies CSS classes dynamically on cells.
	   * @param {GridCellParams} params With all properties from [[GridCellParams]].
	   * @returns {string} The CSS class to apply to the cell.
	   */
	  getCellClassName: propTypes.exports.func,

	  /**
	   * Function that returns the element to render in row detail.
	   * @param {GridRowParams} params With all properties from [[GridRowParams]].
	   * @returns {JSX.Element} The row detail element.
	   */
	  getDetailPanelContent: propTypes.exports.func,

	  /**
	   * Function that returns the estimated height for a row.
	   * Only works if dynamic row height is used.
	   * Once the row height is measured this value is discarded.
	   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
	   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.
	   */
	  getEstimatedRowHeight: propTypes.exports.func,

	  /**
	   * Function that applies CSS classes dynamically on rows.
	   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].
	   * @returns {string} The CSS class to apply to the row.
	   */
	  getRowClassName: propTypes.exports.func,

	  /**
	   * Function that sets the row height per row.
	   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
	   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If "auto" then the row height is calculated based on the content.
	   */
	  getRowHeight: propTypes.exports.func,

	  /**
	   * Return the id of a given [[GridRowModel]].
	   */
	  getRowId: propTypes.exports.func,

	  /**
	   * Function that allows to specify the spacing between rows.
	   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].
	   * @returns {GridRowSpacing} The row spacing values.
	   */
	  getRowSpacing: propTypes.exports.func,

	  /**
	   * Set the height in pixel of the column headers in the grid.
	   * @default 56
	   */
	  headerHeight: propTypes.exports.number,

	  /**
	   * If `true`, the footer component is hidden.
	   * @default false
	   */
	  hideFooter: propTypes.exports.bool,

	  /**
	   * If `true`, the pagination component in the footer is hidden.
	   * @default false
	   */
	  hideFooterPagination: propTypes.exports.bool,

	  /**
	   * If `true`, the selected row count in the footer is hidden.
	   * @default false
	   */
	  hideFooterSelectedRowCount: propTypes.exports.bool,

	  /**
	   * The initial state of the DataGrid.
	   * The data in it will be set in the state on initialization but will not be controlled.
	   * If one of the data in `initialState` is also being controlled, then the control state wins.
	   */
	  initialState: propTypes.exports.object,

	  /**
	   * Callback fired when a cell is rendered, returns true if the cell is editable.
	   * @param {GridCellParams} params With all properties from [[GridCellParams]].
	   * @returns {boolean} A boolean indicating if the cell is editable.
	   */
	  isCellEditable: propTypes.exports.func,

	  /**
	   * Determines if a row can be selected.
	   * @param {GridRowParams} params With all properties from [[GridRowParams]].
	   * @returns {boolean} A boolean indicating if the cell is selectable.
	   */
	  isRowSelectable: propTypes.exports.func,

	  /**
	   * If `true`, the selection model will retain selected rows that do not exist.
	   * Useful when using server side pagination and row selections need to be retained
	   * when changing pages.
	   * @default false
	   */
	  keepNonExistentRowsSelected: propTypes.exports.bool,

	  /**
	   * If `true`, a  loading overlay is displayed.
	   */
	  loading: propTypes.exports.bool,

	  /**
	   * Set the locale text of the grid.
	   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.
	   */
	  localeText: propTypes.exports.object,

	  /**
	   * Pass a custom logger in the components that implements the [[Logger]] interface.
	   * @default console
	   */
	  logger: propTypes.exports.shape({
	    debug: propTypes.exports.func.isRequired,
	    error: propTypes.exports.func.isRequired,
	    info: propTypes.exports.func.isRequired,
	    warn: propTypes.exports.func.isRequired
	  }),

	  /**
	   * Allows to pass the logging level or false to turn off logging.
	   * @default "error" ("warn" in dev mode)
	   */
	  logLevel: propTypes.exports.oneOf(['debug', 'error', 'info', 'warn', false]),

	  /**
	   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).
	   */
	  nonce: propTypes.exports.string,

	  /**
	   * Callback fired when any cell is clicked.
	   * @param {GridCellParams} params With all properties from [[GridCellParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onCellClick: propTypes.exports.func,

	  /**
	   * Callback fired when a double click event comes from a cell element.
	   * @param {GridCellParams} params With all properties from [[GridCellParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onCellDoubleClick: propTypes.exports.func,

	  /**
	   * Callback fired when the cell changes are committed.
	   * @param {GridCellEditCommitParams} params With all properties from [[GridCellEditCommitParams]].
	   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onCellEditCommit: propTypes.exports.func,

	  /**
	   * Callback fired when the cell turns to edit mode.
	   * @param {GridCellParams} params With all properties from [[GridCellParams]].
	   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
	   */
	  onCellEditStart: propTypes.exports.func,

	  /**
	   * Callback fired when the cell turns to view mode.
	   * @param {GridCellParams} params With all properties from [[GridCellParams]].
	   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
	   */
	  onCellEditStop: propTypes.exports.func,

	  /**
	   * Callback fired when a cell loses focus.
	   * @param {GridCellParams} params With all properties from [[GridCellParams]].
	   * @param {MuiEvent<MuiBaseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onCellFocusOut: propTypes.exports.func,

	  /**
	   * Callback fired when a keydown event comes from a cell element.
	   * @param {GridCellParams} params With all properties from [[GridCellParams]].
	   * @param {MuiEvent<React.KeyboardEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onCellKeyDown: propTypes.exports.func,

	  /**
	   * Callback fired when the `cellModesModel` prop changes.
	   * @param {GridCellModesModel} cellModesModel Object containig which cells are in "edit" mode.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onCellModesModelChange: propTypes.exports.func,

	  /**
	   * Callback fired when a click event comes from a column header element.
	   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onColumnHeaderClick: propTypes.exports.func,

	  /**
	   * Callback fired when a double click event comes from a column header element.
	   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onColumnHeaderDoubleClick: propTypes.exports.func,

	  /**
	   * Callback fired when a mouse enter event comes from a column header element.
	   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onColumnHeaderEnter: propTypes.exports.func,

	  /**
	   * Callback fired when a mouse leave event comes from a column header element.
	   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onColumnHeaderLeave: propTypes.exports.func,

	  /**
	   * Callback fired when a mouseout event comes from a column header element.
	   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onColumnHeaderOut: propTypes.exports.func,

	  /**
	   * Callback fired when a mouseover event comes from a column header element.
	   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onColumnHeaderOver: propTypes.exports.func,

	  /**
	   * Callback fired when a column is reordered.
	   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].
	   * @param {MuiEvent<{}>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onColumnOrderChange: propTypes.exports.func,

	  /**
	   * Callback fired when a column visibility changes.
	   * Only works when no `columnVisibilityModel` is provided and if we change the visibility of a single column at a time.
	   * @param {GridColumnVisibilityChangeParams} params With all properties from [[GridColumnVisibilityChangeParams]].
	   * @param {MuiEvent<{}>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   * @deprecated Use `onColumnVisibilityModelChange` instead.
	   */
	  onColumnVisibilityChange: propTypes.exports.func,

	  /**
	   * Callback fired when the column visibility model changes.
	   * @param {GridColumnVisibilityModel} model The new model.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onColumnVisibilityModelChange: propTypes.exports.func,

	  /**
	   * Callback fired when the edit cell value changes.
	   * @param {GridEditCellPropsParams} params With all properties from [[GridEditCellPropsParams]].
	   * @param {MuiEvent<React.SyntheticEvent>} event The event that caused this prop to be called.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   * @deprecated use `preProcessEditCellProps` from the [`GridColDef`](/x/api/data-grid/grid-col-def/)
	   */
	  onEditCellPropsChange: propTypes.exports.func,

	  /**
	   * Callback fired when the `editRowsModel` changes.
	   * @param {GridEditRowsModel} editRowsModel With all properties from [[GridEditRowsModel]].
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onEditRowsModelChange: propTypes.exports.func,

	  /**
	   * Callback fired when an exception is thrown in the grid.
	   * @param {any} args The arguments passed to the `showError` call.
	   * @param {MuiEvent<{}>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onError: propTypes.exports.func,

	  /**
	   * Callback fired when the Filter model changes before the filters are applied.
	   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onFilterModelChange: propTypes.exports.func,

	  /**
	   * Callback fired when the menu is closed.
	   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
	   * @param {MuiEvent<{}>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onMenuClose: propTypes.exports.func,

	  /**
	   * Callback fired when the menu is opened.
	   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
	   * @param {MuiEvent<{}>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onMenuOpen: propTypes.exports.func,

	  /**
	   * Callback fired when the current page has changed.
	   * @param {number} page Index of the page displayed on the Grid.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onPageChange: propTypes.exports.func,

	  /**
	   * Callback fired when the page size has changed.
	   * @param {number} pageSize Size of the page displayed on the Grid.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onPageSizeChange: propTypes.exports.func,

	  /**
	   * Callback fired when the preferences panel is closed.
	   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
	   * @param {MuiEvent<{}>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onPreferencePanelClose: propTypes.exports.func,

	  /**
	   * Callback fired when the preferences panel is opened.
	   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
	   * @param {MuiEvent<{}>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onPreferencePanelOpen: propTypes.exports.func,

	  /**
	   * Callback called when `processRowUpdate` throws an error or rejects.
	   * @param {any} error The error thrown.
	   */
	  onProcessRowUpdateError: propTypes.exports.func,

	  /**
	   * Callback fired when the grid is resized.
	   * @param {ElementSize} containerSize With all properties from [[ElementSize]].
	   * @param {MuiEvent<{}>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onResize: propTypes.exports.func,

	  /**
	   * Callback fired when a row is clicked.
	   * Not called if the target clicked is an interactive element added by the built-in columns.
	   * @param {GridRowParams} params With all properties from [[GridRowParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onRowClick: propTypes.exports.func,

	  /**
	   * Callback fired when a double click event comes from a row container element.
	   * @param {GridRowParams} params With all properties from [[RowParams]].
	   * @param {MuiEvent<React.MouseEvent>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onRowDoubleClick: propTypes.exports.func,

	  /**
	   * Callback fired when the row changes are committed.
	   * @param {GridRowId} id The row id.
	   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
	   */
	  onRowEditCommit: propTypes.exports.func,

	  /**
	   * Callback fired when the row turns to edit mode.
	   * @param {GridRowParams} params With all properties from [[GridRowParams]].
	   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
	   */
	  onRowEditStart: propTypes.exports.func,

	  /**
	   * Callback fired when the row turns to view mode.
	   * @param {GridRowParams} params With all properties from [[GridRowParams]].
	   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
	   */
	  onRowEditStop: propTypes.exports.func,

	  /**
	   * Callback fired when the `rowModesModel` prop changes.
	   * @param {GridRowModesModel} rowModesModel Object containig which rows are in "edit" mode.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onRowModesModelChange: propTypes.exports.func,

	  /**
	   * Callback fired when the selection state of one or multiple rows changes.
	   * @param {GridSelectionModel} selectionModel With all the row ids [[GridSelectionModel]].
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onSelectionModelChange: propTypes.exports.func,

	  /**
	   * Callback fired when the sort model changes before a column is sorted.
	   * @param {GridSortModel} model With all properties from [[GridSortModel]].
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   */
	  onSortModelChange: propTypes.exports.func,

	  /**
	   * Callback fired when the state of the grid is updated.
	   * @param {GridState} state The new state.
	   * @param {MuiEvent<{}>} event The event object.
	   * @param {GridCallbackDetails} details Additional details for this callback.
	   * @ignore - do not document.
	   */
	  onStateChange: propTypes.exports.func,

	  /**
	   * The zero-based index of the current page.
	   * @default 0
	   */
	  page: propTypes.exports.number,

	  /**
	   * Set the number of rows in one page.
	   * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.
	   * @default 100
	   */
	  pageSize: chainPropTypes(propTypes.exports.number),
	  pagination: props => {
	    if (props.pagination === false) {
	      return new Error(['MUI: `<DataGrid pagination={false} />` is not a valid prop.', 'Infinite scrolling is not available in the MIT version.', '', 'You need to upgrade to DataGridPro or DataGridPremium component to disable the pagination.'].join('\n'));
	    }

	    return null;
	  },

	  /**
	   * Pagination can be processed on the server or client-side.
	   * Set it to 'client' if you would like to handle the pagination on the client-side.
	   * Set it to 'server' if you would like to handle the pagination on the server-side.
	   * @default "client"
	   */
	  paginationMode: propTypes.exports.oneOf(['client', 'server']),

	  /**
	   * Callback called before updating a row with new values in the row and cell editing.
	   * Only applied if `props.experimentalFeatures.newEditingApi: true`.
	   * @template R
	   * @param {R} newRow Row object with the new values.
	   * @param {R} oldRow Row object with the old values.
	   * @returns {Promise<R> | R} The final values to update the row.
	   */
	  processRowUpdate: propTypes.exports.func,

	  /**
	   * Number of extra rows to be rendered before/after the visible slice.
	   * @default 3
	   */
	  rowBuffer: propTypes.exports.number,

	  /**
	   * Set the total number of rows, if it is different from the length of the value `rows` prop.
	   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
	   */
	  rowCount: propTypes.exports.number,

	  /**
	   * Set the height in pixel of a row in the grid.
	   * @default 52
	   */
	  rowHeight: propTypes.exports.number,

	  /**
	   * Controls the modes of the rows.
	   */
	  rowModesModel: propTypes.exports.object,

	  /**
	   * Set of rows of type [[GridRowsProp]].
	   */
	  rows: propTypes.exports.arrayOf(propTypes.exports.object).isRequired,

	  /**
	   * Sets the type of space between rows added by `getRowSpacing`.
	   * @default "margin"
	   */
	  rowSpacingType: propTypes.exports.oneOf(['border', 'margin']),

	  /**
	   * Select the pageSize dynamically using the component UI.
	   * @default [25, 50, 100]
	   */
	  rowsPerPageOptions: propTypes.exports.arrayOf(propTypes.exports.number),

	  /**
	   * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.
	   * @default 3
	   */
	  rowThreshold: propTypes.exports.number,

	  /**
	   * Override the height/width of the grid inner scrollbar.
	   */
	  scrollbarSize: propTypes.exports.number,

	  /**
	   * Set the selection model of the grid.
	   */
	  selectionModel: chainPropTypes(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string, propTypes.exports.array])),

	  /**
	   * If `true`, the right border of the cells are displayed.
	   * @default false
	   */
	  showCellRightBorder: propTypes.exports.bool,

	  /**
	   * If `true`, the right border of the column headers are displayed.
	   * @default false
	   */
	  showColumnRightBorder: propTypes.exports.bool,

	  /**
	   * Sorting can be processed on the server or client-side.
	   * Set it to 'client' if you would like to handle sorting on the client-side.
	   * Set it to 'server' if you would like to handle sorting on the server-side.
	   * @default "client"
	   */
	  sortingMode: propTypes.exports.oneOf(['client', 'server']),

	  /**
	   * The order of the sorting sequence.
	   * @default ['asc', 'desc', null]
	   */
	  sortingOrder: propTypes.exports.arrayOf(propTypes.exports.oneOf(['asc', 'desc'])),

	  /**
	   * Set the sort model of the grid.
	   */
	  sortModel: propTypes.exports.arrayOf(propTypes.exports.shape({
	    field: propTypes.exports.string.isRequired,
	    sort: propTypes.exports.oneOf(['asc', 'desc'])
	  })),

	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
	};

	var rows = [{
	  id: 1,
	  col1: 'Hello',
	  col2: 'World'
	}, {
	  id: 2,
	  col1: 'DataGridPro',
	  col2: 'is Awesome'
	}, {
	  id: 3,
	  col1: 'MUI',
	  col2: 'is Amazing'
	}];
	var columns = [{
	  field: 'col1',
	  headerName: 'Column 1',
	  width: 150
	}, {
	  field: 'col2',
	  headerName: 'Column 2',
	  width: 150
	}];
	function App() {
	  return /*#__PURE__*/React.createElement("div", {
	    style: {
	      height: 300,
	      width: '100%'
	    }
	  }, /*#__PURE__*/React.createElement(DataGrid, {
	    rows: rows,
	    columns: columns
	  }));
	}

	ReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, null, /*#__PURE__*/React.createElement(App, null)), document.getElementById('root'));

})();
